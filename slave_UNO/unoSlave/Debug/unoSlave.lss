
unoSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  0000044c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800168  00800168  00000548  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ef  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c01  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7d  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  0000301c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ab  00000000  00000000  000031a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000508  00000000  00000000  0000374f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003c57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 36       	cpi	r26, 0x68	; 104
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e6       	ldi	r26, 0x68	; 104
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 38       	cpi	r26, 0x83	; 131
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  9e:	0c 94 24 02 	jmp	0x448	; 0x448 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <buzzer_init>:

const uint8_t note_count = sizeof(melody_notes) / sizeof(melody_notes[0]);

void buzzer_init(void) {
	// Set PB3 (Pin 11, OC2A) as output
	DDRB |= (1 << BUZZER_PIN);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	84 b9       	out	0x04, r24	; 4

	// Reset Timer2
	TCCR2A = 0;
  ac:	e0 eb       	ldi	r30, 0xB0	; 176
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
	TCCR2B = 0;
  b2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCNT2 = 0;
  b6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

	// Toggle OC2A on Compare Match
	TCCR2A |= (1 << COM2A0);
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24

	// CTC mode
	TCCR2A |= (1 << WGM21);
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <set_buzzer_frequency>:

	// Prescaler will be set later
}

void set_buzzer_frequency(uint16_t frequency) {
  c8:	9c 01       	movw	r18, r24
	if (frequency == 0) {
  ca:	89 2b       	or	r24, r25
  cc:	31 f4       	brne	.+12     	; 0xda <set_buzzer_frequency+0x12>
		// Stop Timer2
		TCCR2B &= ~((1 << CS22) | (1 << CS21) | (1 << CS20));
  ce:	e1 eb       	ldi	r30, 0xB1	; 177
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 7f       	andi	r24, 0xF8	; 248
  d6:	80 83       	st	Z, r24
		return;
  d8:	08 95       	ret
	}

	// Use prescaler 64
	TCCR2B &= ~((1 << CS22) | (1 << CS21) | (1 << CS20));
  da:	e1 eb       	ldi	r30, 0xB1	; 177
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 7f       	andi	r24, 0xF8	; 248
  e2:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22); // prescaler = 64
  e4:	80 81       	ld	r24, Z
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	80 83       	st	Z, r24

	// Calculate OCR2A value
	uint16_t ocr = (F_CPU / (2UL * 64UL * frequency)) - 1;
  ea:	c9 01       	movw	r24, r18
  ec:	a0 e0       	ldi	r26, 0x00	; 0
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	aa 1f       	adc	r26, r26
  f6:	bb 1f       	adc	r27, r27
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	aa 1f       	adc	r26, r26
  fe:	bb 1f       	adc	r27, r27
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	aa 1f       	adc	r26, r26
 106:	bb 1f       	adc	r27, r27
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	aa 1f       	adc	r26, r26
 10e:	bb 1f       	adc	r27, r27
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	aa 1f       	adc	r26, r26
 116:	bb 1f       	adc	r27, r27
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	aa 1f       	adc	r26, r26
 11e:	bb 1f       	adc	r27, r27
 120:	9c 01       	movw	r18, r24
 122:	ad 01       	movw	r20, r26
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	44 1f       	adc	r20, r20
 12a:	55 1f       	adc	r21, r21
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	74 e2       	ldi	r23, 0x24	; 36
 130:	84 ef       	ldi	r24, 0xF4	; 244
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__udivmodsi4>
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	31 09       	sbc	r19, r1

	if (ocr > 255) ocr = 255; // Limit to 8-bit max
 13c:	2f 3f       	cpi	r18, 0xFF	; 255
 13e:	31 05       	cpc	r19, r1
 140:	19 f0       	breq	.+6      	; 0x148 <set_buzzer_frequency+0x80>
 142:	10 f0       	brcs	.+4      	; 0x148 <set_buzzer_frequency+0x80>
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	30 e0       	ldi	r19, 0x00	; 0
	OCR2A = (uint8_t)ocr;
 148:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 14c:	08 95       	ret

0000014e <play_emergency_melody>:
}

// Activates buzzer and blinks movement LED 3 times
// This is done in same function so the actions can be done simultaneously
void play_emergency_melody(void) {
 14e:	cf 93       	push	r28
	for (uint8_t i = 0; i < note_count; i++) {
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	40 c0       	rjmp	.+128    	; 0x1d4 <play_emergency_melody+0x86>
		set_buzzer_frequency(melody_notes[i]);
 154:	ec 2f       	mov	r30, r28
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	e4 5e       	subi	r30, 0xE4	; 228
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	80 81       	ld	r24, Z
 162:	91 81       	ldd	r25, Z+1	; 0x01
 164:	0e 94 64 00 	call	0xc8	; 0xc8 <set_buzzer_frequency>

		// Every fourth note (i % 4 == 0) is longer (200ms), others are shorter (100ms)
		if (i % 4 == 0) {
 168:	8c 2f       	mov	r24, r28
 16a:	83 70       	andi	r24, 0x03	; 3
 16c:	69 f4       	brne	.+26     	; 0x188 <play_emergency_melody+0x3a>
			set_movement_led(true);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 37 01 	call	0x26e	; 0x26e <set_movement_led>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	83 ec       	ldi	r24, 0xC3	; 195
 178:	99 e0       	ldi	r25, 0x09	; 9
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <play_emergency_melody+0x2c>
 182:	00 c0       	rjmp	.+0      	; 0x184 <play_emergency_melody+0x36>
 184:	00 00       	nop
 186:	18 c0       	rjmp	.+48     	; 0x1b8 <play_emergency_melody+0x6a>
			_delay_ms(200);
			} else if  (i == note_count - 1) {
 188:	cf 30       	cpi	r28, 0x0F	; 15
 18a:	51 f4       	brne	.+20     	; 0x1a0 <play_emergency_melody+0x52>
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	89 e6       	ldi	r24, 0x69	; 105
 190:	98 e1       	ldi	r25, 0x18	; 24
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <play_emergency_melody+0x44>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <play_emergency_melody+0x4e>
 19c:	00 00       	nop
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <play_emergency_melody+0x6a>
			_delay_ms(500);
		} else {
			set_movement_led(false);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 37 01 	call	0x26e	; 0x26e <set_movement_led>
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	81 ee       	ldi	r24, 0xE1	; 225
 1aa:	94 e0       	ldi	r25, 0x04	; 4
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <play_emergency_melody+0x5e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <play_emergency_melody+0x68>
 1b6:	00 00       	nop
			_delay_ms(100);
		}

		set_buzzer_frequency(0);  // Turn off the buzzer
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 64 00 	call	0xc8	; 0xc8 <set_buzzer_frequency>
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	80 e7       	ldi	r24, 0x70	; 112
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <play_emergency_melody+0x78>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <play_emergency_melody+0x82>
 1d0:	00 00       	nop
}

// Activates buzzer and blinks movement LED 3 times
// This is done in same function so the actions can be done simultaneously
void play_emergency_melody(void) {
	for (uint8_t i = 0; i < note_count; i++) {
 1d2:	cf 5f       	subi	r28, 0xFF	; 255
 1d4:	c0 31       	cpi	r28, 0x10	; 16
 1d6:	08 f4       	brcc	.+2      	; 0x1da <play_emergency_melody+0x8c>
 1d8:	bd cf       	rjmp	.-134    	; 0x154 <play_emergency_melody+0x6>
		set_buzzer_frequency(0);  // Turn off the buzzer

		// Small pause between notes
		_delay_ms(50);
	}
	set_movement_led(false);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 37 01 	call	0x26e	; 0x26e <set_movement_led>
}
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <TWI_init>:
static char twi_receive_data[BUFFER_SIZE];
static uint8_t twi_index = 0;

void TWI_init() {
	// Set slave address (7-bit address left-shifted, general call disabled)
	TWAR = (SLAVE_ADDRESS << 1);
 1e4:	8e ea       	ldi	r24, 0xAE	; 174
 1e6:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>

	// Enable TWI and ACK
	TWCR = (1 << TWEN) | (1 << TWEA);
 1ea:	84 e4       	ldi	r24, 0x44	; 68
 1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f0:	08 95       	ret

000001f2 <TWI_listen>:
void TWI_listen() {
	uint8_t status;

	while (1) {
		// Wait for TWI interrupt flag
		while (!(TWCR & (1 << TWINT))) {
 1f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f6:	88 23       	and	r24, r24
 1f8:	e4 f7       	brge	.-8      	; 0x1f2 <TWI_listen>
			;
		}

		// Read status and mask prescaler bits
		status = TWSR & 0xF8;
 1fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1fe:	88 7f       	andi	r24, 0xF8	; 248

		// Re-enable TWI, ACK, clear interrupt
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
 200:	94 ec       	ldi	r25, 0xC4	; 196
 202:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

		if ((status == 0x80) || (status == 0x90)) {
 206:	80 38       	cpi	r24, 0x80	; 128
 208:	11 f0       	breq	.+4      	; 0x20e <TWI_listen+0x1c>
 20a:	80 39       	cpi	r24, 0x90	; 144
 20c:	79 f4       	brne	.+30     	; 0x22c <TWI_listen+0x3a>
			// Data received and ACK returned
			if (twi_index < BUFFER_SIZE - 1) {
 20e:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <__data_end>
 212:	e3 31       	cpi	r30, 0x13	; 19
 214:	70 f7       	brcc	.-36     	; 0x1f2 <TWI_listen>
				twi_receive_data[twi_index++] = TWDR;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	8e 0f       	add	r24, r30
 21a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 224:	e7 59       	subi	r30, 0x97	; 151
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	80 83       	st	Z, r24
 22a:	e3 cf       	rjmp	.-58     	; 0x1f2 <TWI_listen>
			}
			} else if ((status == 0x88) || (status == 0x98)) {
 22c:	88 38       	cpi	r24, 0x88	; 136
 22e:	11 f0       	breq	.+4      	; 0x234 <TWI_listen+0x42>
 230:	88 39       	cpi	r24, 0x98	; 152
 232:	79 f4       	brne	.+30     	; 0x252 <TWI_listen+0x60>
			// Data received and NACK returned
			if (twi_index < BUFFER_SIZE - 1) {
 234:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <__data_end>
 238:	e3 31       	cpi	r30, 0x13	; 19
 23a:	d8 f6       	brcc	.-74     	; 0x1f2 <TWI_listen>
				twi_receive_data[twi_index++] = TWDR;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	8e 0f       	add	r24, r30
 240:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 24a:	e7 59       	subi	r30, 0x97	; 151
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	80 83       	st	Z, r24
 250:	d0 cf       	rjmp	.-96     	; 0x1f2 <TWI_listen>
			}
			} else if (status == 0xA0) {
 252:	80 3a       	cpi	r24, 0xA0	; 160
 254:	71 f6       	brne	.-100    	; 0x1f2 <TWI_listen>
			// Stop or repeated start condition
			twi_receive_data[twi_index] = '\0';  // Null-terminate
 256:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <__data_end>
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	e7 59       	subi	r30, 0x97	; 151
 25e:	fe 4f       	sbci	r31, 0xFE	; 254
 260:	10 82       	st	Z, r1
			twi_index = 0;
 262:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
 266:	08 95       	ret

00000268 <TWI_get_data>:
	}
}

char* TWI_get_data() {
	return twi_receive_data;
}
 268:	89 e6       	ldi	r24, 0x69	; 105
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	08 95       	ret

0000026e <set_movement_led>:
	DDRB |= (1 << MOVEMENT_LED_PIN) | (1 << DOOR_LED_PIN);
	set_door_led(true);
}

void set_movement_led(bool state) {
	if (state) {
 26e:	88 23       	and	r24, r24
 270:	21 f0       	breq	.+8      	; 0x27a <set_movement_led+0xc>
		PORTB |= (1 << MOVEMENT_LED_PIN);
 272:	85 b1       	in	r24, 0x05	; 5
 274:	84 60       	ori	r24, 0x04	; 4
 276:	85 b9       	out	0x05, r24	; 5
 278:	08 95       	ret
		} else {
		PORTB &= ~(1 << MOVEMENT_LED_PIN);
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	8b 7f       	andi	r24, 0xFB	; 251
 27e:	85 b9       	out	0x05, r24	; 5
 280:	08 95       	ret

00000282 <set_door_led>:
	}
}

void set_door_led(bool state) {
	if (state) {
 282:	88 23       	and	r24, r24
 284:	21 f0       	breq	.+8      	; 0x28e <set_door_led+0xc>
		PORTB |= (1 << DOOR_LED_PIN);
 286:	85 b1       	in	r24, 0x05	; 5
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	85 b9       	out	0x05, r24	; 5
 28c:	08 95       	ret
		} else {
		PORTB &= ~(1 << DOOR_LED_PIN);
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	8e 7f       	andi	r24, 0xFE	; 254
 292:	85 b9       	out	0x05, r24	; 5
 294:	08 95       	ret

00000296 <led_init>:
#define LED_BLINK_INTERVAL 800  // Set a constant interval for blinking

// Led controller can be used to turn the movement and door opening LEDs on and off. It also has blink function for emergencies.

void led_init(void) {
	DDRB |= (1 << MOVEMENT_LED_PIN) | (1 << DOOR_LED_PIN);
 296:	84 b1       	in	r24, 0x04	; 4
 298:	85 60       	ori	r24, 0x05	; 5
 29a:	84 b9       	out	0x04, r24	; 4
	set_door_led(true);
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 41 01 	call	0x282	; 0x282 <set_door_led>
 2a2:	08 95       	ret

000002a4 <blink_movement_led>:
		} else {
		PORTB &= ~(1 << DOOR_LED_PIN);
	}
}

void blink_movement_led() {
 2a4:	cf 93       	push	r28
	for (uint8_t i = 0; i < 3; i++) {
 2a6:	c0 e0       	ldi	r28, 0x00	; 0
 2a8:	19 c0       	rjmp	.+50     	; 0x2dc <blink_movement_led+0x38>
		set_movement_led(true);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 37 01 	call	0x26e	; 0x26e <set_movement_led>
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	8f e0       	ldi	r24, 0x0F	; 15
 2b4:	97 e2       	ldi	r25, 0x27	; 39
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <blink_movement_led+0x12>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <blink_movement_led+0x1c>
 2c0:	00 00       	nop
		_delay_ms(LED_BLINK_INTERVAL);
		set_movement_led(false);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 37 01 	call	0x26e	; 0x26e <set_movement_led>
 2c8:	2f ef       	ldi	r18, 0xFF	; 255
 2ca:	8f e0       	ldi	r24, 0x0F	; 15
 2cc:	97 e2       	ldi	r25, 0x27	; 39
 2ce:	21 50       	subi	r18, 0x01	; 1
 2d0:	80 40       	sbci	r24, 0x00	; 0
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <blink_movement_led+0x2a>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <blink_movement_led+0x34>
 2d8:	00 00       	nop
		PORTB &= ~(1 << DOOR_LED_PIN);
	}
}

void blink_movement_led() {
	for (uint8_t i = 0; i < 3; i++) {
 2da:	cf 5f       	subi	r28, 0xFF	; 255
 2dc:	c3 30       	cpi	r28, 0x03	; 3
 2de:	28 f3       	brcs	.-54     	; 0x2aa <blink_movement_led+0x6>
		set_movement_led(true);
		_delay_ms(LED_BLINK_INTERVAL);
		set_movement_led(false);
		_delay_ms(LED_BLINK_INTERVAL);
	}
}
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <string.h>

int main(void) {
	uart_init(103); // UART for debugging
 2e4:	87 e6       	ldi	r24, 0x67	; 103
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <uart_init>
	TWI_init();
 2ec:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TWI_init>
	buzzer_init();
 2f0:	0e 94 53 00 	call	0xa6	; 0xa6 <buzzer_init>
	led_init();
 2f4:	0e 94 4b 01 	call	0x296	; 0x296 <led_init>

	while (1) {
		// Wait for TWI message from master
		TWI_listen();
 2f8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <TWI_listen>
		char* message = TWI_get_data();
 2fc:	0e 94 34 01 	call	0x268	; 0x268 <TWI_get_data>
 300:	ec 01       	movw	r28, r24
		//print(message);

		// Handle door control
		if (strcmp(message, "open_door") == 0) {
 302:	6c e3       	ldi	r22, 0x3C	; 60
 304:	71 e0       	ldi	r23, 0x01	; 1
 306:	0e 94 1b 02 	call	0x436	; 0x436 <strcmp>
 30a:	89 2b       	or	r24, r25
 30c:	39 f4       	brne	.+14     	; 0x31c <main+0x38>
			set_movement_led(false);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 37 01 	call	0x26e	; 0x26e <set_movement_led>
			set_door_led(true);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 41 01 	call	0x282	; 0x282 <set_door_led>
 31a:	2f c0       	rjmp	.+94     	; 0x37a <main+0x96>
		
		} else if (strcmp(message, "close_door") == 0) {
 31c:	66 e4       	ldi	r22, 0x46	; 70
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	ce 01       	movw	r24, r28
 322:	0e 94 1b 02 	call	0x436	; 0x436 <strcmp>
 326:	89 2b       	or	r24, r25
 328:	39 f4       	brne	.+14     	; 0x338 <main+0x54>
			set_movement_led(false);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 37 01 	call	0x26e	; 0x26e <set_movement_led>
			set_door_led(false);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 41 01 	call	0x282	; 0x282 <set_door_led>
 336:	21 c0       	rjmp	.+66     	; 0x37a <main+0x96>
		}

		// Emergency handling
		else if (strcmp(message, "emergency") == 0) {
 338:	61 e5       	ldi	r22, 0x51	; 81
 33a:	71 e0       	ldi	r23, 0x01	; 1
 33c:	ce 01       	movw	r24, r28
 33e:	0e 94 1b 02 	call	0x436	; 0x436 <strcmp>
 342:	89 2b       	or	r24, r25
 344:	19 f4       	brne	.+6      	; 0x34c <main+0x68>
			play_emergency_melody(); // Activates buzzer and blinks movement LED 3 times
 346:	0e 94 a7 00 	call	0x14e	; 0x14e <play_emergency_melody>
 34a:	17 c0       	rjmp	.+46     	; 0x37a <main+0x96>
		}

		// Fault handling
		else if (strcmp(message, "fault") == 0) {
 34c:	6b e5       	ldi	r22, 0x5B	; 91
 34e:	71 e0       	ldi	r23, 0x01	; 1
 350:	ce 01       	movw	r24, r28
 352:	0e 94 1b 02 	call	0x436	; 0x436 <strcmp>
 356:	89 2b       	or	r24, r25
 358:	19 f4       	brne	.+6      	; 0x360 <main+0x7c>
			blink_movement_led();
 35a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <blink_movement_led>
 35e:	0d c0       	rjmp	.+26     	; 0x37a <main+0x96>
		}

		// Elevator movement
		else if (strcmp(message, "moving") == 0) {
 360:	61 e6       	ldi	r22, 0x61	; 97
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	ce 01       	movw	r24, r28
 366:	0e 94 1b 02 	call	0x436	; 0x436 <strcmp>
 36a:	89 2b       	or	r24, r25
 36c:	31 f4       	brne	.+12     	; 0x37a <main+0x96>
			set_movement_led(true);
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 37 01 	call	0x26e	; 0x26e <set_movement_led>
			set_door_led(false);
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 41 01 	call	0x282	; 0x282 <set_door_led>
 37a:	2f ef       	ldi	r18, 0xFF	; 255
 37c:	81 ee       	ldi	r24, 0xE1	; 225
 37e:	94 e0       	ldi	r25, 0x04	; 4
 380:	21 50       	subi	r18, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <main+0x9c>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0xa6>
 38a:	00 00       	nop
 38c:	b5 cf       	rjmp	.-150    	; 0x2f8 <main+0x14>

0000038e <uart_putchar>:
	// Redirect std I/O streams to UART
	stdout = &uart_output;
	stdin = &uart_input;
}

int uart_putchar(char c, FILE *stream) {
 38e:	cf 93       	push	r28
 390:	c8 2f       	mov	r28, r24
	// Convert newline to carriage return + newline
	if (c == '\n') {
 392:	8a 30       	cpi	r24, 0x0A	; 10
 394:	19 f4       	brne	.+6      	; 0x39c <uart_putchar+0xe>
		uart_putchar('\r', stream);
 396:	8d e0       	ldi	r24, 0x0D	; 13
 398:	0e 94 c7 01 	call	0x38e	; 0x38e <uart_putchar>
	}

	// Wait until buffer is empty
	while (!(UCSR0A & (1 << UDRE0)));
 39c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3a0:	85 ff       	sbrs	r24, 5
 3a2:	fc cf       	rjmp	.-8      	; 0x39c <uart_putchar+0xe>
	UDR0 = c;
 3a4:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0;
}
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <uart_getchar>:

int uart_getchar(FILE *stream) {
	// Wait for incoming data
	while (!(UCSR0A & (1 << RXC0)));
 3b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3b4:	88 23       	and	r24, r24
 3b6:	e4 f7       	brge	.-8      	; 0x3b0 <uart_getchar>
	return UDR0;
 3b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	08 95       	ret

000003c0 <uart_init>:
FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE uart_input  = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

void uart_init(uint16_t ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 3c0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 3c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 3c8:	e1 ec       	ldi	r30, 0xC1	; 193
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	88 61       	ori	r24, 0x18	; 24
 3d0:	80 83       	st	Z, r24

	// Set frame format: 8 data bits, 2 stop bits
	UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
 3d2:	e2 ec       	ldi	r30, 0xC2	; 194
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	8e 60       	ori	r24, 0x0E	; 14
 3da:	80 83       	st	Z, r24

	// Redirect std I/O streams to UART
	stdout = &uart_output;
 3dc:	ed e7       	ldi	r30, 0x7D	; 125
 3de:	f1 e0       	ldi	r31, 0x01	; 1
 3e0:	8e e0       	ldi	r24, 0x0E	; 14
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	93 83       	std	Z+3, r25	; 0x03
 3e6:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	91 83       	std	Z+1, r25	; 0x01
 3ee:	80 83       	st	Z, r24
 3f0:	08 95       	ret

000003f2 <__udivmodsi4>:
 3f2:	a1 e2       	ldi	r26, 0x21	; 33
 3f4:	1a 2e       	mov	r1, r26
 3f6:	aa 1b       	sub	r26, r26
 3f8:	bb 1b       	sub	r27, r27
 3fa:	fd 01       	movw	r30, r26
 3fc:	0d c0       	rjmp	.+26     	; 0x418 <__udivmodsi4_ep>

000003fe <__udivmodsi4_loop>:
 3fe:	aa 1f       	adc	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	ee 1f       	adc	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	a2 17       	cp	r26, r18
 408:	b3 07       	cpc	r27, r19
 40a:	e4 07       	cpc	r30, r20
 40c:	f5 07       	cpc	r31, r21
 40e:	20 f0       	brcs	.+8      	; 0x418 <__udivmodsi4_ep>
 410:	a2 1b       	sub	r26, r18
 412:	b3 0b       	sbc	r27, r19
 414:	e4 0b       	sbc	r30, r20
 416:	f5 0b       	sbc	r31, r21

00000418 <__udivmodsi4_ep>:
 418:	66 1f       	adc	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	88 1f       	adc	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	1a 94       	dec	r1
 422:	69 f7       	brne	.-38     	; 0x3fe <__udivmodsi4_loop>
 424:	60 95       	com	r22
 426:	70 95       	com	r23
 428:	80 95       	com	r24
 42a:	90 95       	com	r25
 42c:	9b 01       	movw	r18, r22
 42e:	ac 01       	movw	r20, r24
 430:	bd 01       	movw	r22, r26
 432:	cf 01       	movw	r24, r30
 434:	08 95       	ret

00000436 <strcmp>:
 436:	fb 01       	movw	r30, r22
 438:	dc 01       	movw	r26, r24
 43a:	8d 91       	ld	r24, X+
 43c:	01 90       	ld	r0, Z+
 43e:	80 19       	sub	r24, r0
 440:	01 10       	cpse	r0, r1
 442:	d9 f3       	breq	.-10     	; 0x43a <strcmp+0x4>
 444:	99 0b       	sbc	r25, r25
 446:	08 95       	ret

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
