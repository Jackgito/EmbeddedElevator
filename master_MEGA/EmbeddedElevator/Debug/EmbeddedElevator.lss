
EmbeddedElevator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000268  00800200  000011c4  00001258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800468  00800468  000014c0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028da  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000162f  00000000  00000000  0000401e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000170d  00000000  00000000  0000564d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00006d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a13  00000000  00000000  0000718c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001158  00000000  00000000  00007b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008cf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
       2:	00 00       	nop
       4:	df c2       	rjmp	.+1470   	; 0x5c4 <__vector_1>
       6:	00 00       	nop
       8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
       a:	00 00       	nop
       c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
       e:	00 00       	nop
      10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
      12:	00 00       	nop
      14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
      16:	00 00       	nop
      18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
      22:	00 00       	nop
      24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
      26:	00 00       	nop
      28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
      32:	00 00       	nop
      34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
      36:	00 00       	nop
      38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
      42:	00 00       	nop
      44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
      46:	00 00       	nop
      48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
      52:	00 00       	nop
      54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
      56:	00 00       	nop
      58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
      62:	00 00       	nop
      64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
      66:	00 00       	nop
      68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
      72:	00 00       	nop
      74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
      76:	00 00       	nop
      78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
      7e:	00 00       	nop
      80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
      82:	00 00       	nop
      84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
      86:	00 00       	nop
      88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
      92:	00 00       	nop
      94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
      96:	00 00       	nop
      98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
      be:	00 00       	nop
      c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
      da:	00 00       	nop
      dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
      de:	00 00       	nop
      e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	7e 03       	fmul	r23, r22
      e6:	86 03       	fmuls	r16, r22
      e8:	86 03       	fmuls	r16, r22
      ea:	86 03       	fmuls	r16, r22
      ec:	80 03       	fmuls	r16, r16
      ee:	86 03       	fmuls	r16, r22
      f0:	82 03       	fmuls	r16, r18
      f2:	84 03       	fmuls	r16, r20
      f4:	86 03       	fmuls	r16, r22
      f6:	86 03       	fmuls	r16, r22
      f8:	86 03       	fmuls	r16, r22
      fa:	86 03       	fmuls	r16, r22
      fc:	86 03       	fmuls	r16, r22
      fe:	86 03       	fmuls	r16, r22
     100:	86 03       	fmuls	r16, r22
     102:	86 03       	fmuls	r16, r22
     104:	86 03       	fmuls	r16, r22
     106:	86 03       	fmuls	r16, r22
     108:	86 03       	fmuls	r16, r22
     10a:	86 03       	fmuls	r16, r22
     10c:	86 03       	fmuls	r16, r22
     10e:	86 03       	fmuls	r16, r22
     110:	86 03       	fmuls	r16, r22
     112:	86 03       	fmuls	r16, r22
     114:	86 03       	fmuls	r16, r22
     116:	86 03       	fmuls	r16, r22
     118:	86 03       	fmuls	r16, r22
     11a:	86 03       	fmuls	r16, r22
     11c:	86 03       	fmuls	r16, r22
     11e:	86 03       	fmuls	r16, r22
     120:	86 03       	fmuls	r16, r22
     122:	86 03       	fmuls	r16, r22
     124:	86 03       	fmuls	r16, r22
     126:	86 03       	fmuls	r16, r22
     128:	86 03       	fmuls	r16, r22
     12a:	86 03       	fmuls	r16, r22
     12c:	86 03       	fmuls	r16, r22
     12e:	86 03       	fmuls	r16, r22
     130:	86 03       	fmuls	r16, r22
     132:	86 03       	fmuls	r16, r22
     134:	86 03       	fmuls	r16, r22
     136:	86 03       	fmuls	r16, r22
     138:	86 03       	fmuls	r16, r22
     13a:	86 03       	fmuls	r16, r22
     13c:	86 03       	fmuls	r16, r22
     13e:	86 03       	fmuls	r16, r22
     140:	86 03       	fmuls	r16, r22
     142:	86 03       	fmuls	r16, r22
     144:	86 03       	fmuls	r16, r22
     146:	86 03       	fmuls	r16, r22
     148:	86 03       	fmuls	r16, r22
     14a:	86 03       	fmuls	r16, r22
     14c:	86 03       	fmuls	r16, r22
     14e:	86 03       	fmuls	r16, r22
     150:	86 03       	fmuls	r16, r22
     152:	86 03       	fmuls	r16, r22
     154:	86 03       	fmuls	r16, r22
     156:	86 03       	fmuls	r16, r22
     158:	86 03       	fmuls	r16, r22
     15a:	86 03       	fmuls	r16, r22
     15c:	86 03       	fmuls	r16, r22
     15e:	86 03       	fmuls	r16, r22
     160:	86 03       	fmuls	r16, r22
     162:	86 03       	fmuls	r16, r22
     164:	76 03       	mulsu	r23, r22
     166:	86 03       	fmuls	r16, r22
     168:	86 03       	fmuls	r16, r22
     16a:	86 03       	fmuls	r16, r22
     16c:	78 03       	fmul	r23, r16
     16e:	86 03       	fmuls	r16, r22
     170:	7a 03       	fmul	r23, r18
     172:	7c 03       	fmul	r23, r20
     174:	86 03       	fmuls	r16, r22
     176:	86 03       	fmuls	r16, r22
     178:	86 03       	fmuls	r16, r22
     17a:	86 03       	fmuls	r16, r22
     17c:	86 03       	fmuls	r16, r22
     17e:	86 03       	fmuls	r16, r22
     180:	86 03       	fmuls	r16, r22
     182:	86 03       	fmuls	r16, r22
     184:	86 03       	fmuls	r16, r22
     186:	86 03       	fmuls	r16, r22
     188:	86 03       	fmuls	r16, r22
     18a:	86 03       	fmuls	r16, r22
     18c:	86 03       	fmuls	r16, r22
     18e:	86 03       	fmuls	r16, r22
     190:	86 03       	fmuls	r16, r22
     192:	86 03       	fmuls	r16, r22
     194:	86 03       	fmuls	r16, r22
     196:	86 03       	fmuls	r16, r22
     198:	86 03       	fmuls	r16, r22
     19a:	86 03       	fmuls	r16, r22
     19c:	86 03       	fmuls	r16, r22
     19e:	86 03       	fmuls	r16, r22
     1a0:	86 03       	fmuls	r16, r22
     1a2:	86 03       	fmuls	r16, r22
     1a4:	6e 03       	fmul	r22, r22
     1a6:	86 03       	fmuls	r16, r22
     1a8:	86 03       	fmuls	r16, r22
     1aa:	86 03       	fmuls	r16, r22
     1ac:	70 03       	mulsu	r23, r16
     1ae:	86 03       	fmuls	r16, r22
     1b0:	72 03       	mulsu	r23, r18
     1b2:	74 03       	mulsu	r23, r20
     1b4:	86 03       	fmuls	r16, r22
     1b6:	86 03       	fmuls	r16, r22
     1b8:	86 03       	fmuls	r16, r22
     1ba:	86 03       	fmuls	r16, r22
     1bc:	86 03       	fmuls	r16, r22
     1be:	86 03       	fmuls	r16, r22
     1c0:	86 03       	fmuls	r16, r22
     1c2:	86 03       	fmuls	r16, r22
     1c4:	68 03       	fmul	r22, r16
     1c6:	86 03       	fmuls	r16, r22
     1c8:	86 03       	fmuls	r16, r22
     1ca:	86 03       	fmuls	r16, r22
     1cc:	88 03       	fmulsu	r16, r16
     1ce:	86 03       	fmuls	r16, r22
     1d0:	6a 03       	fmul	r22, r18
     1d2:	6c 03       	fmul	r22, r20

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d1 e2       	ldi	r29, 0x21	; 33
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	00 e0       	ldi	r16, 0x00	; 0
     1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
     1e4:	14 e0       	ldi	r17, 0x04	; 4
     1e6:	a0 e0       	ldi	r26, 0x00	; 0
     1e8:	b2 e0       	ldi	r27, 0x02	; 2
     1ea:	e4 ec       	ldi	r30, 0xC4	; 196
     1ec:	f1 e1       	ldi	r31, 0x11	; 17
     1ee:	00 e0       	ldi	r16, 0x00	; 0
     1f0:	0b bf       	out	0x3b, r16	; 59
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
     1f4:	07 90       	elpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	a8 36       	cpi	r26, 0x68	; 104
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
     1fe:	24 e0       	ldi	r18, 0x04	; 4
     200:	a8 e6       	ldi	r26, 0x68	; 104
     202:	b4 e0       	ldi	r27, 0x04	; 4
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	a0 37       	cpi	r26, 0x70	; 112
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
     20e:	ca d3       	rcall	.+1940   	; 0x9a4 <main>
     210:	d7 c7       	rjmp	.+4014   	; 0x11c0 <_exit>

00000212 <__bad_interrupt>:
     212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <TWI_start>:
    TWCR |= (1 << TWEN); // Enable TWI
}

void TWI_start() {
    // Send start condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     214:	84 ea       	ldi	r24, 0xA4	; 164
     216:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    // Wait for the TWI interrupt flag to be set
	uint16_t elapsed = 0;
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
    while (!(TWCR & (1 << TWINT))) {
     21e:	0f c0       	rjmp	.+30     	; 0x23e <TWI_start+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	ef e9       	ldi	r30, 0x9F	; 159
     222:	ff e0       	ldi	r31, 0x0F	; 15
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <TWI_start+0x10>
     228:	00 c0       	rjmp	.+0      	; 0x22a <TWI_start+0x16>
     22a:	00 00       	nop
		_delay_ms(1);
		if (++elapsed > 1000) {  // Wait second
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	89 3e       	cpi	r24, 0xE9	; 233
     230:	f3 e0       	ldi	r31, 0x03	; 3
     232:	9f 07       	cpc	r25, r31
     234:	20 f0       	brcs	.+8      	; 0x23e <TWI_start+0x2a>
			print("TWI write timeout!");
     236:	8c e1       	ldi	r24, 0x1C	; 28
     238:	92 e0       	ldi	r25, 0x02	; 2
     23a:	54 c4       	rjmp	.+2216   	; 0xae4 <print>
			break;
     23c:	08 95       	ret
void TWI_start() {
    // Send start condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    // Wait for the TWI interrupt flag to be set
	uint16_t elapsed = 0;
    while (!(TWCR & (1 << TWINT))) {
     23e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     242:	22 23       	and	r18, r18
     244:	6c f7       	brge	.-38     	; 0x220 <TWI_start+0xc>
     246:	08 95       	ret

00000248 <TWI_stop>:
    }
}

void TWI_stop() {
    // Send stop condition
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     248:	84 e9       	ldi	r24, 0x94	; 148
     24a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     24e:	08 95       	ret

00000250 <TWI_write>:
}

// Used in send_TWI_data for sending one bit a time
void TWI_write(uint8_t data) {
	TWDR = data;
     250:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
     254:	84 e8       	ldi	r24, 0x84	; 132
     256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

	uint16_t elapsed = 0;
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
	while (!(TWCR & (1 << TWINT))) {
     25e:	0f c0       	rjmp	.+30     	; 0x27e <TWI_write+0x2e>
     260:	ef e9       	ldi	r30, 0x9F	; 159
     262:	ff e0       	ldi	r31, 0x0F	; 15
     264:	31 97       	sbiw	r30, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <TWI_write+0x14>
     268:	00 c0       	rjmp	.+0      	; 0x26a <TWI_write+0x1a>
     26a:	00 00       	nop
		_delay_ms(1);
		if (++elapsed > 500) {  // Wait half a second
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	85 3f       	cpi	r24, 0xF5	; 245
     270:	f1 e0       	ldi	r31, 0x01	; 1
     272:	9f 07       	cpc	r25, r31
     274:	20 f0       	brcs	.+8      	; 0x27e <TWI_write+0x2e>
			print("TWI write timeout!");
     276:	8c e1       	ldi	r24, 0x1C	; 28
     278:	92 e0       	ldi	r25, 0x02	; 2
     27a:	34 c4       	rjmp	.+2152   	; 0xae4 <print>
			break;
     27c:	08 95       	ret
void TWI_write(uint8_t data) {
	TWDR = data;
	TWCR = (1 << TWINT) | (1 << TWEN);

	uint16_t elapsed = 0;
	while (!(TWCR & (1 << TWINT))) {
     27e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     282:	22 23       	and	r18, r18
     284:	6c f7       	brge	.-38     	; 0x260 <TWI_write+0x10>
     286:	08 95       	ret

00000288 <send_TWI_data>:
		}
	}
}

// Can be used to send strings from master to slave to control slave behavior
void send_TWI_data(const char* message) {
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	a0 97       	sbiw	r28, 0x20	; 32
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	7c 01       	movw	r14, r24
	print("TWI: Starting transmission...");
     2ac:	8f e2       	ldi	r24, 0x2F	; 47
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	19 d4       	rcall	.+2098   	; 0xae4 <print>

	// Send start condition
	TWI_start();
     2b2:	b0 df       	rcall	.-160    	; 0x214 <TWI_start>
     2b4:	8d e4       	ldi	r24, 0x4D	; 77
	print("TWI: START condition sent");
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	15 d4       	rcall	.+2090   	; 0xae4 <print>
     2ba:	87 e6       	ldi	r24, 0x67	; 103

	// Send slave address with write bit (0)
	print("TWI: Sending slave address...");
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	12 d4       	rcall	.+2084   	; 0xae4 <print>
     2c0:	8e ea       	ldi	r24, 0xAE	; 174
	TWI_write(SLAVE_ADDRESS << 1);
     2c2:	c6 df       	rcall	.-116    	; 0x250 <TWI_write>
     2c4:	85 e8       	ldi	r24, 0x85	; 133
	print("TWI: Slave address sent");
     2c6:	92 e0       	ldi	r25, 0x02	; 2
     2c8:	0d d4       	rcall	.+2074   	; 0xae4 <print>
     2ca:	d1 2c       	mov	r13, r1
     2cc:	21 c0       	rjmp	.+66     	; 0x310 <send_TWI_data+0x88>

	// Send data byte by byte from the provided message
	char debug_buf[32];
	for (uint8_t i = 0; i < strlen(message); i++) {
     2ce:	87 01       	movw	r16, r14
     2d0:	08 0f       	add	r16, r24
		snprintf(debug_buf, sizeof(debug_buf), "TWI: Sending byte %d: %c", i, message[i]);
     2d2:	19 1f       	adc	r17, r25
     2d4:	f8 01       	movw	r30, r16
     2d6:	80 81       	ld	r24, Z
     2d8:	1f 92       	push	r1
     2da:	8f 93       	push	r24
     2dc:	1f 92       	push	r1
     2de:	df 92       	push	r13
     2e0:	8d e9       	ldi	r24, 0x9D	; 157
     2e2:	92 e0       	ldi	r25, 0x02	; 2
     2e4:	9f 93       	push	r25
     2e6:	8f 93       	push	r24
     2e8:	1f 92       	push	r1
     2ea:	80 e2       	ldi	r24, 0x20	; 32
     2ec:	8f 93       	push	r24
     2ee:	ce 01       	movw	r24, r28
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	5c 01       	movw	r10, r24
     2f4:	9f 93       	push	r25
     2f6:	8f 93       	push	r24
     2f8:	6a d4       	rcall	.+2260   	; 0xbce <snprintf>
		print(debug_buf);
     2fa:	c5 01       	movw	r24, r10
     2fc:	f3 d3       	rcall	.+2022   	; 0xae4 <print>
     2fe:	f8 01       	movw	r30, r16
		TWI_write(message[i]);
     300:	80 81       	ld	r24, Z
     302:	a6 df       	rcall	.-180    	; 0x250 <TWI_write>
     304:	d3 94       	inc	r13
     306:	0f b6       	in	r0, 0x3f	; 63
	TWI_write(SLAVE_ADDRESS << 1);
	print("TWI: Slave address sent");

	// Send data byte by byte from the provided message
	char debug_buf[32];
	for (uint8_t i = 0; i < strlen(message); i++) {
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	8d 2d       	mov	r24, r13
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	f7 01       	movw	r30, r14
     316:	01 90       	ld	r0, Z+
     318:	00 20       	and	r0, r0
     31a:	e9 f7       	brne	.-6      	; 0x316 <send_TWI_data+0x8e>
     31c:	31 97       	sbiw	r30, 0x01	; 1
     31e:	ee 19       	sub	r30, r14
     320:	ff 09       	sbc	r31, r15
     322:	8e 17       	cp	r24, r30
     324:	9f 07       	cpc	r25, r31
		snprintf(debug_buf, sizeof(debug_buf), "TWI: Sending byte %d: %c", i, message[i]);
		print(debug_buf);
		TWI_write(message[i]);
	}

	print("TWI: All bytes sent");
     326:	98 f2       	brcs	.-90     	; 0x2ce <send_TWI_data+0x46>
     328:	86 eb       	ldi	r24, 0xB6	; 182
     32a:	92 e0       	ldi	r25, 0x02	; 2

	// Send stop condition
	TWI_stop();
     32c:	db d3       	rcall	.+1974   	; 0xae4 <print>
     32e:	8c df       	rcall	.-232    	; 0x248 <TWI_stop>
	print("TWI: STOP condition sent");
     330:	8a ec       	ldi	r24, 0xCA	; 202
     332:	92 e0       	ldi	r25, 0x02	; 2
     334:	d7 d3       	rcall	.+1966   	; 0xae4 <print>
     336:	83 ee       	ldi	r24, 0xE3	; 227

	print("TWI: Transmission complete.");
     338:	92 e0       	ldi	r25, 0x02	; 2
     33a:	d4 d3       	rcall	.+1960   	; 0xae4 <print>
     33c:	a0 96       	adiw	r28, 0x20	; 32
     33e:	0f b6       	in	r0, 0x3f	; 63
}
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	bf 90       	pop	r11
     358:	af 90       	pop	r10
     35a:	08 95       	ret

0000035c <elevator_reset_ui>:
     35c:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <__data_end>
	current_state = IDLE;
}

void elevator_reset_ui(void) {
	current_state = IDLE;
	lcd_clrscr();
     360:	b5 d2       	rcall	.+1386   	; 0x8cc <lcd_clrscr>
	lcd_puts("Choose floor:");
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	c7 d2       	rcall	.+1422   	; 0x8f6 <lcd_puts>
	lcd_gotoxy(0, 1);
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	a7 d2       	rcall	.+1358   	; 0x8bc <lcd_gotoxy>
	print("Choose floor");
     36e:	8d e0       	ldi	r24, 0x0D	; 13
     370:	93 e0       	ldi	r25, 0x03	; 3
     372:	b8 c3       	rjmp	.+1904   	; 0xae4 <print>
     374:	08 95       	ret

00000376 <close_door>:
     376:	83 e0       	ldi	r24, 0x03	; 3

	close_door();
}

void close_door(void) {
	current_state = DOOR_CLOSING;
     378:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <__data_end>
	send_TWI_data("close_door");
     37c:	8a e1       	ldi	r24, 0x1A	; 26
     37e:	93 e0       	ldi	r25, 0x03	; 3
     380:	83 df       	rcall	.-250    	; 0x288 <send_TWI_data>

	lcd_clrscr();
     382:	a4 d2       	rcall	.+1352   	; 0x8cc <lcd_clrscr>
     384:	85 e2       	ldi	r24, 0x25	; 37
	lcd_puts("Door closed");
     386:	93 e0       	ldi	r25, 0x03	; 3
     388:	b6 d2       	rcall	.+1388   	; 0x8f6 <lcd_puts>
     38a:	85 e2       	ldi	r24, 0x25	; 37
	print("Door closed");
     38c:	93 e0       	ldi	r25, 0x03	; 3
     38e:	aa d3       	rcall	.+1876   	; 0xae4 <print>
     390:	2f ef       	ldi	r18, 0xFF	; 255
     392:	83 ed       	ldi	r24, 0xD3	; 211
     394:	90 e3       	ldi	r25, 0x30	; 48
     396:	21 50       	subi	r18, 0x01	; 1
     398:	80 40       	sbci	r24, 0x00	; 0
     39a:	90 40       	sbci	r25, 0x00	; 0
     39c:	e1 f7       	brne	.-8      	; 0x396 <close_door+0x20>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <close_door+0x2a>
     3a0:	00 00       	nop
     3a2:	dc cf       	rjmp	.-72     	; 0x35c <elevator_reset_ui>

	_delay_ms(1000);
	elevator_reset_ui();
     3a4:	08 95       	ret

000003a6 <open_door>:
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <__data_end>
	open_door();
}

void open_door(void) {
	current_state = DOOR_OPENING;
	send_TWI_data("open_door");
     3ac:	81 e3       	ldi	r24, 0x31	; 49
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	6b df       	rcall	.-298    	; 0x288 <send_TWI_data>

	lcd_clrscr();
     3b2:	8c d2       	rcall	.+1304   	; 0x8cc <lcd_clrscr>
     3b4:	8b e3       	ldi	r24, 0x3B	; 59
	lcd_puts("Door opened");
     3b6:	93 e0       	ldi	r25, 0x03	; 3
     3b8:	9e d2       	rcall	.+1340   	; 0x8f6 <lcd_puts>
     3ba:	8b e3       	ldi	r24, 0x3B	; 59
	print("Door opened");
     3bc:	93 e0       	ldi	r25, 0x03	; 3
     3be:	92 d3       	rcall	.+1828   	; 0xae4 <print>
     3c0:	2f ef       	ldi	r18, 0xFF	; 255
     3c2:	83 e2       	ldi	r24, 0x23	; 35
     3c4:	94 ef       	ldi	r25, 0xF4	; 244
     3c6:	21 50       	subi	r18, 0x01	; 1
     3c8:	80 40       	sbci	r24, 0x00	; 0
     3ca:	90 40       	sbci	r25, 0x00	; 0
     3cc:	e1 f7       	brne	.-8      	; 0x3c6 <open_door+0x20>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <open_door+0x2a>
     3d0:	00 00       	nop
     3d2:	d1 cf       	rjmp	.-94     	; 0x376 <close_door>

	_delay_ms(5000);  // Door open duration

	close_door();
     3d4:	08 95       	ret

000003d6 <emergency_stop>:
     3d6:	84 e0       	ldi	r24, 0x04	; 4
     3d8:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <__data_end>
}

// This is called via ISR when button is pressed
void emergency_stop(void) {
	current_state = EMERGENCY;
	send_TWI_data("emergency");
     3dc:	87 e4       	ldi	r24, 0x47	; 71
     3de:	93 e0       	ldi	r25, 0x03	; 3
     3e0:	53 df       	rcall	.-346    	; 0x288 <send_TWI_data>

	lcd_clrscr();
     3e2:	74 d2       	rcall	.+1256   	; 0x8cc <lcd_clrscr>
     3e4:	80 eb       	ldi	r24, 0xB0	; 176
	lcd_puts("EMERGENCY");
     3e6:	93 e0       	ldi	r25, 0x03	; 3
     3e8:	86 d2       	rcall	.+1292   	; 0x8f6 <lcd_puts>
     3ea:	80 eb       	ldi	r24, 0xB0	; 176
	print("EMERGENCY");
     3ec:	93 e0       	ldi	r25, 0x03	; 3
     3ee:	7a d3       	rcall	.+1780   	; 0xae4 <print>

	open_door();
     3f0:	da df       	rcall	.-76     	; 0x3a6 <open_door>
     3f2:	c1 cf       	rjmp	.-126    	; 0x376 <close_door>
	close_door();
     3f4:	08 95       	ret

000003f6 <handle_fault>:
     3f6:	85 e0       	ldi	r24, 0x05	; 5
     3f8:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <__data_end>
}

void handle_fault(void) {
	current_state = FAULT;
	send_TWI_data("fault");
     3fc:	81 e5       	ldi	r24, 0x51	; 81
     3fe:	93 e0       	ldi	r25, 0x03	; 3
     400:	43 df       	rcall	.-378    	; 0x288 <send_TWI_data>

	lcd_clrscr();
     402:	64 d2       	rcall	.+1224   	; 0x8cc <lcd_clrscr>
     404:	87 e5       	ldi	r24, 0x57	; 87
	lcd_puts("Fault: Same floor");
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	76 d2       	rcall	.+1260   	; 0x8f6 <lcd_puts>
     40a:	87 e5       	ldi	r24, 0x57	; 87
	print("Fault: Same floor");
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	6a d3       	rcall	.+1748   	; 0xae4 <print>
     410:	2f ef       	ldi	r18, 0xFF	; 255
     412:	87 ea       	ldi	r24, 0xA7	; 167
     414:	91 e6       	ldi	r25, 0x61	; 97
     416:	21 50       	subi	r18, 0x01	; 1
     418:	80 40       	sbci	r24, 0x00	; 0
     41a:	90 40       	sbci	r25, 0x00	; 0
     41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     420:	00 00       	nop
     422:	9c cf       	rjmp	.-200    	; 0x35c <elevator_reset_ui>

	_delay_ms(2000);
	elevator_reset_ui();
     424:	08 95       	ret

00000426 <display_floor>:
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
}

void display_floor(uint8_t floor) {
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	e6 97       	sbiw	r28, 0x36	; 54
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	18 2f       	mov	r17, r24
	lcd_clrscr();
     440:	45 d2       	rcall	.+1162   	; 0x8cc <lcd_clrscr>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     442:	4a e0       	ldi	r20, 0x0A	; 10
     444:	be 01       	movw	r22, r28
     446:	6f 5f       	subi	r22, 0xFF	; 255
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	81 2f       	mov	r24, r17
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	81 d3       	rcall	.+1794   	; 0xb52 <__itoa_ncheck>

	char floor_str[4];
	itoa(floor, floor_str, 10);

	lcd_gotoxy(0, 0);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	33 d2       	rcall	.+1126   	; 0x8bc <lcd_gotoxy>
	lcd_puts("Floor: ");
     456:	89 e6       	ldi	r24, 0x69	; 105
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	4d d2       	rcall	.+1178   	; 0x8f6 <lcd_puts>
	lcd_puts(floor_str);
     45c:	ce 01       	movw	r24, r28
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	4a d2       	rcall	.+1172   	; 0x8f6 <lcd_puts>

	lcd_gotoxy(0, 1);
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	2a d2       	rcall	.+1108   	; 0x8bc <lcd_gotoxy>
     468:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <__data_end>
	const char* state_str = "";

	switch (current_state) {
     46c:	82 30       	cpi	r24, 0x02	; 2
     46e:	c1 f0       	breq	.+48     	; 0x4a0 <display_floor+0x7a>
     470:	28 f4       	brcc	.+10     	; 0x47c <display_floor+0x56>
     472:	88 23       	and	r24, r24
     474:	49 f0       	breq	.+18     	; 0x488 <display_floor+0x62>
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	69 f0       	breq	.+26     	; 0x494 <display_floor+0x6e>
     47a:	2a c0       	rjmp	.+84     	; 0x4d0 <display_floor+0xaa>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	e1 f0       	breq	.+56     	; 0x4b8 <display_floor+0x92>
     480:	a8 f0       	brcs	.+42     	; 0x4ac <display_floor+0x86>
     482:	85 30       	cpi	r24, 0x05	; 5
     484:	f9 f0       	breq	.+62     	; 0x4c4 <display_floor+0x9e>
     486:	24 c0       	rjmp	.+72     	; 0x4d0 <display_floor+0xaa>
		case IDLE:
		state_str = "IDLE";
		lcd_puts("State: IDLE");
     488:	81 e7       	ldi	r24, 0x71	; 113
     48a:	93 e0       	ldi	r25, 0x03	; 3
     48c:	34 d2       	rcall	.+1128   	; 0x8f6 <lcd_puts>
	lcd_gotoxy(0, 1);
	const char* state_str = "";

	switch (current_state) {
		case IDLE:
		state_str = "IDLE";
     48e:	88 e7       	ldi	r24, 0x78	; 120
     490:	93 e0       	ldi	r25, 0x03	; 3
		lcd_puts("State: IDLE");
		break;
     492:	20 c0       	rjmp	.+64     	; 0x4d4 <display_floor+0xae>
		case MOVING:
		state_str = "MOVING";
		lcd_puts("State: MOVING");
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	2e d2       	rcall	.+1116   	; 0x8f6 <lcd_puts>
		case IDLE:
		state_str = "IDLE";
		lcd_puts("State: IDLE");
		break;
		case MOVING:
		state_str = "MOVING";
     49a:	84 e8       	ldi	r24, 0x84	; 132
     49c:	93 e0       	ldi	r25, 0x03	; 3
		lcd_puts("State: MOVING");
		break;
     49e:	1a c0       	rjmp	.+52     	; 0x4d4 <display_floor+0xae>
		case DOOR_OPENING:
		state_str = "OPENING";
		lcd_puts("State: OPENING");
     4a0:	8b e8       	ldi	r24, 0x8B	; 139
     4a2:	93 e0       	ldi	r25, 0x03	; 3
     4a4:	28 d2       	rcall	.+1104   	; 0x8f6 <lcd_puts>
		case MOVING:
		state_str = "MOVING";
		lcd_puts("State: MOVING");
		break;
		case DOOR_OPENING:
		state_str = "OPENING";
     4a6:	82 e9       	ldi	r24, 0x92	; 146
     4a8:	93 e0       	ldi	r25, 0x03	; 3
		lcd_puts("State: OPENING");
		break;
		case DOOR_CLOSING:
		state_str = "CLOSING";
		lcd_puts("State: CLOSING");
     4aa:	14 c0       	rjmp	.+40     	; 0x4d4 <display_floor+0xae>
     4ac:	8a e9       	ldi	r24, 0x9A	; 154
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	22 d2       	rcall	.+1092   	; 0x8f6 <lcd_puts>
		case DOOR_OPENING:
		state_str = "OPENING";
		lcd_puts("State: OPENING");
		break;
		case DOOR_CLOSING:
		state_str = "CLOSING";
     4b2:	81 ea       	ldi	r24, 0xA1	; 161
		lcd_puts("State: CLOSING");
		break;
     4b4:	93 e0       	ldi	r25, 0x03	; 3
		case EMERGENCY:
		state_str = "EMERGENCY";
		lcd_puts("State: EMERGENCY");
     4b6:	0e c0       	rjmp	.+28     	; 0x4d4 <display_floor+0xae>
     4b8:	89 ea       	ldi	r24, 0xA9	; 169
     4ba:	93 e0       	ldi	r25, 0x03	; 3
     4bc:	1c d2       	rcall	.+1080   	; 0x8f6 <lcd_puts>
		case DOOR_CLOSING:
		state_str = "CLOSING";
		lcd_puts("State: CLOSING");
		break;
		case EMERGENCY:
		state_str = "EMERGENCY";
     4be:	80 eb       	ldi	r24, 0xB0	; 176
     4c0:	93 e0       	ldi	r25, 0x03	; 3
		lcd_puts("State: EMERGENCY");
		break;
     4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <display_floor+0xae>
		case FAULT:
		state_str = "FAULT";
		lcd_puts("State: FAULT");
     4c4:	8a eb       	ldi	r24, 0xBA	; 186
     4c6:	93 e0       	ldi	r25, 0x03	; 3
     4c8:	16 d2       	rcall	.+1068   	; 0x8f6 <lcd_puts>
     4ca:	81 ec       	ldi	r24, 0xC1	; 193
		case EMERGENCY:
		state_str = "EMERGENCY";
		lcd_puts("State: EMERGENCY");
		break;
		case FAULT:
		state_str = "FAULT";
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <display_floor+0xae>
		lcd_puts("State: FAULT");
		break;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
	lcd_gotoxy(0, 0);
	lcd_puts("Floor: ");
	lcd_puts(floor_str);

	lcd_gotoxy(0, 1);
	const char* state_str = "";
     4d2:	94 e0       	ldi	r25, 0x04	; 4
     4d4:	9f 93       	push	r25
		break;
	}

	// Print debug info over UART
	char debug_msg[50];
	snprintf(debug_msg, sizeof(debug_msg), "Floor: %d | State: %s", floor, state_str);
     4d6:	8f 93       	push	r24
     4d8:	1f 92       	push	r1
     4da:	1f 93       	push	r17
     4dc:	87 ec       	ldi	r24, 0xC7	; 199
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	9f 93       	push	r25
     4e2:	8f 93       	push	r24
     4e4:	1f 92       	push	r1
     4e6:	82 e3       	ldi	r24, 0x32	; 50
     4e8:	8f 93       	push	r24
     4ea:	8e 01       	movw	r16, r28
     4ec:	0b 5f       	subi	r16, 0xFB	; 251
     4ee:	1f 4f       	sbci	r17, 0xFF	; 255
     4f0:	1f 93       	push	r17
     4f2:	0f 93       	push	r16
     4f4:	6c d3       	rcall	.+1752   	; 0xbce <snprintf>
	print(debug_msg);
     4f6:	c8 01       	movw	r24, r16
     4f8:	f5 d2       	rcall	.+1514   	; 0xae4 <print>
     4fa:	0f b6       	in	r0, 0x3f	; 63
}
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	e6 96       	adiw	r28, 0x36	; 54
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	08 95       	ret

0000051a <move_elevator>:
     51a:	cf 93       	push	r28
	lcd_puts("Choose floor:");
	lcd_gotoxy(0, 1);
	print("Choose floor");
}

void move_elevator(uint8_t floor) {
     51c:	c8 2f       	mov	r28, r24
	printf("Current floor: %d\n", current_floor);
     51e:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <current_floor>
     522:	1f 92       	push	r1
     524:	8f 93       	push	r24
     526:	8d ed       	ldi	r24, 0xDD	; 221
     528:	93 e0       	ldi	r25, 0x03	; 3
     52a:	9f 93       	push	r25
     52c:	8f 93       	push	r24
     52e:	3c d3       	rcall	.+1656   	; 0xba8 <printf>
	printf("Target floor: %d\n", floor);
     530:	1f 92       	push	r1
     532:	cf 93       	push	r28
     534:	80 ef       	ldi	r24, 0xF0	; 240
     536:	93 e0       	ldi	r25, 0x03	; 3
     538:	9f 93       	push	r25
     53a:	8f 93       	push	r24
     53c:	35 d3       	rcall	.+1642   	; 0xba8 <printf>
	
	send_TWI_data("moving");
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	94 e0       	ldi	r25, 0x04	; 4
     542:	a2 de       	rcall	.-700    	; 0x288 <send_TWI_data>

	if (floor == current_floor) {
     544:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <current_floor>
     548:	2d b7       	in	r18, 0x3d	; 61
     54a:	3e b7       	in	r19, 0x3e	; 62
     54c:	28 5f       	subi	r18, 0xF8	; 248
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	3e bf       	out	0x3e, r19	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	2d bf       	out	0x3d, r18	; 61
     55a:	c8 13       	cpse	r28, r24
		handle_fault();
     55c:	02 c0       	rjmp	.+4      	; 0x562 <move_elevator+0x48>
     55e:	4b df       	rcall	.-362    	; 0x3f6 <handle_fault>
		return;
	}

	current_state = MOVING;
     560:	1c c0       	rjmp	.+56     	; 0x59a <move_elevator+0x80>
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <__data_end>
	display_floor(current_floor);
     568:	5e df       	rcall	.-324    	; 0x426 <display_floor>

	while (current_floor != floor) {
     56a:	12 c0       	rjmp	.+36     	; 0x590 <move_elevator+0x76>
		current_floor += (floor > current_floor) ? 1 : -1;
     56c:	8c 17       	cp	r24, r28
     56e:	10 f4       	brcc	.+4      	; 0x574 <move_elevator+0x5a>
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	01 c0       	rjmp	.+2      	; 0x576 <move_elevator+0x5c>
     574:	9f ef       	ldi	r25, 0xFF	; 255
     576:	89 0f       	add	r24, r25
     578:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <current_floor>
		display_floor(current_floor);
     57c:	54 df       	rcall	.-344    	; 0x426 <display_floor>
     57e:	3f ef       	ldi	r19, 0xFF	; 255
     580:	89 e6       	ldi	r24, 0x69	; 105
     582:	98 e1       	ldi	r25, 0x18	; 24
     584:	31 50       	subi	r19, 0x01	; 1
     586:	80 40       	sbci	r24, 0x00	; 0
     588:	90 40       	sbci	r25, 0x00	; 0
     58a:	e1 f7       	brne	.-8      	; 0x584 <move_elevator+0x6a>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <move_elevator+0x74>
	}

	current_state = MOVING;
	display_floor(current_floor);

	while (current_floor != floor) {
     58e:	00 00       	nop
     590:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <current_floor>
     594:	c8 13       	cpse	r28, r24
		current_floor += (floor > current_floor) ? 1 : -1;
		display_floor(current_floor);
		_delay_ms(TIME_PER_FLOOR);
	}

	open_door();
     596:	ea cf       	rjmp	.-44     	; 0x56c <move_elevator+0x52>
     598:	06 df       	rcall	.-500    	; 0x3a6 <open_door>
}
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <isr_init>:
 * allowing the code to temporarily pause its current execution and jump to a specific task when an interrupt occurs.
 * This eliminates delays and ensures faster system response.
 */

void isr_init(void) {
	sei(); // Enable global interrupts
     59e:	78 94       	sei
     5a0:	08 95       	ret

000005a2 <enable_external_interrupt>:
}

// Enable external interrupt on INT1 (PD3)
void enable_external_interrupt(uint8_t pin) {
     5a2:	cf 93       	push	r28
     5a4:	c8 2f       	mov	r28, r24
	print("ISR enabled");
     5a6:	89 e0       	ldi	r24, 0x09	; 9
     5a8:	94 e0       	ldi	r25, 0x04	; 4
     5aa:	9c d2       	rcall	.+1336   	; 0xae4 <print>
	if (pin == EMERGENCY_BUTTON_PIN) {
     5ac:	c2 30       	cpi	r28, 0x02	; 2
     5ae:	41 f4       	brne	.+16     	; 0x5c0 <enable_external_interrupt+0x1e>
		EICRA |= (1 << ISC01);  // Trigger on falling edge
     5b0:	e9 e6       	ldi	r30, 0x69	; 105
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	82 60       	ori	r24, 0x02	; 2
     5b8:	80 83       	st	Z, r24
		EIMSK |= (1 << INT0);   // Enable INT0
     5ba:	8d b3       	in	r24, 0x1d	; 29
     5bc:	81 60       	ori	r24, 0x01	; 1
     5be:	8d bb       	out	0x1d, r24	; 29
	}
}
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <__vector_1>:

// ISR for Emergency Stop Button
ISR(INT0_vect) {
     5c4:	1f 92       	push	r1
     5c6:	0f 92       	push	r0
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	0f 92       	push	r0
     5cc:	11 24       	eor	r1, r1
     5ce:	0b b6       	in	r0, 0x3b	; 59
     5d0:	0f 92       	push	r0
     5d2:	2f 93       	push	r18
     5d4:	3f 93       	push	r19
     5d6:	4f 93       	push	r20
     5d8:	5f 93       	push	r21
     5da:	6f 93       	push	r22
     5dc:	7f 93       	push	r23
     5de:	8f 93       	push	r24
     5e0:	9f 93       	push	r25
     5e2:	af 93       	push	r26
     5e4:	bf 93       	push	r27
     5e6:	ef 93       	push	r30
     5e8:	ff 93       	push	r31
	emergency_stop();
     5ea:	f5 de       	rcall	.-534    	; 0x3d6 <emergency_stop>
}
     5ec:	ff 91       	pop	r31
     5ee:	ef 91       	pop	r30
     5f0:	bf 91       	pop	r27
     5f2:	af 91       	pop	r26
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	7f 91       	pop	r23
     5fa:	6f 91       	pop	r22
     5fc:	5f 91       	pop	r21
     5fe:	4f 91       	pop	r20
     600:	3f 91       	pop	r19
     602:	2f 91       	pop	r18
     604:	0f 90       	pop	r0
     606:	0b be       	out	0x3b, r0	; 59
     608:	0f 90       	pop	r0
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	0f 90       	pop	r0
     60e:	1f 90       	pop	r1
     610:	18 95       	reti

00000612 <keypad_ScanKey>:
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     612:	20 e0       	ldi	r18, 0x00	; 0
        4.Return the ScanCode(Combination of ROW & COL) for decoding the key.
 ***************************************************************************************************/
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;
     614:	9f ee       	ldi	r25, 0xEF	; 239

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     616:	10 c0       	rjmp	.+32     	; 0x638 <keypad_ScanKey+0x26>
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
     618:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     61c:	e9 ef       	ldi	r30, 0xF9	; 249
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <keypad_ScanKey+0xe>
     624:	00 c0       	rjmp	.+0      	; 0x626 <keypad_ScanKey+0x14>
     626:	00 00       	nop
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
     628:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     62c:	8f 70       	andi	r24, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
     62e:	8f 30       	cpi	r24, 0x0F	; 15
     630:	29 f4       	brne	.+10     	; 0x63c <keypad_ScanKey+0x2a>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
     632:	99 0f       	add	r25, r25
     634:	9f 5f       	subi	r25, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     636:	2f 5f       	subi	r18, 0xFF	; 255
     638:	24 30       	cpi	r18, 0x04	; 4
     63a:	70 f3       	brcs	.-36     	; 0x618 <keypad_ScanKey+0x6>
		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
	}
	var_keyPress_u8 = var_keyPress_u8 + (var_keyScanCode_u8 & 0xf0); // Return the row and COL status to decode the key
     63c:	90 7f       	andi	r25, 0xF0	; 240
	return(var_keyPress_u8);
}
     63e:	89 0f       	add	r24, r25
     640:	08 95       	ret

00000642 <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
     642:	80 ef       	ldi	r24, 0xF0	; 240
     644:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
     648:	08 95       	ret

0000064a <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
     64a:	8f e0       	ldi	r24, 0x0F	; 15
     64c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
     650:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     654:	8f 70       	andi	r24, 0x0F	; 15
		}while(key!=0x0F);
     656:	8f 30       	cpi	r24, 0x0F	; 15
     658:	c1 f7       	brne	.-16     	; 0x64a <KEYPAD_WaitForKeyRelease>
     65a:	89 ef       	ldi	r24, 0xF9	; 249
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <KEYPAD_WaitForKeyRelease+0x14>
     662:	00 c0       	rjmp	.+0      	; 0x664 <KEYPAD_WaitForKeyRelease+0x1a>
     664:	00 00       	nop

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
     666:	8f e0       	ldi	r24, 0x0F	; 15
     668:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
     66c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     670:	8f 70       	andi	r24, 0x0F	; 15
	}while(key!=0x0F);   // Wait till the Key is released,
     672:	8f 30       	cpi	r24, 0x0F	; 15
     674:	51 f7       	brne	.-44     	; 0x64a <KEYPAD_WaitForKeyRelease>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
     676:	08 95       	ret

00000678 <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
     678:	8f e0       	ldi	r24, 0x0F	; 15
     67a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
     67e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     682:	8f 70       	andi	r24, 0x0F	; 15
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
     684:	8f 30       	cpi	r24, 0x0F	; 15
     686:	c1 f3       	breq	.-16     	; 0x678 <KEYPAD_WaitForKeyPress>
     688:	89 ef       	ldi	r24, 0xF9	; 249
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <KEYPAD_WaitForKeyPress+0x14>
     690:	00 c0       	rjmp	.+0      	; 0x692 <KEYPAD_WaitForKeyPress+0x1a>
     692:	00 00       	nop
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
     694:	8f e0       	ldi	r24, 0x0F	; 15
     696:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
     69a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     69e:	8f 70       	andi	r24, 0x0F	; 15

	}while(var_keyPress_u8==0x0F);
     6a0:	8f 30       	cpi	r24, 0x0F	; 15
     6a2:	51 f3       	breq	.-44     	; 0x678 <KEYPAD_WaitForKeyPress>
}
     6a4:	08 95       	ret

000006a6 <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
     6a6:	d1 df       	rcall	.-94     	; 0x64a <KEYPAD_WaitForKeyRelease>
     6a8:	89 ef       	ldi	r24, 0xF9	; 249
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <KEYPAD_GetKey+0x6>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <KEYPAD_GetKey+0xc>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
     6b2:	00 00       	nop
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
     6b4:	e1 df       	rcall	.-62     	; 0x678 <KEYPAD_WaitForKeyPress>
     6b6:	ad df       	rcall	.-166    	; 0x612 <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	fc 01       	movw	r30, r24
     6bc:	e7 57       	subi	r30, 0x77	; 119
     6be:	f1 09       	sbc	r31, r1
     6c0:	e8 37       	cpi	r30, 0x78	; 120
     6c2:	f1 05       	cpc	r31, r1
     6c4:	18 f5       	brcc	.+70     	; 0x70c <KEYPAD_GetKey+0x66>
     6c6:	88 27       	eor	r24, r24
     6c8:	ee 58       	subi	r30, 0x8E	; 142
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	8f 4f       	sbci	r24, 0xFF	; 255
     6ce:	1c c2       	rjmp	.+1080   	; 0xb08 <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
     6d0:	8a e2       	ldi	r24, 0x2A	; 42
     6d2:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
     6d4:	84 e3       	ldi	r24, 0x34	; 52
     6d6:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
     6d8:	81 e3       	ldi	r24, 0x31	; 49
     6da:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
     6dc:	80 e3       	ldi	r24, 0x30	; 48
     6de:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
     6e0:	88 e3       	ldi	r24, 0x38	; 56
     6e2:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
     6e4:	85 e3       	ldi	r24, 0x35	; 53
     6e6:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
     6e8:	82 e3       	ldi	r24, 0x32	; 50
     6ea:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
     6ec:	83 e2       	ldi	r24, 0x23	; 35
     6ee:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
     6f0:	89 e3       	ldi	r24, 0x39	; 57
     6f2:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
     6f4:	86 e3       	ldi	r24, 0x36	; 54
     6f6:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
     6f8:	83 e3       	ldi	r24, 0x33	; 51
     6fa:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
     6fc:	84 e4       	ldi	r24, 0x44	; 68
     6fe:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
     700:	83 e4       	ldi	r24, 0x43	; 67
     702:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
     704:	82 e4       	ldi	r24, 0x42	; 66
     706:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
     708:	81 e4       	ldi	r24, 0x41	; 65
     70a:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
     70c:	8a e7       	ldi	r24, 0x7A	; 122
     70e:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
     710:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
     712:	08 95       	ret

00000714 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     714:	85 b1       	in	r24, 0x05	; 5
     716:	80 62       	ori	r24, 0x20	; 32
     718:	85 b9       	out	0x05, r24	; 5
     71a:	00 00       	nop
     71c:	85 b1       	in	r24, 0x05	; 5
     71e:	8f 7d       	andi	r24, 0xDF	; 223
     720:	85 b9       	out	0x05, r24	; 5
     722:	08 95       	ret

00000724 <lcd_write>:
     724:	cf 93       	push	r28
     726:	c8 2f       	mov	r28, r24
     728:	66 23       	and	r22, r22
     72a:	31 f0       	breq	.+12     	; 0x738 <lcd_write+0x14>
     72c:	e2 e0       	ldi	r30, 0x02	; 2
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	80 81       	ld	r24, Z
     732:	80 64       	ori	r24, 0x40	; 64
     734:	80 83       	st	Z, r24
     736:	05 c0       	rjmp	.+10     	; 0x742 <lcd_write+0x1e>
     738:	e2 e0       	ldi	r30, 0x02	; 2
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	80 81       	ld	r24, Z
     73e:	8f 7b       	andi	r24, 0xBF	; 191
     740:	80 83       	st	Z, r24
     742:	85 b1       	in	r24, 0x05	; 5
     744:	8f 7e       	andi	r24, 0xEF	; 239
     746:	85 b9       	out	0x05, r24	; 5
     748:	8d b1       	in	r24, 0x0d	; 13
     74a:	80 62       	ori	r24, 0x20	; 32
     74c:	8d b9       	out	0x0d, r24	; 13
     74e:	83 b3       	in	r24, 0x13	; 19
     750:	80 62       	ori	r24, 0x20	; 32
     752:	83 bb       	out	0x13, r24	; 19
     754:	8d b1       	in	r24, 0x0d	; 13
     756:	88 60       	ori	r24, 0x08	; 8
     758:	8d b9       	out	0x0d, r24	; 13
     75a:	e1 e0       	ldi	r30, 0x01	; 1
     75c:	f1 e0       	ldi	r31, 0x01	; 1
     75e:	80 81       	ld	r24, Z
     760:	88 60       	ori	r24, 0x08	; 8
     762:	80 83       	st	Z, r24
     764:	e2 e0       	ldi	r30, 0x02	; 2
     766:	f1 e0       	ldi	r31, 0x01	; 1
     768:	80 81       	ld	r24, Z
     76a:	87 7f       	andi	r24, 0xF7	; 247
     76c:	80 83       	st	Z, r24
     76e:	8e b1       	in	r24, 0x0e	; 14
     770:	87 7f       	andi	r24, 0xF7	; 247
     772:	8e b9       	out	0x0e, r24	; 14
     774:	84 b3       	in	r24, 0x14	; 20
     776:	8f 7d       	andi	r24, 0xDF	; 223
     778:	84 bb       	out	0x14, r24	; 20
     77a:	8e b1       	in	r24, 0x0e	; 14
     77c:	8f 7d       	andi	r24, 0xDF	; 223
     77e:	8e b9       	out	0x0e, r24	; 14
     780:	cc 23       	and	r28, r28
     782:	1c f4       	brge	.+6      	; 0x78a <lcd_write+0x66>
     784:	80 81       	ld	r24, Z
     786:	88 60       	ori	r24, 0x08	; 8
     788:	80 83       	st	Z, r24
     78a:	c6 ff       	sbrs	r28, 6
     78c:	03 c0       	rjmp	.+6      	; 0x794 <lcd_write+0x70>
     78e:	8e b1       	in	r24, 0x0e	; 14
     790:	88 60       	ori	r24, 0x08	; 8
     792:	8e b9       	out	0x0e, r24	; 14
     794:	c5 ff       	sbrs	r28, 5
     796:	03 c0       	rjmp	.+6      	; 0x79e <lcd_write+0x7a>
     798:	84 b3       	in	r24, 0x14	; 20
     79a:	80 62       	ori	r24, 0x20	; 32
     79c:	84 bb       	out	0x14, r24	; 20
     79e:	c4 ff       	sbrs	r28, 4
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <lcd_write+0x84>
     7a2:	8e b1       	in	r24, 0x0e	; 14
     7a4:	80 62       	ori	r24, 0x20	; 32
     7a6:	8e b9       	out	0x0e, r24	; 14
     7a8:	b5 df       	rcall	.-150    	; 0x714 <toggle_e>
     7aa:	e2 e0       	ldi	r30, 0x02	; 2
     7ac:	f1 e0       	ldi	r31, 0x01	; 1
     7ae:	80 81       	ld	r24, Z
     7b0:	87 7f       	andi	r24, 0xF7	; 247
     7b2:	80 83       	st	Z, r24
     7b4:	8e b1       	in	r24, 0x0e	; 14
     7b6:	87 7f       	andi	r24, 0xF7	; 247
     7b8:	8e b9       	out	0x0e, r24	; 14
     7ba:	84 b3       	in	r24, 0x14	; 20
     7bc:	8f 7d       	andi	r24, 0xDF	; 223
     7be:	84 bb       	out	0x14, r24	; 20
     7c0:	8e b1       	in	r24, 0x0e	; 14
     7c2:	8f 7d       	andi	r24, 0xDF	; 223
     7c4:	8e b9       	out	0x0e, r24	; 14
     7c6:	c3 ff       	sbrs	r28, 3
     7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <lcd_write+0xac>
     7ca:	80 81       	ld	r24, Z
     7cc:	88 60       	ori	r24, 0x08	; 8
     7ce:	80 83       	st	Z, r24
     7d0:	c2 ff       	sbrs	r28, 2
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <lcd_write+0xb6>
     7d4:	8e b1       	in	r24, 0x0e	; 14
     7d6:	88 60       	ori	r24, 0x08	; 8
     7d8:	8e b9       	out	0x0e, r24	; 14
     7da:	c1 ff       	sbrs	r28, 1
     7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <lcd_write+0xc0>
     7de:	84 b3       	in	r24, 0x14	; 20
     7e0:	80 62       	ori	r24, 0x20	; 32
     7e2:	84 bb       	out	0x14, r24	; 20
     7e4:	c0 ff       	sbrs	r28, 0
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <lcd_write+0xca>
     7e8:	8e b1       	in	r24, 0x0e	; 14
     7ea:	80 62       	ori	r24, 0x20	; 32
     7ec:	8e b9       	out	0x0e, r24	; 14
     7ee:	92 df       	rcall	.-220    	; 0x714 <toggle_e>
     7f0:	8e b1       	in	r24, 0x0e	; 14
     7f2:	80 62       	ori	r24, 0x20	; 32
     7f4:	8e b9       	out	0x0e, r24	; 14
     7f6:	84 b3       	in	r24, 0x14	; 20
     7f8:	80 62       	ori	r24, 0x20	; 32
     7fa:	84 bb       	out	0x14, r24	; 20
     7fc:	8e b1       	in	r24, 0x0e	; 14
     7fe:	88 60       	ori	r24, 0x08	; 8
     800:	8e b9       	out	0x0e, r24	; 14
     802:	e2 e0       	ldi	r30, 0x02	; 2
     804:	f1 e0       	ldi	r31, 0x01	; 1
     806:	80 81       	ld	r24, Z
     808:	88 60       	ori	r24, 0x08	; 8
     80a:	80 83       	st	Z, r24
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <lcd_read>:
     810:	88 23       	and	r24, r24
     812:	31 f0       	breq	.+12     	; 0x820 <lcd_read+0x10>
     814:	e2 e0       	ldi	r30, 0x02	; 2
     816:	f1 e0       	ldi	r31, 0x01	; 1
     818:	80 81       	ld	r24, Z
     81a:	80 64       	ori	r24, 0x40	; 64
     81c:	80 83       	st	Z, r24
     81e:	05 c0       	rjmp	.+10     	; 0x82a <lcd_read+0x1a>
     820:	e2 e0       	ldi	r30, 0x02	; 2
     822:	f1 e0       	ldi	r31, 0x01	; 1
     824:	80 81       	ld	r24, Z
     826:	8f 7b       	andi	r24, 0xBF	; 191
     828:	80 83       	st	Z, r24
     82a:	85 b1       	in	r24, 0x05	; 5
     82c:	80 61       	ori	r24, 0x10	; 16
     82e:	85 b9       	out	0x05, r24	; 5
     830:	8d b1       	in	r24, 0x0d	; 13
     832:	8f 7d       	andi	r24, 0xDF	; 223
     834:	8d b9       	out	0x0d, r24	; 13
     836:	83 b3       	in	r24, 0x13	; 19
     838:	8f 7d       	andi	r24, 0xDF	; 223
     83a:	83 bb       	out	0x13, r24	; 19
     83c:	8d b1       	in	r24, 0x0d	; 13
     83e:	87 7f       	andi	r24, 0xF7	; 247
     840:	8d b9       	out	0x0d, r24	; 13
     842:	e1 e0       	ldi	r30, 0x01	; 1
     844:	f1 e0       	ldi	r31, 0x01	; 1
     846:	80 81       	ld	r24, Z
     848:	87 7f       	andi	r24, 0xF7	; 247
     84a:	80 83       	st	Z, r24
     84c:	85 b1       	in	r24, 0x05	; 5
     84e:	80 62       	ori	r24, 0x20	; 32
     850:	85 b9       	out	0x05, r24	; 5
     852:	00 00       	nop
     854:	65 99       	sbic	0x0c, 5	; 12
     856:	02 c0       	rjmp	.+4      	; 0x85c <lcd_read+0x4c>
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	01 c0       	rjmp	.+2      	; 0x85e <lcd_read+0x4e>
     85c:	80 e1       	ldi	r24, 0x10	; 16
     85e:	95 99       	sbic	0x12, 5	; 18
     860:	80 62       	ori	r24, 0x20	; 32
     862:	63 99       	sbic	0x0c, 3	; 12
     864:	80 64       	ori	r24, 0x40	; 64
     866:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     86a:	93 fd       	sbrc	r25, 3
     86c:	80 68       	ori	r24, 0x80	; 128
     86e:	95 b1       	in	r25, 0x05	; 5
     870:	9f 7d       	andi	r25, 0xDF	; 223
     872:	95 b9       	out	0x05, r25	; 5
     874:	00 00       	nop
     876:	95 b1       	in	r25, 0x05	; 5
     878:	90 62       	ori	r25, 0x20	; 32
     87a:	95 b9       	out	0x05, r25	; 5
     87c:	00 00       	nop
     87e:	65 99       	sbic	0x0c, 5	; 12
     880:	81 60       	ori	r24, 0x01	; 1
     882:	95 99       	sbic	0x12, 5	; 18
     884:	82 60       	ori	r24, 0x02	; 2
     886:	63 99       	sbic	0x0c, 3	; 12
     888:	84 60       	ori	r24, 0x04	; 4
     88a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     88e:	93 fd       	sbrc	r25, 3
     890:	88 60       	ori	r24, 0x08	; 8
     892:	95 b1       	in	r25, 0x05	; 5
     894:	9f 7d       	andi	r25, 0xDF	; 223
     896:	95 b9       	out	0x05, r25	; 5
     898:	08 95       	ret

0000089a <lcd_waitbusy>:
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	b9 df       	rcall	.-142    	; 0x810 <lcd_read>
     89e:	88 23       	and	r24, r24
     8a0:	e4 f3       	brlt	.-8      	; 0x89a <lcd_waitbusy>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <lcd_waitbusy+0xa>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <lcd_waitbusy+0xc>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	b3 cf       	rjmp	.-154    	; 0x810 <lcd_read>
     8aa:	08 95       	ret

000008ac <lcd_command>:
     8ac:	cf 93       	push	r28
     8ae:	c8 2f       	mov	r28, r24
     8b0:	f4 df       	rcall	.-24     	; 0x89a <lcd_waitbusy>
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	8c 2f       	mov	r24, r28
     8b6:	36 df       	rcall	.-404    	; 0x724 <lcd_write>
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <lcd_gotoxy>:
     8bc:	61 11       	cpse	r22, r1
     8be:	03 c0       	rjmp	.+6      	; 0x8c6 <lcd_gotoxy+0xa>
     8c0:	80 58       	subi	r24, 0x80	; 128
     8c2:	f4 cf       	rjmp	.-24     	; 0x8ac <lcd_command>
     8c4:	08 95       	ret
     8c6:	80 54       	subi	r24, 0x40	; 64
     8c8:	f1 cf       	rjmp	.-30     	; 0x8ac <lcd_command>
     8ca:	08 95       	ret

000008cc <lcd_clrscr>:
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	ee cf       	rjmp	.-36     	; 0x8ac <lcd_command>
     8d0:	08 95       	ret

000008d2 <lcd_putc>:
     8d2:	cf 93       	push	r28
     8d4:	c8 2f       	mov	r28, r24
     8d6:	e1 df       	rcall	.-62     	; 0x89a <lcd_waitbusy>
     8d8:	ca 30       	cpi	r28, 0x0A	; 10
     8da:	41 f4       	brne	.+16     	; 0x8ec <lcd_putc+0x1a>
     8dc:	80 34       	cpi	r24, 0x40	; 64
     8de:	10 f4       	brcc	.+4      	; 0x8e4 <lcd_putc+0x12>
     8e0:	80 e4       	ldi	r24, 0x40	; 64
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <lcd_putc+0x14>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	80 58       	subi	r24, 0x80	; 128
     8e8:	e1 df       	rcall	.-62     	; 0x8ac <lcd_command>
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <lcd_putc+0x20>
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	8c 2f       	mov	r24, r28
     8f0:	19 df       	rcall	.-462    	; 0x724 <lcd_write>
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <lcd_puts>:
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	fc 01       	movw	r30, r24
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <lcd_puts+0xc>
     8fe:	e9 df       	rcall	.-46     	; 0x8d2 <lcd_putc>
     900:	fe 01       	movw	r30, r28
     902:	ef 01       	movw	r28, r30
     904:	21 96       	adiw	r28, 0x01	; 1
     906:	80 81       	ld	r24, Z
     908:	81 11       	cpse	r24, r1
     90a:	f9 cf       	rjmp	.-14     	; 0x8fe <lcd_puts+0x8>
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     912:	cf 93       	push	r28
     914:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     916:	e1 e0       	ldi	r30, 0x01	; 1
     918:	f1 e0       	ldi	r31, 0x01	; 1
     91a:	80 81       	ld	r24, Z
     91c:	80 64       	ori	r24, 0x40	; 64
     91e:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     920:	84 b1       	in	r24, 0x04	; 4
     922:	80 61       	ori	r24, 0x10	; 16
     924:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     926:	84 b1       	in	r24, 0x04	; 4
     928:	80 62       	ori	r24, 0x20	; 32
     92a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     92c:	8d b1       	in	r24, 0x0d	; 13
     92e:	80 62       	ori	r24, 0x20	; 32
     930:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     932:	83 b3       	in	r24, 0x13	; 19
     934:	80 62       	ori	r24, 0x20	; 32
     936:	83 bb       	out	0x13, r24	; 19
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     938:	8d b1       	in	r24, 0x0d	; 13
     93a:	88 60       	ori	r24, 0x08	; 8
     93c:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     93e:	80 81       	ld	r24, Z
     940:	88 60       	ori	r24, 0x08	; 8
     942:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     944:	8f e9       	ldi	r24, 0x9F	; 159
     946:	9f e0       	ldi	r25, 0x0F	; 15
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	f1 f7       	brne	.-4      	; 0x948 <lcd_init+0x36>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <lcd_init+0x3c>
     94e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     950:	84 b3       	in	r24, 0x14	; 20
     952:	80 62       	ori	r24, 0x20	; 32
     954:	84 bb       	out	0x14, r24	; 20
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     956:	8e b1       	in	r24, 0x0e	; 14
     958:	80 62       	ori	r24, 0x20	; 32
     95a:	8e b9       	out	0x0e, r24	; 14
    lcd_e_toggle();
     95c:	db de       	rcall	.-586    	; 0x714 <toggle_e>
     95e:	81 ee       	ldi	r24, 0xE1	; 225
     960:	94 e0       	ldi	r25, 0x04	; 4
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <lcd_init+0x50>
     966:	00 c0       	rjmp	.+0      	; 0x968 <lcd_init+0x56>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     968:	00 00       	nop
     96a:	d4 de       	rcall	.-600    	; 0x714 <toggle_e>
     96c:	95 e1       	ldi	r25, 0x15	; 21
     96e:	9a 95       	dec	r25
     970:	f1 f7       	brne	.-4      	; 0x96e <lcd_init+0x5c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     972:	00 00       	nop
     974:	cf de       	rcall	.-610    	; 0x714 <toggle_e>
     976:	85 e1       	ldi	r24, 0x15	; 21
     978:	8a 95       	dec	r24
     97a:	f1 f7       	brne	.-4      	; 0x978 <lcd_init+0x66>
     97c:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     97e:	8e b1       	in	r24, 0x0e	; 14
     980:	8f 7d       	andi	r24, 0xDF	; 223
    lcd_e_toggle();
     982:	8e b9       	out	0x0e, r24	; 14
     984:	c7 de       	rcall	.-626    	; 0x714 <toggle_e>
     986:	95 e1       	ldi	r25, 0x15	; 21
     988:	9a 95       	dec	r25
     98a:	f1 f7       	brne	.-4      	; 0x988 <lcd_init+0x76>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     98c:	00 00       	nop
     98e:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     990:	8d df       	rcall	.-230    	; 0x8ac <lcd_command>
     992:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
     994:	8b df       	rcall	.-234    	; 0x8ac <lcd_command>
     996:	9a df       	rcall	.-204    	; 0x8cc <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     998:	86 e0       	ldi	r24, 0x06	; 6
     99a:	88 df       	rcall	.-240    	; 0x8ac <lcd_command>
     99c:	8c 2f       	mov	r24, r28
    lcd_command(dispAttr);                  /* display/cursor control       */
     99e:	86 df       	rcall	.-244    	; 0x8ac <lcd_command>
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <main>:
#include "uart_debug/uart_debug.h"

#define MAX_FLOOR 99  // Assuming the maximum floor is 99

// Main function handles inputs and interrups. Elevator logic is in the controller file
int main(void) {
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <main+0x6>
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
	uart_init(103); // UART for debug
     9ae:	87 e6       	ldi	r24, 0x67	; 103
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	7f d0       	rcall	.+254    	; 0xab2 <uart_init>
	lcd_init(LCD_DISP_ON);
     9b4:	8c e0       	ldi	r24, 0x0C	; 12
	lcd_clrscr();
     9b6:	ad df       	rcall	.-166    	; 0x912 <lcd_init>
	KEYPAD_Init();
     9b8:	89 df       	rcall	.-238    	; 0x8cc <lcd_clrscr>
     9ba:	43 de       	rcall	.-890    	; 0x642 <KEYPAD_Init>
	
	elevator_reset_ui();  // Initial UI prompt
     9bc:	cf dc       	rcall	.-1634   	; 0x35c <elevator_reset_ui>
     9be:	19 82       	std	Y+1, r1	; 0x01

	char input_buffer[3] = {0};  // Store up to 2 digits + null terminator
     9c0:	1a 82       	std	Y+2, r1	; 0x02
     9c2:	1b 82       	std	Y+3, r1	; 0x03
     9c4:	8d b1       	in	r24, 0x0d	; 13
	uint8_t buffer_index = 0;
	
	
	// Set pin as input and enable internal pull-up to make ISR emergency system work
	DDRE &= ~(1 << 4);    // Set PE4 as input
     9c6:	8f 7e       	andi	r24, 0xEF	; 239
     9c8:	8d b9       	out	0x0d, r24	; 13
	PORTE |= (1 << 4);    // Enable pull-up resistor on PE4
     9ca:	8e b1       	in	r24, 0x0e	; 14
     9cc:	80 61       	ori	r24, 0x10	; 16

	isr_init();
     9ce:	8e b9       	out	0x0e, r24	; 14
     9d0:	e6 dd       	rcall	.-1076   	; 0x59e <isr_init>
	enable_external_interrupt(EMERGENCY_BUTTON_PIN);
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	e6 dd       	rcall	.-1076   	; 0x5a2 <enable_external_interrupt>
     9d6:	10 e0       	ldi	r17, 0x00	; 0
	KEYPAD_Init();
	
	elevator_reset_ui();  // Initial UI prompt

	char input_buffer[3] = {0};  // Store up to 2 digits + null terminator
	uint8_t buffer_index = 0;
     9d8:	66 de       	rcall	.-820    	; 0x6a6 <KEYPAD_GetKey>

	isr_init();
	enable_external_interrupt(EMERGENCY_BUTTON_PIN);

	while (1) {
		uint8_t key = KEYPAD_GetKey();
     9da:	90 ed       	ldi	r25, 0xD0	; 208
     9dc:	98 0f       	add	r25, r24

		if (key >= '0' && key <= '9' && buffer_index < 2) {
     9de:	9a 30       	cpi	r25, 0x0A	; 10
     9e0:	e8 f4       	brcc	.+58     	; 0xa1c <main+0x78>
     9e2:	12 30       	cpi	r17, 0x02	; 2
     9e4:	d8 f4       	brcc	.+54     	; 0xa1c <main+0x78>
     9e6:	01 e0       	ldi	r16, 0x01	; 1
     9e8:	01 0f       	add	r16, r17
			input_buffer[buffer_index++] = key;
     9ea:	e1 e0       	ldi	r30, 0x01	; 1
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	ec 0f       	add	r30, r28
     9f0:	fd 1f       	adc	r31, r29
     9f2:	e1 0f       	add	r30, r17
     9f4:	f1 1d       	adc	r31, r1
     9f6:	80 83       	st	Z, r24
     9f8:	e1 e0       	ldi	r30, 0x01	; 1
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
			input_buffer[buffer_index] = '\0';  // Null terminate
     9fc:	ec 0f       	add	r30, r28
     9fe:	fd 1f       	adc	r31, r29
     a00:	e0 0f       	add	r30, r16
     a02:	f1 1d       	adc	r31, r1
     a04:	10 82       	st	Z, r1
			lcd_gotoxy(0, 1);  // Bottom line for live input
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	58 df       	rcall	.-336    	; 0x8bc <lcd_gotoxy>
			lcd_puts(input_buffer);
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	72 df       	rcall	.-284    	; 0x8f6 <lcd_puts>
     a12:	ce 01       	movw	r24, r28
			print(input_buffer);
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	66 d0       	rcall	.+204    	; 0xae4 <print>
     a18:	10 2f       	mov	r17, r16
     a1a:	de cf       	rjmp	.-68     	; 0x9d8 <main+0x34>

		} else if (key == '#') {
     a1c:	83 32       	cpi	r24, 0x23	; 35
			if (buffer_index > 0) {
     a1e:	e9 f4       	brne	.+58     	; 0xa5a <main+0xb6>
				uint8_t target_floor = atoi(input_buffer);
     a20:	11 23       	and	r17, r17
     a22:	c1 f0       	breq	.+48     	; 0xa54 <main+0xb0>
     a24:	ce 01       	movw	r24, r28

				if (target_floor <= MAX_FLOOR) {
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	77 d0       	rcall	.+238    	; 0xb18 <atoi>
					move_elevator(target_floor);
     a2a:	84 36       	cpi	r24, 0x64	; 100
     a2c:	10 f4       	brcc	.+4      	; 0xa32 <main+0x8e>
     a2e:	75 dd       	rcall	.-1302   	; 0x51a <move_elevator>
					} else {
					lcd_clrscr();
     a30:	11 c0       	rjmp	.+34     	; 0xa54 <main+0xb0>
     a32:	4c df       	rcall	.-360    	; 0x8cc <lcd_clrscr>
					lcd_puts("Invalid floor");
     a34:	85 e1       	ldi	r24, 0x15	; 21
     a36:	94 e0       	ldi	r25, 0x04	; 4
     a38:	5e df       	rcall	.-324    	; 0x8f6 <lcd_puts>
					print("Invalid floor");
     a3a:	85 e1       	ldi	r24, 0x15	; 21
     a3c:	94 e0       	ldi	r25, 0x04	; 4
     a3e:	52 d0       	rcall	.+164    	; 0xae4 <print>
     a40:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a42:	83 ed       	ldi	r24, 0xD3	; 211
     a44:	90 e3       	ldi	r25, 0x30	; 48
     a46:	21 50       	subi	r18, 0x01	; 1
     a48:	80 40       	sbci	r24, 0x00	; 0
     a4a:	90 40       	sbci	r25, 0x00	; 0
     a4c:	e1 f7       	brne	.-8      	; 0xa46 <main+0xa2>
     a4e:	00 c0       	rjmp	.+0      	; 0xa50 <main+0xac>
					_delay_ms(1000);
					elevator_reset_ui();
     a50:	00 00       	nop
     a52:	84 dc       	rcall	.-1784   	; 0x35c <elevator_reset_ui>
				}
			}

			// Reset input
			buffer_index = 0;
			input_buffer[0] = '\0';
     a54:	19 82       	std	Y+1, r1	; 0x01
					elevator_reset_ui();
				}
			}

			// Reset input
			buffer_index = 0;
     a56:	10 e0       	ldi	r17, 0x00	; 0
			input_buffer[0] = '\0';

		} else if (key == '*') {
     a58:	bf cf       	rjmp	.-130    	; 0x9d8 <main+0x34>
     a5a:	8a 32       	cpi	r24, 0x2A	; 42
			// Clear input
			buffer_index = 0;
			input_buffer[0] = '\0';
     a5c:	61 f4       	brne	.+24     	; 0xa76 <main+0xd2>
			lcd_gotoxy(0, 1);
     a5e:	19 82       	std	Y+1, r1	; 0x01
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	2b df       	rcall	.-426    	; 0x8bc <lcd_gotoxy>
			lcd_puts("              ");  // Clear line
     a66:	83 e2       	ldi	r24, 0x23	; 35
     a68:	94 e0       	ldi	r25, 0x04	; 4
     a6a:	45 df       	rcall	.-374    	; 0x8f6 <lcd_puts>
     a6c:	61 e0       	ldi	r22, 0x01	; 1
			lcd_gotoxy(0, 1);
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	25 df       	rcall	.-438    	; 0x8bc <lcd_gotoxy>
     a72:	10 e0       	ldi	r17, 0x00	; 0
     a74:	b1 cf       	rjmp	.-158    	; 0x9d8 <main+0x34>
			buffer_index = 0;
			input_buffer[0] = '\0';

		} else if (key == '*') {
			// Clear input
			buffer_index = 0;
     a76:	82 e3       	ldi	r24, 0x32	; 50
     a78:	94 e0       	ldi	r25, 0x04	; 4
			input_buffer[0] = '\0';
			lcd_gotoxy(0, 1);
			lcd_puts("              ");  // Clear line
			lcd_gotoxy(0, 1);
		} else { // Reset input
			print("No such floor exists. Floor selection has been reset.");
     a7a:	34 d0       	rcall	.+104    	; 0xae4 <print>
     a7c:	19 82       	std	Y+1, r1	; 0x01
     a7e:	10 e0       	ldi	r17, 0x00	; 0
     a80:	ab cf       	rjmp	.-170    	; 0x9d8 <main+0x34>

00000a82 <uart_putchar>:
	// Redirect std I/O streams to UART
	stdout = &uart_output;
	stdin = &uart_input;
}

int uart_putchar(char c, FILE *stream) {
     a82:	cf 93       	push	r28
     a84:	c8 2f       	mov	r28, r24
	// Convert newline to carriage return + newline
	if (c == '\n') {
     a86:	8a 30       	cpi	r24, 0x0A	; 10
     a88:	11 f4       	brne	.+4      	; 0xa8e <uart_putchar+0xc>
		uart_putchar('\r', stream);
     a8a:	8d e0       	ldi	r24, 0x0D	; 13
     a8c:	fa df       	rcall	.-12     	; 0xa82 <uart_putchar>
	}

	// Wait until buffer is empty
	while (!(UCSR0A & (1 << UDRE0)));
     a8e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     a92:	85 ff       	sbrs	r24, 5
     a94:	fc cf       	rjmp	.-8      	; 0xa8e <uart_putchar+0xc>
	UDR0 = c;
     a96:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	return 0;
}
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <uart_getchar>:

int uart_getchar(FILE *stream) {
	// Wait for incoming data
	while (!(UCSR0A & (1 << RXC0)));
     aa2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     aa6:	88 23       	and	r24, r24
     aa8:	e4 f7       	brge	.-8      	; 0xaa2 <uart_getchar>
	return UDR0;
     aaa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	08 95       	ret

00000ab2 <uart_init>:
FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE uart_input  = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

void uart_init(uint16_t ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     ab2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
     ab6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     aba:	e1 ec       	ldi	r30, 0xC1	; 193
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	88 61       	ori	r24, 0x18	; 24
     ac2:	80 83       	st	Z, r24

	// Set frame format: 8 data bits, 2 stop bits
	UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
     ac4:	e2 ec       	ldi	r30, 0xC2	; 194
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	8e 60       	ori	r24, 0x0E	; 14
     acc:	80 83       	st	Z, r24

	// Redirect std I/O streams to UART
	stdout = &uart_output;
     ace:	ea e6       	ldi	r30, 0x6A	; 106
     ad0:	f4 e0       	ldi	r31, 0x04	; 4
     ad2:	8e e0       	ldi	r24, 0x0E	; 14
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	93 83       	std	Z+3, r25	; 0x03
     ad8:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	91 83       	std	Z+1, r25	; 0x01
     ae0:	80 83       	st	Z, r24
     ae2:	08 95       	ret

00000ae4 <print>:
	// Wait for incoming data
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

void print(const char* msg) {
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ec 01       	movw	r28, r24
	// Print a string over UART, character by character
	while (*msg) {
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <print+0x10>
		uart_putchar(*msg++, &uart_output);
     aec:	21 96       	adiw	r28, 0x01	; 1
     aee:	6e e0       	ldi	r22, 0x0E	; 14
     af0:	72 e0       	ldi	r23, 0x02	; 2
     af2:	c7 df       	rcall	.-114    	; 0xa82 <uart_putchar>
	return UDR0;
}

void print(const char* msg) {
	// Print a string over UART, character by character
	while (*msg) {
     af4:	88 81       	ld	r24, Y
     af6:	81 11       	cpse	r24, r1
     af8:	f9 cf       	rjmp	.-14     	; 0xaec <print+0x8>
		uart_putchar(*msg++, &uart_output);
	}
	uart_putchar('\n', &uart_output);  // Append newline at the end
     afa:	6e e0       	ldi	r22, 0x0E	; 14
     afc:	72 e0       	ldi	r23, 0x02	; 2
     afe:	8a e0       	ldi	r24, 0x0A	; 10
     b00:	c0 df       	rcall	.-128    	; 0xa82 <uart_putchar>
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <__tablejump2__>:
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	88 1f       	adc	r24, r24
     b0e:	8b bf       	out	0x3b, r24	; 59
     b10:	07 90       	elpm	r0, Z+
     b12:	f6 91       	elpm	r31, Z
     b14:	e0 2d       	mov	r30, r0
     b16:	19 94       	eijmp

00000b18 <atoi>:
     b18:	fc 01       	movw	r30, r24
     b1a:	88 27       	eor	r24, r24
     b1c:	99 27       	eor	r25, r25
     b1e:	e8 94       	clt
     b20:	21 91       	ld	r18, Z+
     b22:	20 32       	cpi	r18, 0x20	; 32
     b24:	e9 f3       	breq	.-6      	; 0xb20 <atoi+0x8>
     b26:	29 30       	cpi	r18, 0x09	; 9
     b28:	10 f0       	brcs	.+4      	; 0xb2e <atoi+0x16>
     b2a:	2e 30       	cpi	r18, 0x0E	; 14
     b2c:	c8 f3       	brcs	.-14     	; 0xb20 <atoi+0x8>
     b2e:	2b 32       	cpi	r18, 0x2B	; 43
     b30:	39 f0       	breq	.+14     	; 0xb40 <atoi+0x28>
     b32:	2d 32       	cpi	r18, 0x2D	; 45
     b34:	31 f4       	brne	.+12     	; 0xb42 <atoi+0x2a>
     b36:	68 94       	set
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <atoi+0x28>
     b3a:	15 d0       	rcall	.+42     	; 0xb66 <__mulhi_const_10>
     b3c:	82 0f       	add	r24, r18
     b3e:	91 1d       	adc	r25, r1
     b40:	21 91       	ld	r18, Z+
     b42:	20 53       	subi	r18, 0x30	; 48
     b44:	2a 30       	cpi	r18, 0x0A	; 10
     b46:	c8 f3       	brcs	.-14     	; 0xb3a <atoi+0x22>
     b48:	1e f4       	brtc	.+6      	; 0xb50 <atoi+0x38>
     b4a:	90 95       	com	r25
     b4c:	81 95       	neg	r24
     b4e:	9f 4f       	sbci	r25, 0xFF	; 255
     b50:	08 95       	ret

00000b52 <__itoa_ncheck>:
     b52:	bb 27       	eor	r27, r27
     b54:	4a 30       	cpi	r20, 0x0A	; 10
     b56:	31 f4       	brne	.+12     	; 0xb64 <__itoa_ncheck+0x12>
     b58:	99 23       	and	r25, r25
     b5a:	22 f4       	brpl	.+8      	; 0xb64 <__itoa_ncheck+0x12>
     b5c:	bd e2       	ldi	r27, 0x2D	; 45
     b5e:	90 95       	com	r25
     b60:	81 95       	neg	r24
     b62:	9f 4f       	sbci	r25, 0xFF	; 255
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__utoa_common>

00000b66 <__mulhi_const_10>:
     b66:	7a e0       	ldi	r23, 0x0A	; 10
     b68:	97 9f       	mul	r25, r23
     b6a:	90 2d       	mov	r25, r0
     b6c:	87 9f       	mul	r24, r23
     b6e:	80 2d       	mov	r24, r0
     b70:	91 0d       	add	r25, r1
     b72:	11 24       	eor	r1, r1
     b74:	08 95       	ret

00000b76 <__utoa_ncheck>:
     b76:	bb 27       	eor	r27, r27

00000b78 <__utoa_common>:
     b78:	fb 01       	movw	r30, r22
     b7a:	55 27       	eor	r21, r21
     b7c:	aa 27       	eor	r26, r26
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	aa 1f       	adc	r26, r26
     b84:	a4 17       	cp	r26, r20
     b86:	10 f0       	brcs	.+4      	; 0xb8c <__utoa_common+0x14>
     b88:	a4 1b       	sub	r26, r20
     b8a:	83 95       	inc	r24
     b8c:	50 51       	subi	r21, 0x10	; 16
     b8e:	b9 f7       	brne	.-18     	; 0xb7e <__utoa_common+0x6>
     b90:	a0 5d       	subi	r26, 0xD0	; 208
     b92:	aa 33       	cpi	r26, 0x3A	; 58
     b94:	08 f0       	brcs	.+2      	; 0xb98 <__utoa_common+0x20>
     b96:	a9 5d       	subi	r26, 0xD9	; 217
     b98:	a1 93       	st	Z+, r26
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	79 f7       	brne	.-34     	; 0xb7c <__utoa_common+0x4>
     b9e:	b1 11       	cpse	r27, r1
     ba0:	b1 93       	st	Z+, r27
     ba2:	11 92       	st	Z+, r1
     ba4:	cb 01       	movw	r24, r22
     ba6:	62 c2       	rjmp	.+1220   	; 0x106c <strrev>

00000ba8 <printf>:
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	ae 01       	movw	r20, r28
     bb2:	4a 5f       	subi	r20, 0xFA	; 250
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
     bb6:	fa 01       	movw	r30, r20
     bb8:	61 91       	ld	r22, Z+
     bba:	71 91       	ld	r23, Z+
     bbc:	af 01       	movw	r20, r30
     bbe:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <__iob+0x2>
     bc2:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <__iob+0x3>
     bc6:	3f d0       	rcall	.+126    	; 0xc46 <vfprintf>
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <snprintf>:
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	2e 97       	sbiw	r28, 0x0e	; 14
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	0e 89       	ldd	r16, Y+22	; 0x16
     be8:	1f 89       	ldd	r17, Y+23	; 0x17
     bea:	88 8d       	ldd	r24, Y+24	; 0x18
     bec:	99 8d       	ldd	r25, Y+25	; 0x19
     bee:	26 e0       	ldi	r18, 0x06	; 6
     bf0:	2c 83       	std	Y+4, r18	; 0x04
     bf2:	1a 83       	std	Y+2, r17	; 0x02
     bf4:	09 83       	std	Y+1, r16	; 0x01
     bf6:	97 ff       	sbrs	r25, 7
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <snprintf+0x30>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e8       	ldi	r25, 0x80	; 128
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	ae 01       	movw	r20, r28
     c06:	44 5e       	subi	r20, 0xE4	; 228
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	6a 8d       	ldd	r22, Y+26	; 0x1a
     c0c:	7b 8d       	ldd	r23, Y+27	; 0x1b
     c0e:	ce 01       	movw	r24, r28
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	19 d0       	rcall	.+50     	; 0xc46 <vfprintf>
     c14:	4d 81       	ldd	r20, Y+5	; 0x05
     c16:	5e 81       	ldd	r21, Y+6	; 0x06
     c18:	57 fd       	sbrc	r21, 7
     c1a:	0a c0       	rjmp	.+20     	; 0xc30 <snprintf+0x62>
     c1c:	2f 81       	ldd	r18, Y+7	; 0x07
     c1e:	38 85       	ldd	r19, Y+8	; 0x08
     c20:	42 17       	cp	r20, r18
     c22:	53 07       	cpc	r21, r19
     c24:	0c f4       	brge	.+2      	; 0xc28 <snprintf+0x5a>
     c26:	9a 01       	movw	r18, r20
     c28:	f8 01       	movw	r30, r16
     c2a:	e2 0f       	add	r30, r18
     c2c:	f3 1f       	adc	r31, r19
     c2e:	10 82       	st	Z, r1
     c30:	2e 96       	adiw	r28, 0x0e	; 14
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	08 95       	ret

00000c46 <vfprintf>:
     c46:	2f 92       	push	r2
     c48:	3f 92       	push	r3
     c4a:	4f 92       	push	r4
     c4c:	5f 92       	push	r5
     c4e:	6f 92       	push	r6
     c50:	7f 92       	push	r7
     c52:	8f 92       	push	r8
     c54:	9f 92       	push	r9
     c56:	af 92       	push	r10
     c58:	bf 92       	push	r11
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	2b 97       	sbiw	r28, 0x0b	; 11
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	6c 01       	movw	r12, r24
     c7c:	7b 01       	movw	r14, r22
     c7e:	8a 01       	movw	r16, r20
     c80:	fc 01       	movw	r30, r24
     c82:	17 82       	std	Z+7, r1	; 0x07
     c84:	16 82       	std	Z+6, r1	; 0x06
     c86:	83 81       	ldd	r24, Z+3	; 0x03
     c88:	81 ff       	sbrs	r24, 1
     c8a:	bf c1       	rjmp	.+894    	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     c8c:	ce 01       	movw	r24, r28
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	3c 01       	movw	r6, r24
     c92:	f6 01       	movw	r30, r12
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	f7 01       	movw	r30, r14
     c98:	93 fd       	sbrc	r25, 3
     c9a:	85 91       	lpm	r24, Z+
     c9c:	93 ff       	sbrs	r25, 3
     c9e:	81 91       	ld	r24, Z+
     ca0:	7f 01       	movw	r14, r30
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <vfprintf+0x62>
     ca6:	ad c1       	rjmp	.+858    	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     ca8:	85 32       	cpi	r24, 0x25	; 37
     caa:	39 f4       	brne	.+14     	; 0xcba <vfprintf+0x74>
     cac:	93 fd       	sbrc	r25, 3
     cae:	85 91       	lpm	r24, Z+
     cb0:	93 ff       	sbrs	r25, 3
     cb2:	81 91       	ld	r24, Z+
     cb4:	7f 01       	movw	r14, r30
     cb6:	85 32       	cpi	r24, 0x25	; 37
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <vfprintf+0x7c>
     cba:	b6 01       	movw	r22, r12
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	e6 d1       	rcall	.+972    	; 0x108c <fputc>
     cc0:	e8 cf       	rjmp	.-48     	; 0xc92 <vfprintf+0x4c>
     cc2:	91 2c       	mov	r9, r1
     cc4:	21 2c       	mov	r2, r1
     cc6:	31 2c       	mov	r3, r1
     cc8:	ff e1       	ldi	r31, 0x1F	; 31
     cca:	f3 15       	cp	r31, r3
     ccc:	d8 f0       	brcs	.+54     	; 0xd04 <vfprintf+0xbe>
     cce:	8b 32       	cpi	r24, 0x2B	; 43
     cd0:	79 f0       	breq	.+30     	; 0xcf0 <vfprintf+0xaa>
     cd2:	38 f4       	brcc	.+14     	; 0xce2 <vfprintf+0x9c>
     cd4:	80 32       	cpi	r24, 0x20	; 32
     cd6:	79 f0       	breq	.+30     	; 0xcf6 <vfprintf+0xb0>
     cd8:	83 32       	cpi	r24, 0x23	; 35
     cda:	a1 f4       	brne	.+40     	; 0xd04 <vfprintf+0xbe>
     cdc:	23 2d       	mov	r18, r3
     cde:	20 61       	ori	r18, 0x10	; 16
     ce0:	1d c0       	rjmp	.+58     	; 0xd1c <vfprintf+0xd6>
     ce2:	8d 32       	cpi	r24, 0x2D	; 45
     ce4:	61 f0       	breq	.+24     	; 0xcfe <vfprintf+0xb8>
     ce6:	80 33       	cpi	r24, 0x30	; 48
     ce8:	69 f4       	brne	.+26     	; 0xd04 <vfprintf+0xbe>
     cea:	23 2d       	mov	r18, r3
     cec:	21 60       	ori	r18, 0x01	; 1
     cee:	16 c0       	rjmp	.+44     	; 0xd1c <vfprintf+0xd6>
     cf0:	83 2d       	mov	r24, r3
     cf2:	82 60       	ori	r24, 0x02	; 2
     cf4:	38 2e       	mov	r3, r24
     cf6:	e3 2d       	mov	r30, r3
     cf8:	e4 60       	ori	r30, 0x04	; 4
     cfa:	3e 2e       	mov	r3, r30
     cfc:	2a c0       	rjmp	.+84     	; 0xd52 <vfprintf+0x10c>
     cfe:	f3 2d       	mov	r31, r3
     d00:	f8 60       	ori	r31, 0x08	; 8
     d02:	1d c0       	rjmp	.+58     	; 0xd3e <vfprintf+0xf8>
     d04:	37 fc       	sbrc	r3, 7
     d06:	2d c0       	rjmp	.+90     	; 0xd62 <vfprintf+0x11c>
     d08:	20 ed       	ldi	r18, 0xD0	; 208
     d0a:	28 0f       	add	r18, r24
     d0c:	2a 30       	cpi	r18, 0x0A	; 10
     d0e:	40 f0       	brcs	.+16     	; 0xd20 <vfprintf+0xda>
     d10:	8e 32       	cpi	r24, 0x2E	; 46
     d12:	b9 f4       	brne	.+46     	; 0xd42 <vfprintf+0xfc>
     d14:	36 fc       	sbrc	r3, 6
     d16:	75 c1       	rjmp	.+746    	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     d18:	23 2d       	mov	r18, r3
     d1a:	20 64       	ori	r18, 0x40	; 64
     d1c:	32 2e       	mov	r3, r18
     d1e:	19 c0       	rjmp	.+50     	; 0xd52 <vfprintf+0x10c>
     d20:	36 fe       	sbrs	r3, 6
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <vfprintf+0xea>
     d24:	8a e0       	ldi	r24, 0x0A	; 10
     d26:	98 9e       	mul	r9, r24
     d28:	20 0d       	add	r18, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	92 2e       	mov	r9, r18
     d2e:	11 c0       	rjmp	.+34     	; 0xd52 <vfprintf+0x10c>
     d30:	ea e0       	ldi	r30, 0x0A	; 10
     d32:	2e 9e       	mul	r2, r30
     d34:	20 0d       	add	r18, r0
     d36:	11 24       	eor	r1, r1
     d38:	22 2e       	mov	r2, r18
     d3a:	f3 2d       	mov	r31, r3
     d3c:	f0 62       	ori	r31, 0x20	; 32
     d3e:	3f 2e       	mov	r3, r31
     d40:	08 c0       	rjmp	.+16     	; 0xd52 <vfprintf+0x10c>
     d42:	8c 36       	cpi	r24, 0x6C	; 108
     d44:	21 f4       	brne	.+8      	; 0xd4e <vfprintf+0x108>
     d46:	83 2d       	mov	r24, r3
     d48:	80 68       	ori	r24, 0x80	; 128
     d4a:	38 2e       	mov	r3, r24
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <vfprintf+0x10c>
     d4e:	88 36       	cpi	r24, 0x68	; 104
     d50:	41 f4       	brne	.+16     	; 0xd62 <vfprintf+0x11c>
     d52:	f7 01       	movw	r30, r14
     d54:	93 fd       	sbrc	r25, 3
     d56:	85 91       	lpm	r24, Z+
     d58:	93 ff       	sbrs	r25, 3
     d5a:	81 91       	ld	r24, Z+
     d5c:	7f 01       	movw	r14, r30
     d5e:	81 11       	cpse	r24, r1
     d60:	b3 cf       	rjmp	.-154    	; 0xcc8 <vfprintf+0x82>
     d62:	98 2f       	mov	r25, r24
     d64:	9f 7d       	andi	r25, 0xDF	; 223
     d66:	95 54       	subi	r25, 0x45	; 69
     d68:	93 30       	cpi	r25, 0x03	; 3
     d6a:	28 f4       	brcc	.+10     	; 0xd76 <vfprintf+0x130>
     d6c:	0c 5f       	subi	r16, 0xFC	; 252
     d6e:	1f 4f       	sbci	r17, 0xFF	; 255
     d70:	9f e3       	ldi	r25, 0x3F	; 63
     d72:	99 83       	std	Y+1, r25	; 0x01
     d74:	0d c0       	rjmp	.+26     	; 0xd90 <vfprintf+0x14a>
     d76:	83 36       	cpi	r24, 0x63	; 99
     d78:	31 f0       	breq	.+12     	; 0xd86 <vfprintf+0x140>
     d7a:	83 37       	cpi	r24, 0x73	; 115
     d7c:	71 f0       	breq	.+28     	; 0xd9a <vfprintf+0x154>
     d7e:	83 35       	cpi	r24, 0x53	; 83
     d80:	09 f0       	breq	.+2      	; 0xd84 <vfprintf+0x13e>
     d82:	55 c0       	rjmp	.+170    	; 0xe2e <vfprintf+0x1e8>
     d84:	20 c0       	rjmp	.+64     	; 0xdc6 <vfprintf+0x180>
     d86:	f8 01       	movw	r30, r16
     d88:	80 81       	ld	r24, Z
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	0e 5f       	subi	r16, 0xFE	; 254
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	88 24       	eor	r8, r8
     d92:	83 94       	inc	r8
     d94:	91 2c       	mov	r9, r1
     d96:	53 01       	movw	r10, r6
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <vfprintf+0x178>
     d9a:	28 01       	movw	r4, r16
     d9c:	f2 e0       	ldi	r31, 0x02	; 2
     d9e:	4f 0e       	add	r4, r31
     da0:	51 1c       	adc	r5, r1
     da2:	f8 01       	movw	r30, r16
     da4:	a0 80       	ld	r10, Z
     da6:	b1 80       	ldd	r11, Z+1	; 0x01
     da8:	36 fe       	sbrs	r3, 6
     daa:	03 c0       	rjmp	.+6      	; 0xdb2 <vfprintf+0x16c>
     dac:	69 2d       	mov	r22, r9
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <vfprintf+0x170>
     db2:	6f ef       	ldi	r22, 0xFF	; 255
     db4:	7f ef       	ldi	r23, 0xFF	; 255
     db6:	c5 01       	movw	r24, r10
     db8:	4e d1       	rcall	.+668    	; 0x1056 <strnlen>
     dba:	4c 01       	movw	r8, r24
     dbc:	82 01       	movw	r16, r4
     dbe:	f3 2d       	mov	r31, r3
     dc0:	ff 77       	andi	r31, 0x7F	; 127
     dc2:	3f 2e       	mov	r3, r31
     dc4:	15 c0       	rjmp	.+42     	; 0xdf0 <vfprintf+0x1aa>
     dc6:	28 01       	movw	r4, r16
     dc8:	22 e0       	ldi	r18, 0x02	; 2
     dca:	42 0e       	add	r4, r18
     dcc:	51 1c       	adc	r5, r1
     dce:	f8 01       	movw	r30, r16
     dd0:	a0 80       	ld	r10, Z
     dd2:	b1 80       	ldd	r11, Z+1	; 0x01
     dd4:	36 fe       	sbrs	r3, 6
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <vfprintf+0x198>
     dd8:	69 2d       	mov	r22, r9
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <vfprintf+0x19c>
     dde:	6f ef       	ldi	r22, 0xFF	; 255
     de0:	7f ef       	ldi	r23, 0xFF	; 255
     de2:	c5 01       	movw	r24, r10
     de4:	2d d1       	rcall	.+602    	; 0x1040 <strnlen_P>
     de6:	4c 01       	movw	r8, r24
     de8:	f3 2d       	mov	r31, r3
     dea:	f0 68       	ori	r31, 0x80	; 128
     dec:	3f 2e       	mov	r3, r31
     dee:	82 01       	movw	r16, r4
     df0:	33 fc       	sbrc	r3, 3
     df2:	19 c0       	rjmp	.+50     	; 0xe26 <vfprintf+0x1e0>
     df4:	82 2d       	mov	r24, r2
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	88 16       	cp	r8, r24
     dfa:	99 06       	cpc	r9, r25
     dfc:	a0 f4       	brcc	.+40     	; 0xe26 <vfprintf+0x1e0>
     dfe:	b6 01       	movw	r22, r12
     e00:	80 e2       	ldi	r24, 0x20	; 32
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	43 d1       	rcall	.+646    	; 0x108c <fputc>
     e06:	2a 94       	dec	r2
     e08:	f5 cf       	rjmp	.-22     	; 0xdf4 <vfprintf+0x1ae>
     e0a:	f5 01       	movw	r30, r10
     e0c:	37 fc       	sbrc	r3, 7
     e0e:	85 91       	lpm	r24, Z+
     e10:	37 fe       	sbrs	r3, 7
     e12:	81 91       	ld	r24, Z+
     e14:	5f 01       	movw	r10, r30
     e16:	b6 01       	movw	r22, r12
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	38 d1       	rcall	.+624    	; 0x108c <fputc>
     e1c:	21 10       	cpse	r2, r1
     e1e:	2a 94       	dec	r2
     e20:	21 e0       	ldi	r18, 0x01	; 1
     e22:	82 1a       	sub	r8, r18
     e24:	91 08       	sbc	r9, r1
     e26:	81 14       	cp	r8, r1
     e28:	91 04       	cpc	r9, r1
     e2a:	79 f7       	brne	.-34     	; 0xe0a <vfprintf+0x1c4>
     e2c:	e1 c0       	rjmp	.+450    	; 0xff0 <vfprintf+0x3aa>
     e2e:	84 36       	cpi	r24, 0x64	; 100
     e30:	11 f0       	breq	.+4      	; 0xe36 <vfprintf+0x1f0>
     e32:	89 36       	cpi	r24, 0x69	; 105
     e34:	39 f5       	brne	.+78     	; 0xe84 <vfprintf+0x23e>
     e36:	f8 01       	movw	r30, r16
     e38:	37 fe       	sbrs	r3, 7
     e3a:	07 c0       	rjmp	.+14     	; 0xe4a <vfprintf+0x204>
     e3c:	60 81       	ld	r22, Z
     e3e:	71 81       	ldd	r23, Z+1	; 0x01
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	0c 5f       	subi	r16, 0xFC	; 252
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	08 c0       	rjmp	.+16     	; 0xe5a <vfprintf+0x214>
     e4a:	60 81       	ld	r22, Z
     e4c:	71 81       	ldd	r23, Z+1	; 0x01
     e4e:	07 2e       	mov	r0, r23
     e50:	00 0c       	add	r0, r0
     e52:	88 0b       	sbc	r24, r24
     e54:	99 0b       	sbc	r25, r25
     e56:	0e 5f       	subi	r16, 0xFE	; 254
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	f3 2d       	mov	r31, r3
     e5c:	ff 76       	andi	r31, 0x6F	; 111
     e5e:	3f 2e       	mov	r3, r31
     e60:	97 ff       	sbrs	r25, 7
     e62:	09 c0       	rjmp	.+18     	; 0xe76 <vfprintf+0x230>
     e64:	90 95       	com	r25
     e66:	80 95       	com	r24
     e68:	70 95       	com	r23
     e6a:	61 95       	neg	r22
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	8f 4f       	sbci	r24, 0xFF	; 255
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	f0 68       	ori	r31, 0x80	; 128
     e74:	3f 2e       	mov	r3, r31
     e76:	2a e0       	ldi	r18, 0x0A	; 10
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	a3 01       	movw	r20, r6
     e7c:	43 d1       	rcall	.+646    	; 0x1104 <__ultoa_invert>
     e7e:	88 2e       	mov	r8, r24
     e80:	86 18       	sub	r8, r6
     e82:	44 c0       	rjmp	.+136    	; 0xf0c <vfprintf+0x2c6>
     e84:	85 37       	cpi	r24, 0x75	; 117
     e86:	31 f4       	brne	.+12     	; 0xe94 <vfprintf+0x24e>
     e88:	23 2d       	mov	r18, r3
     e8a:	2f 7e       	andi	r18, 0xEF	; 239
     e8c:	b2 2e       	mov	r11, r18
     e8e:	2a e0       	ldi	r18, 0x0A	; 10
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	25 c0       	rjmp	.+74     	; 0xede <vfprintf+0x298>
     e94:	93 2d       	mov	r25, r3
     e96:	99 7f       	andi	r25, 0xF9	; 249
     e98:	b9 2e       	mov	r11, r25
     e9a:	8f 36       	cpi	r24, 0x6F	; 111
     e9c:	c1 f0       	breq	.+48     	; 0xece <vfprintf+0x288>
     e9e:	18 f4       	brcc	.+6      	; 0xea6 <vfprintf+0x260>
     ea0:	88 35       	cpi	r24, 0x58	; 88
     ea2:	79 f0       	breq	.+30     	; 0xec2 <vfprintf+0x27c>
     ea4:	ae c0       	rjmp	.+348    	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     ea6:	80 37       	cpi	r24, 0x70	; 112
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <vfprintf+0x26a>
     eaa:	88 37       	cpi	r24, 0x78	; 120
     eac:	21 f0       	breq	.+8      	; 0xeb6 <vfprintf+0x270>
     eae:	a9 c0       	rjmp	.+338    	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     eb0:	e9 2f       	mov	r30, r25
     eb2:	e0 61       	ori	r30, 0x10	; 16
     eb4:	be 2e       	mov	r11, r30
     eb6:	b4 fe       	sbrs	r11, 4
     eb8:	0d c0       	rjmp	.+26     	; 0xed4 <vfprintf+0x28e>
     eba:	fb 2d       	mov	r31, r11
     ebc:	f4 60       	ori	r31, 0x04	; 4
     ebe:	bf 2e       	mov	r11, r31
     ec0:	09 c0       	rjmp	.+18     	; 0xed4 <vfprintf+0x28e>
     ec2:	34 fe       	sbrs	r3, 4
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <vfprintf+0x294>
     ec6:	29 2f       	mov	r18, r25
     ec8:	26 60       	ori	r18, 0x06	; 6
     eca:	b2 2e       	mov	r11, r18
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <vfprintf+0x294>
     ece:	28 e0       	ldi	r18, 0x08	; 8
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	05 c0       	rjmp	.+10     	; 0xede <vfprintf+0x298>
     ed4:	20 e1       	ldi	r18, 0x10	; 16
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <vfprintf+0x298>
     eda:	20 e1       	ldi	r18, 0x10	; 16
     edc:	32 e0       	ldi	r19, 0x02	; 2
     ede:	f8 01       	movw	r30, r16
     ee0:	b7 fe       	sbrs	r11, 7
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <vfprintf+0x2ac>
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	0c 5f       	subi	r16, 0xFC	; 252
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <vfprintf+0x2b8>
     ef2:	60 81       	ld	r22, Z
     ef4:	71 81       	ldd	r23, Z+1	; 0x01
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 5f       	subi	r16, 0xFE	; 254
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	a3 01       	movw	r20, r6
     f00:	01 d1       	rcall	.+514    	; 0x1104 <__ultoa_invert>
     f02:	88 2e       	mov	r8, r24
     f04:	86 18       	sub	r8, r6
     f06:	fb 2d       	mov	r31, r11
     f08:	ff 77       	andi	r31, 0x7F	; 127
     f0a:	3f 2e       	mov	r3, r31
     f0c:	36 fe       	sbrs	r3, 6
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <vfprintf+0x2e4>
     f10:	23 2d       	mov	r18, r3
     f12:	2e 7f       	andi	r18, 0xFE	; 254
     f14:	a2 2e       	mov	r10, r18
     f16:	89 14       	cp	r8, r9
     f18:	58 f4       	brcc	.+22     	; 0xf30 <vfprintf+0x2ea>
     f1a:	34 fe       	sbrs	r3, 4
     f1c:	0b c0       	rjmp	.+22     	; 0xf34 <vfprintf+0x2ee>
     f1e:	32 fc       	sbrc	r3, 2
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <vfprintf+0x2ee>
     f22:	83 2d       	mov	r24, r3
     f24:	8e 7e       	andi	r24, 0xEE	; 238
     f26:	a8 2e       	mov	r10, r24
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <vfprintf+0x2ee>
     f2a:	b8 2c       	mov	r11, r8
     f2c:	a3 2c       	mov	r10, r3
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <vfprintf+0x2f0>
     f30:	b8 2c       	mov	r11, r8
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <vfprintf+0x2f0>
     f34:	b9 2c       	mov	r11, r9
     f36:	a4 fe       	sbrs	r10, 4
     f38:	0f c0       	rjmp	.+30     	; 0xf58 <vfprintf+0x312>
     f3a:	fe 01       	movw	r30, r28
     f3c:	e8 0d       	add	r30, r8
     f3e:	f1 1d       	adc	r31, r1
     f40:	80 81       	ld	r24, Z
     f42:	80 33       	cpi	r24, 0x30	; 48
     f44:	21 f4       	brne	.+8      	; 0xf4e <vfprintf+0x308>
     f46:	9a 2d       	mov	r25, r10
     f48:	99 7e       	andi	r25, 0xE9	; 233
     f4a:	a9 2e       	mov	r10, r25
     f4c:	09 c0       	rjmp	.+18     	; 0xf60 <vfprintf+0x31a>
     f4e:	a2 fe       	sbrs	r10, 2
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <vfprintf+0x318>
     f52:	b3 94       	inc	r11
     f54:	b3 94       	inc	r11
     f56:	04 c0       	rjmp	.+8      	; 0xf60 <vfprintf+0x31a>
     f58:	8a 2d       	mov	r24, r10
     f5a:	86 78       	andi	r24, 0x86	; 134
     f5c:	09 f0       	breq	.+2      	; 0xf60 <vfprintf+0x31a>
     f5e:	b3 94       	inc	r11
     f60:	a3 fc       	sbrc	r10, 3
     f62:	10 c0       	rjmp	.+32     	; 0xf84 <vfprintf+0x33e>
     f64:	a0 fe       	sbrs	r10, 0
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <vfprintf+0x32e>
     f68:	b2 14       	cp	r11, r2
     f6a:	80 f4       	brcc	.+32     	; 0xf8c <vfprintf+0x346>
     f6c:	28 0c       	add	r2, r8
     f6e:	92 2c       	mov	r9, r2
     f70:	9b 18       	sub	r9, r11
     f72:	0d c0       	rjmp	.+26     	; 0xf8e <vfprintf+0x348>
     f74:	b2 14       	cp	r11, r2
     f76:	58 f4       	brcc	.+22     	; 0xf8e <vfprintf+0x348>
     f78:	b6 01       	movw	r22, r12
     f7a:	80 e2       	ldi	r24, 0x20	; 32
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	86 d0       	rcall	.+268    	; 0x108c <fputc>
     f80:	b3 94       	inc	r11
     f82:	f8 cf       	rjmp	.-16     	; 0xf74 <vfprintf+0x32e>
     f84:	b2 14       	cp	r11, r2
     f86:	18 f4       	brcc	.+6      	; 0xf8e <vfprintf+0x348>
     f88:	2b 18       	sub	r2, r11
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <vfprintf+0x34a>
     f8c:	98 2c       	mov	r9, r8
     f8e:	21 2c       	mov	r2, r1
     f90:	a4 fe       	sbrs	r10, 4
     f92:	0f c0       	rjmp	.+30     	; 0xfb2 <vfprintf+0x36c>
     f94:	b6 01       	movw	r22, r12
     f96:	80 e3       	ldi	r24, 0x30	; 48
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	78 d0       	rcall	.+240    	; 0x108c <fputc>
     f9c:	a2 fe       	sbrs	r10, 2
     f9e:	16 c0       	rjmp	.+44     	; 0xfcc <vfprintf+0x386>
     fa0:	a1 fc       	sbrc	r10, 1
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <vfprintf+0x364>
     fa4:	88 e7       	ldi	r24, 0x78	; 120
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <vfprintf+0x368>
     faa:	88 e5       	ldi	r24, 0x58	; 88
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	b6 01       	movw	r22, r12
     fb0:	0c c0       	rjmp	.+24     	; 0xfca <vfprintf+0x384>
     fb2:	8a 2d       	mov	r24, r10
     fb4:	86 78       	andi	r24, 0x86	; 134
     fb6:	51 f0       	breq	.+20     	; 0xfcc <vfprintf+0x386>
     fb8:	a1 fe       	sbrs	r10, 1
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <vfprintf+0x37a>
     fbc:	8b e2       	ldi	r24, 0x2B	; 43
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <vfprintf+0x37c>
     fc0:	80 e2       	ldi	r24, 0x20	; 32
     fc2:	a7 fc       	sbrc	r10, 7
     fc4:	8d e2       	ldi	r24, 0x2D	; 45
     fc6:	b6 01       	movw	r22, r12
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	60 d0       	rcall	.+192    	; 0x108c <fputc>
     fcc:	89 14       	cp	r8, r9
     fce:	30 f4       	brcc	.+12     	; 0xfdc <vfprintf+0x396>
     fd0:	b6 01       	movw	r22, r12
     fd2:	80 e3       	ldi	r24, 0x30	; 48
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	5a d0       	rcall	.+180    	; 0x108c <fputc>
     fd8:	9a 94       	dec	r9
     fda:	f8 cf       	rjmp	.-16     	; 0xfcc <vfprintf+0x386>
     fdc:	8a 94       	dec	r8
     fde:	f3 01       	movw	r30, r6
     fe0:	e8 0d       	add	r30, r8
     fe2:	f1 1d       	adc	r31, r1
     fe4:	80 81       	ld	r24, Z
     fe6:	b6 01       	movw	r22, r12
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	50 d0       	rcall	.+160    	; 0x108c <fputc>
     fec:	81 10       	cpse	r8, r1
     fee:	f6 cf       	rjmp	.-20     	; 0xfdc <vfprintf+0x396>
     ff0:	22 20       	and	r2, r2
     ff2:	09 f4       	brne	.+2      	; 0xff6 <vfprintf+0x3b0>
     ff4:	4e ce       	rjmp	.-868    	; 0xc92 <vfprintf+0x4c>
     ff6:	b6 01       	movw	r22, r12
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	47 d0       	rcall	.+142    	; 0x108c <fputc>
     ffe:	2a 94       	dec	r2
    1000:	f7 cf       	rjmp	.-18     	; 0xff0 <vfprintf+0x3aa>
    1002:	f6 01       	movw	r30, r12
    1004:	86 81       	ldd	r24, Z+6	; 0x06
    1006:	97 81       	ldd	r25, Z+7	; 0x07
    1008:	02 c0       	rjmp	.+4      	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    100a:	8f ef       	ldi	r24, 0xFF	; 255
    100c:	9f ef       	ldi	r25, 0xFF	; 255
    100e:	2b 96       	adiw	r28, 0x0b	; 11
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	bf 90       	pop	r11
    102c:	af 90       	pop	r10
    102e:	9f 90       	pop	r9
    1030:	8f 90       	pop	r8
    1032:	7f 90       	pop	r7
    1034:	6f 90       	pop	r6
    1036:	5f 90       	pop	r5
    1038:	4f 90       	pop	r4
    103a:	3f 90       	pop	r3
    103c:	2f 90       	pop	r2
    103e:	08 95       	ret

00001040 <strnlen_P>:
    1040:	fc 01       	movw	r30, r24
    1042:	05 90       	lpm	r0, Z+
    1044:	61 50       	subi	r22, 0x01	; 1
    1046:	70 40       	sbci	r23, 0x00	; 0
    1048:	01 10       	cpse	r0, r1
    104a:	d8 f7       	brcc	.-10     	; 0x1042 <strnlen_P+0x2>
    104c:	80 95       	com	r24
    104e:	90 95       	com	r25
    1050:	8e 0f       	add	r24, r30
    1052:	9f 1f       	adc	r25, r31
    1054:	08 95       	ret

00001056 <strnlen>:
    1056:	fc 01       	movw	r30, r24
    1058:	61 50       	subi	r22, 0x01	; 1
    105a:	70 40       	sbci	r23, 0x00	; 0
    105c:	01 90       	ld	r0, Z+
    105e:	01 10       	cpse	r0, r1
    1060:	d8 f7       	brcc	.-10     	; 0x1058 <strnlen+0x2>
    1062:	80 95       	com	r24
    1064:	90 95       	com	r25
    1066:	8e 0f       	add	r24, r30
    1068:	9f 1f       	adc	r25, r31
    106a:	08 95       	ret

0000106c <strrev>:
    106c:	dc 01       	movw	r26, r24
    106e:	fc 01       	movw	r30, r24
    1070:	67 2f       	mov	r22, r23
    1072:	71 91       	ld	r23, Z+
    1074:	77 23       	and	r23, r23
    1076:	e1 f7       	brne	.-8      	; 0x1070 <strrev+0x4>
    1078:	32 97       	sbiw	r30, 0x02	; 2
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <strrev+0x18>
    107c:	7c 91       	ld	r23, X
    107e:	6d 93       	st	X+, r22
    1080:	70 83       	st	Z, r23
    1082:	62 91       	ld	r22, -Z
    1084:	ae 17       	cp	r26, r30
    1086:	bf 07       	cpc	r27, r31
    1088:	c8 f3       	brcs	.-14     	; 0x107c <strrev+0x10>
    108a:	08 95       	ret

0000108c <fputc>:
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	fb 01       	movw	r30, r22
    1096:	23 81       	ldd	r18, Z+3	; 0x03
    1098:	21 fd       	sbrc	r18, 1
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <fputc+0x16>
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	9f ef       	ldi	r25, 0xFF	; 255
    10a0:	2c c0       	rjmp	.+88     	; 0x10fa <fputc+0x6e>
    10a2:	22 ff       	sbrs	r18, 2
    10a4:	16 c0       	rjmp	.+44     	; 0x10d2 <fputc+0x46>
    10a6:	46 81       	ldd	r20, Z+6	; 0x06
    10a8:	57 81       	ldd	r21, Z+7	; 0x07
    10aa:	24 81       	ldd	r18, Z+4	; 0x04
    10ac:	35 81       	ldd	r19, Z+5	; 0x05
    10ae:	42 17       	cp	r20, r18
    10b0:	53 07       	cpc	r21, r19
    10b2:	44 f4       	brge	.+16     	; 0x10c4 <fputc+0x38>
    10b4:	a0 81       	ld	r26, Z
    10b6:	b1 81       	ldd	r27, Z+1	; 0x01
    10b8:	9d 01       	movw	r18, r26
    10ba:	2f 5f       	subi	r18, 0xFF	; 255
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	31 83       	std	Z+1, r19	; 0x01
    10c0:	20 83       	st	Z, r18
    10c2:	8c 93       	st	X, r24
    10c4:	26 81       	ldd	r18, Z+6	; 0x06
    10c6:	37 81       	ldd	r19, Z+7	; 0x07
    10c8:	2f 5f       	subi	r18, 0xFF	; 255
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	37 83       	std	Z+7, r19	; 0x07
    10ce:	26 83       	std	Z+6, r18	; 0x06
    10d0:	14 c0       	rjmp	.+40     	; 0x10fa <fputc+0x6e>
    10d2:	8b 01       	movw	r16, r22
    10d4:	ec 01       	movw	r28, r24
    10d6:	fb 01       	movw	r30, r22
    10d8:	00 84       	ldd	r0, Z+8	; 0x08
    10da:	f1 85       	ldd	r31, Z+9	; 0x09
    10dc:	e0 2d       	mov	r30, r0
    10de:	19 95       	eicall
    10e0:	89 2b       	or	r24, r25
    10e2:	e1 f6       	brne	.-72     	; 0x109c <fputc+0x10>
    10e4:	d8 01       	movw	r26, r16
    10e6:	16 96       	adiw	r26, 0x06	; 6
    10e8:	8d 91       	ld	r24, X+
    10ea:	9c 91       	ld	r25, X
    10ec:	17 97       	sbiw	r26, 0x07	; 7
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	17 96       	adiw	r26, 0x07	; 7
    10f2:	9c 93       	st	X, r25
    10f4:	8e 93       	st	-X, r24
    10f6:	16 97       	sbiw	r26, 0x06	; 6
    10f8:	ce 01       	movw	r24, r28
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	08 95       	ret

00001104 <__ultoa_invert>:
    1104:	fa 01       	movw	r30, r20
    1106:	aa 27       	eor	r26, r26
    1108:	28 30       	cpi	r18, 0x08	; 8
    110a:	51 f1       	breq	.+84     	; 0x1160 <__ultoa_invert+0x5c>
    110c:	20 31       	cpi	r18, 0x10	; 16
    110e:	81 f1       	breq	.+96     	; 0x1170 <__ultoa_invert+0x6c>
    1110:	e8 94       	clt
    1112:	6f 93       	push	r22
    1114:	6e 7f       	andi	r22, 0xFE	; 254
    1116:	6e 5f       	subi	r22, 0xFE	; 254
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	8f 4f       	sbci	r24, 0xFF	; 255
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	af 4f       	sbci	r26, 0xFF	; 255
    1120:	b1 e0       	ldi	r27, 0x01	; 1
    1122:	3e d0       	rcall	.+124    	; 0x11a0 <__ultoa_invert+0x9c>
    1124:	b4 e0       	ldi	r27, 0x04	; 4
    1126:	3c d0       	rcall	.+120    	; 0x11a0 <__ultoa_invert+0x9c>
    1128:	67 0f       	add	r22, r23
    112a:	78 1f       	adc	r23, r24
    112c:	89 1f       	adc	r24, r25
    112e:	9a 1f       	adc	r25, r26
    1130:	a1 1d       	adc	r26, r1
    1132:	68 0f       	add	r22, r24
    1134:	79 1f       	adc	r23, r25
    1136:	8a 1f       	adc	r24, r26
    1138:	91 1d       	adc	r25, r1
    113a:	a1 1d       	adc	r26, r1
    113c:	6a 0f       	add	r22, r26
    113e:	71 1d       	adc	r23, r1
    1140:	81 1d       	adc	r24, r1
    1142:	91 1d       	adc	r25, r1
    1144:	a1 1d       	adc	r26, r1
    1146:	20 d0       	rcall	.+64     	; 0x1188 <__ultoa_invert+0x84>
    1148:	09 f4       	brne	.+2      	; 0x114c <__ultoa_invert+0x48>
    114a:	68 94       	set
    114c:	3f 91       	pop	r19
    114e:	2a e0       	ldi	r18, 0x0A	; 10
    1150:	26 9f       	mul	r18, r22
    1152:	11 24       	eor	r1, r1
    1154:	30 19       	sub	r19, r0
    1156:	30 5d       	subi	r19, 0xD0	; 208
    1158:	31 93       	st	Z+, r19
    115a:	de f6       	brtc	.-74     	; 0x1112 <__ultoa_invert+0xe>
    115c:	cf 01       	movw	r24, r30
    115e:	08 95       	ret
    1160:	46 2f       	mov	r20, r22
    1162:	47 70       	andi	r20, 0x07	; 7
    1164:	40 5d       	subi	r20, 0xD0	; 208
    1166:	41 93       	st	Z+, r20
    1168:	b3 e0       	ldi	r27, 0x03	; 3
    116a:	0f d0       	rcall	.+30     	; 0x118a <__ultoa_invert+0x86>
    116c:	c9 f7       	brne	.-14     	; 0x1160 <__ultoa_invert+0x5c>
    116e:	f6 cf       	rjmp	.-20     	; 0x115c <__ultoa_invert+0x58>
    1170:	46 2f       	mov	r20, r22
    1172:	4f 70       	andi	r20, 0x0F	; 15
    1174:	40 5d       	subi	r20, 0xD0	; 208
    1176:	4a 33       	cpi	r20, 0x3A	; 58
    1178:	18 f0       	brcs	.+6      	; 0x1180 <__ultoa_invert+0x7c>
    117a:	49 5d       	subi	r20, 0xD9	; 217
    117c:	31 fd       	sbrc	r19, 1
    117e:	40 52       	subi	r20, 0x20	; 32
    1180:	41 93       	st	Z+, r20
    1182:	02 d0       	rcall	.+4      	; 0x1188 <__ultoa_invert+0x84>
    1184:	a9 f7       	brne	.-22     	; 0x1170 <__ultoa_invert+0x6c>
    1186:	ea cf       	rjmp	.-44     	; 0x115c <__ultoa_invert+0x58>
    1188:	b4 e0       	ldi	r27, 0x04	; 4
    118a:	a6 95       	lsr	r26
    118c:	97 95       	ror	r25
    118e:	87 95       	ror	r24
    1190:	77 95       	ror	r23
    1192:	67 95       	ror	r22
    1194:	ba 95       	dec	r27
    1196:	c9 f7       	brne	.-14     	; 0x118a <__ultoa_invert+0x86>
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	61 05       	cpc	r22, r1
    119c:	71 05       	cpc	r23, r1
    119e:	08 95       	ret
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
    11a4:	0a 2e       	mov	r0, r26
    11a6:	06 94       	lsr	r0
    11a8:	57 95       	ror	r21
    11aa:	47 95       	ror	r20
    11ac:	37 95       	ror	r19
    11ae:	27 95       	ror	r18
    11b0:	ba 95       	dec	r27
    11b2:	c9 f7       	brne	.-14     	; 0x11a6 <__ultoa_invert+0xa2>
    11b4:	62 0f       	add	r22, r18
    11b6:	73 1f       	adc	r23, r19
    11b8:	84 1f       	adc	r24, r20
    11ba:	95 1f       	adc	r25, r21
    11bc:	a0 1d       	adc	r26, r0
    11be:	08 95       	ret

000011c0 <_exit>:
    11c0:	f8 94       	cli

000011c2 <__stop_program>:
    11c2:	ff cf       	rjmp	.-2      	; 0x11c2 <__stop_program>
