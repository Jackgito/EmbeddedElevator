
EmbeddedElevator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000260  00800200  00001246  000012da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800460  00800460  0000153a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000153a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a8c  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001644  00000000  00000000  0000424c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000175b  00000000  00000000  00005890  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00006fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3c  00000000  00000000  00007418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000125c  00000000  00000000  00007e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
       2:	00 00       	nop
       4:	07 c1       	rjmp	.+526    	; 0x214 <__bad_interrupt>
       6:	00 00       	nop
       8:	05 c1       	rjmp	.+522    	; 0x214 <__bad_interrupt>
       a:	00 00       	nop
       c:	03 c1       	rjmp	.+518    	; 0x214 <__bad_interrupt>
       e:	00 00       	nop
      10:	01 c1       	rjmp	.+514    	; 0x214 <__bad_interrupt>
      12:	00 00       	nop
      14:	0e c3       	rjmp	.+1564   	; 0x632 <__vector_5>
      16:	00 00       	nop
      18:	fd c0       	rjmp	.+506    	; 0x214 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fb c0       	rjmp	.+502    	; 0x214 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f9 c0       	rjmp	.+498    	; 0x214 <__bad_interrupt>
      22:	00 00       	nop
      24:	f7 c0       	rjmp	.+494    	; 0x214 <__bad_interrupt>
      26:	00 00       	nop
      28:	f5 c0       	rjmp	.+490    	; 0x214 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f3 c0       	rjmp	.+486    	; 0x214 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f1 c0       	rjmp	.+482    	; 0x214 <__bad_interrupt>
      32:	00 00       	nop
      34:	ef c0       	rjmp	.+478    	; 0x214 <__bad_interrupt>
      36:	00 00       	nop
      38:	ed c0       	rjmp	.+474    	; 0x214 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	eb c0       	rjmp	.+470    	; 0x214 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e9 c0       	rjmp	.+466    	; 0x214 <__bad_interrupt>
      42:	00 00       	nop
      44:	e7 c0       	rjmp	.+462    	; 0x214 <__bad_interrupt>
      46:	00 00       	nop
      48:	e5 c0       	rjmp	.+458    	; 0x214 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e3 c0       	rjmp	.+454    	; 0x214 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e1 c0       	rjmp	.+450    	; 0x214 <__bad_interrupt>
      52:	00 00       	nop
      54:	df c0       	rjmp	.+446    	; 0x214 <__bad_interrupt>
      56:	00 00       	nop
      58:	dd c0       	rjmp	.+442    	; 0x214 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	db c0       	rjmp	.+438    	; 0x214 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d9 c0       	rjmp	.+434    	; 0x214 <__bad_interrupt>
      62:	00 00       	nop
      64:	d7 c0       	rjmp	.+430    	; 0x214 <__bad_interrupt>
      66:	00 00       	nop
      68:	d5 c0       	rjmp	.+426    	; 0x214 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d3 c0       	rjmp	.+422    	; 0x214 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d1 c0       	rjmp	.+418    	; 0x214 <__bad_interrupt>
      72:	00 00       	nop
      74:	cf c0       	rjmp	.+414    	; 0x214 <__bad_interrupt>
      76:	00 00       	nop
      78:	cd c0       	rjmp	.+410    	; 0x214 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	cb c0       	rjmp	.+406    	; 0x214 <__bad_interrupt>
      7e:	00 00       	nop
      80:	c9 c0       	rjmp	.+402    	; 0x214 <__bad_interrupt>
      82:	00 00       	nop
      84:	c7 c0       	rjmp	.+398    	; 0x214 <__bad_interrupt>
      86:	00 00       	nop
      88:	c5 c0       	rjmp	.+394    	; 0x214 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c3 c0       	rjmp	.+390    	; 0x214 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c1 c0       	rjmp	.+386    	; 0x214 <__bad_interrupt>
      92:	00 00       	nop
      94:	bf c0       	rjmp	.+382    	; 0x214 <__bad_interrupt>
      96:	00 00       	nop
      98:	bd c0       	rjmp	.+378    	; 0x214 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	bb c0       	rjmp	.+374    	; 0x214 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	b9 c0       	rjmp	.+370    	; 0x214 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b7 c0       	rjmp	.+366    	; 0x214 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b5 c0       	rjmp	.+362    	; 0x214 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b3 c0       	rjmp	.+358    	; 0x214 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b1 c0       	rjmp	.+354    	; 0x214 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	af c0       	rjmp	.+350    	; 0x214 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ad c0       	rjmp	.+346    	; 0x214 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ab c0       	rjmp	.+342    	; 0x214 <__bad_interrupt>
      be:	00 00       	nop
      c0:	a9 c0       	rjmp	.+338    	; 0x214 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a7 c0       	rjmp	.+334    	; 0x214 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a5 c0       	rjmp	.+330    	; 0x214 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a3 c0       	rjmp	.+326    	; 0x214 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a1 c0       	rjmp	.+322    	; 0x214 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	9f c0       	rjmp	.+318    	; 0x214 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	9d c0       	rjmp	.+314    	; 0x214 <__bad_interrupt>
      da:	00 00       	nop
      dc:	9b c0       	rjmp	.+310    	; 0x214 <__bad_interrupt>
      de:	00 00       	nop
      e0:	99 c0       	rjmp	.+306    	; 0x214 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b5 03       	fmuls	r19, r21
      e6:	bd 03       	fmulsu	r19, r21
      e8:	bd 03       	fmulsu	r19, r21
      ea:	bd 03       	fmulsu	r19, r21
      ec:	b7 03       	fmuls	r19, r23
      ee:	bd 03       	fmulsu	r19, r21
      f0:	b9 03       	fmulsu	r19, r17
      f2:	bb 03       	fmulsu	r19, r19
      f4:	bd 03       	fmulsu	r19, r21
      f6:	bd 03       	fmulsu	r19, r21
      f8:	bd 03       	fmulsu	r19, r21
      fa:	bd 03       	fmulsu	r19, r21
      fc:	bd 03       	fmulsu	r19, r21
      fe:	bd 03       	fmulsu	r19, r21
     100:	bd 03       	fmulsu	r19, r21
     102:	bd 03       	fmulsu	r19, r21
     104:	bd 03       	fmulsu	r19, r21
     106:	bd 03       	fmulsu	r19, r21
     108:	bd 03       	fmulsu	r19, r21
     10a:	bd 03       	fmulsu	r19, r21
     10c:	bd 03       	fmulsu	r19, r21
     10e:	bd 03       	fmulsu	r19, r21
     110:	bd 03       	fmulsu	r19, r21
     112:	bd 03       	fmulsu	r19, r21
     114:	bd 03       	fmulsu	r19, r21
     116:	bd 03       	fmulsu	r19, r21
     118:	bd 03       	fmulsu	r19, r21
     11a:	bd 03       	fmulsu	r19, r21
     11c:	bd 03       	fmulsu	r19, r21
     11e:	bd 03       	fmulsu	r19, r21
     120:	bd 03       	fmulsu	r19, r21
     122:	bd 03       	fmulsu	r19, r21
     124:	bd 03       	fmulsu	r19, r21
     126:	bd 03       	fmulsu	r19, r21
     128:	bd 03       	fmulsu	r19, r21
     12a:	bd 03       	fmulsu	r19, r21
     12c:	bd 03       	fmulsu	r19, r21
     12e:	bd 03       	fmulsu	r19, r21
     130:	bd 03       	fmulsu	r19, r21
     132:	bd 03       	fmulsu	r19, r21
     134:	bd 03       	fmulsu	r19, r21
     136:	bd 03       	fmulsu	r19, r21
     138:	bd 03       	fmulsu	r19, r21
     13a:	bd 03       	fmulsu	r19, r21
     13c:	bd 03       	fmulsu	r19, r21
     13e:	bd 03       	fmulsu	r19, r21
     140:	bd 03       	fmulsu	r19, r21
     142:	bd 03       	fmulsu	r19, r21
     144:	bd 03       	fmulsu	r19, r21
     146:	bd 03       	fmulsu	r19, r21
     148:	bd 03       	fmulsu	r19, r21
     14a:	bd 03       	fmulsu	r19, r21
     14c:	bd 03       	fmulsu	r19, r21
     14e:	bd 03       	fmulsu	r19, r21
     150:	bd 03       	fmulsu	r19, r21
     152:	bd 03       	fmulsu	r19, r21
     154:	bd 03       	fmulsu	r19, r21
     156:	bd 03       	fmulsu	r19, r21
     158:	bd 03       	fmulsu	r19, r21
     15a:	bd 03       	fmulsu	r19, r21
     15c:	bd 03       	fmulsu	r19, r21
     15e:	bd 03       	fmulsu	r19, r21
     160:	bd 03       	fmulsu	r19, r21
     162:	bd 03       	fmulsu	r19, r21
     164:	ad 03       	fmulsu	r18, r21
     166:	bd 03       	fmulsu	r19, r21
     168:	bd 03       	fmulsu	r19, r21
     16a:	bd 03       	fmulsu	r19, r21
     16c:	af 03       	fmulsu	r18, r23
     16e:	bd 03       	fmulsu	r19, r21
     170:	b1 03       	fmuls	r19, r17
     172:	b3 03       	fmuls	r19, r19
     174:	bd 03       	fmulsu	r19, r21
     176:	bd 03       	fmulsu	r19, r21
     178:	bd 03       	fmulsu	r19, r21
     17a:	bd 03       	fmulsu	r19, r21
     17c:	bd 03       	fmulsu	r19, r21
     17e:	bd 03       	fmulsu	r19, r21
     180:	bd 03       	fmulsu	r19, r21
     182:	bd 03       	fmulsu	r19, r21
     184:	bd 03       	fmulsu	r19, r21
     186:	bd 03       	fmulsu	r19, r21
     188:	bd 03       	fmulsu	r19, r21
     18a:	bd 03       	fmulsu	r19, r21
     18c:	bd 03       	fmulsu	r19, r21
     18e:	bd 03       	fmulsu	r19, r21
     190:	bd 03       	fmulsu	r19, r21
     192:	bd 03       	fmulsu	r19, r21
     194:	bd 03       	fmulsu	r19, r21
     196:	bd 03       	fmulsu	r19, r21
     198:	bd 03       	fmulsu	r19, r21
     19a:	bd 03       	fmulsu	r19, r21
     19c:	bd 03       	fmulsu	r19, r21
     19e:	bd 03       	fmulsu	r19, r21
     1a0:	bd 03       	fmulsu	r19, r21
     1a2:	bd 03       	fmulsu	r19, r21
     1a4:	a5 03       	fmuls	r18, r21
     1a6:	bd 03       	fmulsu	r19, r21
     1a8:	bd 03       	fmulsu	r19, r21
     1aa:	bd 03       	fmulsu	r19, r21
     1ac:	a7 03       	fmuls	r18, r23
     1ae:	bd 03       	fmulsu	r19, r21
     1b0:	a9 03       	fmulsu	r18, r17
     1b2:	ab 03       	fmulsu	r18, r19
     1b4:	bd 03       	fmulsu	r19, r21
     1b6:	bd 03       	fmulsu	r19, r21
     1b8:	bd 03       	fmulsu	r19, r21
     1ba:	bd 03       	fmulsu	r19, r21
     1bc:	bd 03       	fmulsu	r19, r21
     1be:	bd 03       	fmulsu	r19, r21
     1c0:	bd 03       	fmulsu	r19, r21
     1c2:	bd 03       	fmulsu	r19, r21
     1c4:	9f 03       	fmulsu	r17, r23
     1c6:	bd 03       	fmulsu	r19, r21
     1c8:	bd 03       	fmulsu	r19, r21
     1ca:	bd 03       	fmulsu	r19, r21
     1cc:	bf 03       	fmulsu	r19, r23
     1ce:	bd 03       	fmulsu	r19, r21
     1d0:	a1 03       	fmuls	r18, r17
     1d2:	a3 03       	fmuls	r18, r19

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d1 e2       	ldi	r29, 0x21	; 33
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	00 e0       	ldi	r16, 0x00	; 0
     1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
     1e4:	14 e0       	ldi	r17, 0x04	; 4
     1e6:	a0 e0       	ldi	r26, 0x00	; 0
     1e8:	b2 e0       	ldi	r27, 0x02	; 2
     1ea:	e6 e4       	ldi	r30, 0x46	; 70
     1ec:	f2 e1       	ldi	r31, 0x12	; 18
     1ee:	00 e0       	ldi	r16, 0x00	; 0
     1f0:	0b bf       	out	0x3b, r16	; 59
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
     1f4:	07 90       	elpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	a0 36       	cpi	r26, 0x60	; 96
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
     1fe:	24 e0       	ldi	r18, 0x04	; 4
     200:	a0 e6       	ldi	r26, 0x60	; 96
     202:	b4 e0       	ldi	r27, 0x04	; 4
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	aa 36       	cpi	r26, 0x6A	; 106
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
     20e:	01 d4       	rcall	.+2050   	; 0xa12 <main>
     210:	0c 94 21 09 	jmp	0x1242	; 0x1242 <_exit>

00000214 <__bad_interrupt>:
     214:	f5 ce       	rjmp	.-534    	; 0x0 <__vectors>

00000216 <TWI_init>:

#define SLAVE_ADDRESS 0x57 // 7-bit address (0b1010111)

void TWI_init() {
    // Set up TWI (I2C) as master
    TWBR = 3;  // Set bit rate
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    TWSR = 0x00; // Prescaler value
     21c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    TWCR |= (1 << TWEN); // Enable TWI
     220:	ec eb       	ldi	r30, 0xBC	; 188
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	84 60       	ori	r24, 0x04	; 4
     228:	80 83       	st	Z, r24
     22a:	08 95       	ret

0000022c <TWI_start>:
}

void TWI_start() {
    // Send start condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     22c:	84 ea       	ldi	r24, 0xA4	; 164
     22e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    // Wait for the TWI interrupt flag to be set
	uint16_t elapsed = 0;
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
    while (!(TWCR & (1 << TWINT))) {
     236:	0f c0       	rjmp	.+30     	; 0x256 <TWI_start+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     238:	ef e9       	ldi	r30, 0x9F	; 159
     23a:	ff e0       	ldi	r31, 0x0F	; 15
     23c:	31 97       	sbiw	r30, 0x01	; 1
     23e:	f1 f7       	brne	.-4      	; 0x23c <TWI_start+0x10>
     240:	00 c0       	rjmp	.+0      	; 0x242 <TWI_start+0x16>
     242:	00 00       	nop
		_delay_ms(1);
		if (++elapsed > 2000) {  // Wait 2 seconds
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	81 3d       	cpi	r24, 0xD1	; 209
     248:	f7 e0       	ldi	r31, 0x07	; 7
     24a:	9f 07       	cpc	r25, r31
     24c:	20 f0       	brcs	.+8      	; 0x256 <TWI_start+0x2a>
			print("TWI write timeout!");
     24e:	8c e1       	ldi	r24, 0x1C	; 28
     250:	92 e0       	ldi	r25, 0x02	; 2
     252:	89 c4       	rjmp	.+2322   	; 0xb66 <print>
			break;
     254:	08 95       	ret
void TWI_start() {
    // Send start condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    // Wait for the TWI interrupt flag to be set
	uint16_t elapsed = 0;
    while (!(TWCR & (1 << TWINT))) {
     256:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     25a:	22 23       	and	r18, r18
     25c:	6c f7       	brge	.-38     	; 0x238 <TWI_start+0xc>
     25e:	08 95       	ret

00000260 <TWI_stop>:
    }
}

void TWI_stop() {
    // Send stop condition
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     260:	84 e9       	ldi	r24, 0x94	; 148
     262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     266:	08 95       	ret

00000268 <TWI_write>:
}

// Used in send_TWI_data for sending one bit a time
void TWI_write(uint8_t data) {
	TWDR = data;
     268:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
     26c:	84 e8       	ldi	r24, 0x84	; 132
     26e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

	uint16_t elapsed = 0;
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
	while (!(TWCR & (1 << TWINT))) {
     276:	0f c0       	rjmp	.+30     	; 0x296 <TWI_write+0x2e>
     278:	ef e9       	ldi	r30, 0x9F	; 159
     27a:	ff e0       	ldi	r31, 0x0F	; 15
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <TWI_write+0x14>
     280:	00 c0       	rjmp	.+0      	; 0x282 <TWI_write+0x1a>
     282:	00 00       	nop
		_delay_ms(1);
		if (++elapsed > 2000) {  // Wait 2 seconds
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	81 3d       	cpi	r24, 0xD1	; 209
     288:	f7 e0       	ldi	r31, 0x07	; 7
     28a:	9f 07       	cpc	r25, r31
     28c:	20 f0       	brcs	.+8      	; 0x296 <TWI_write+0x2e>
			print("TWI write timeout!");
     28e:	8c e1       	ldi	r24, 0x1C	; 28
     290:	92 e0       	ldi	r25, 0x02	; 2
     292:	69 c4       	rjmp	.+2258   	; 0xb66 <print>
			break;
     294:	08 95       	ret
void TWI_write(uint8_t data) {
	TWDR = data;
	TWCR = (1 << TWINT) | (1 << TWEN);

	uint16_t elapsed = 0;
	while (!(TWCR & (1 << TWINT))) {
     296:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     29a:	22 23       	and	r18, r18
     29c:	6c f7       	brge	.-38     	; 0x278 <TWI_write+0x10>
     29e:	08 95       	ret

000002a0 <send_TWI_data>:
		}
	}
}

// Can be used to send strings from master to slave to control slave behavior
void send_TWI_data(const char* message) {
     2a0:	af 92       	push	r10
     2a2:	bf 92       	push	r11
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	a0 97       	sbiw	r28, 0x20	; 32
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	7c 01       	movw	r14, r24
	print("TWI: Starting transmission...");
     2c4:	8f e2       	ldi	r24, 0x2F	; 47
     2c6:	92 e0       	ldi	r25, 0x02	; 2
     2c8:	4e d4       	rcall	.+2204   	; 0xb66 <print>

	// Send start condition
	TWI_start();
     2ca:	b0 df       	rcall	.-160    	; 0x22c <TWI_start>
     2cc:	8d e4       	ldi	r24, 0x4D	; 77
	print("TWI: START condition sent");
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	4a d4       	rcall	.+2196   	; 0xb66 <print>
     2d2:	87 e6       	ldi	r24, 0x67	; 103

	// Send slave address with write bit (0)
	print("TWI: Sending slave address...");
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	47 d4       	rcall	.+2190   	; 0xb66 <print>
     2d8:	8e ea       	ldi	r24, 0xAE	; 174
	TWI_write(SLAVE_ADDRESS << 1);
     2da:	c6 df       	rcall	.-116    	; 0x268 <TWI_write>
     2dc:	85 e8       	ldi	r24, 0x85	; 133
	print("TWI: Slave address sent");
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	42 d4       	rcall	.+2180   	; 0xb66 <print>
     2e2:	d1 2c       	mov	r13, r1
     2e4:	21 c0       	rjmp	.+66     	; 0x328 <send_TWI_data+0x88>

	// Send data byte by byte from the provided message
	char debug_buf[32];
	for (uint8_t i = 0; i < strlen(message); i++) {
     2e6:	87 01       	movw	r16, r14
     2e8:	08 0f       	add	r16, r24
		snprintf(debug_buf, sizeof(debug_buf), "TWI: Sending byte %d: %c", i, message[i]);
     2ea:	19 1f       	adc	r17, r25
     2ec:	f8 01       	movw	r30, r16
     2ee:	80 81       	ld	r24, Z
     2f0:	1f 92       	push	r1
     2f2:	8f 93       	push	r24
     2f4:	1f 92       	push	r1
     2f6:	df 92       	push	r13
     2f8:	8d e9       	ldi	r24, 0x9D	; 157
     2fa:	92 e0       	ldi	r25, 0x02	; 2
     2fc:	9f 93       	push	r25
     2fe:	8f 93       	push	r24
     300:	1f 92       	push	r1
     302:	80 e2       	ldi	r24, 0x20	; 32
     304:	8f 93       	push	r24
     306:	ce 01       	movw	r24, r28
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	5c 01       	movw	r10, r24
     30c:	9f 93       	push	r25
     30e:	8f 93       	push	r24
     310:	9f d4       	rcall	.+2366   	; 0xc50 <snprintf>
		print(debug_buf);
     312:	c5 01       	movw	r24, r10
     314:	28 d4       	rcall	.+2128   	; 0xb66 <print>
     316:	f8 01       	movw	r30, r16
		TWI_write(message[i]);
     318:	80 81       	ld	r24, Z
     31a:	a6 df       	rcall	.-180    	; 0x268 <TWI_write>
     31c:	d3 94       	inc	r13
     31e:	0f b6       	in	r0, 0x3f	; 63
	TWI_write(SLAVE_ADDRESS << 1);
	print("TWI: Slave address sent");

	// Send data byte by byte from the provided message
	char debug_buf[32];
	for (uint8_t i = 0; i < strlen(message); i++) {
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	8d 2d       	mov	r24, r13
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	f7 01       	movw	r30, r14
     32e:	01 90       	ld	r0, Z+
     330:	00 20       	and	r0, r0
     332:	e9 f7       	brne	.-6      	; 0x32e <send_TWI_data+0x8e>
     334:	31 97       	sbiw	r30, 0x01	; 1
     336:	ee 19       	sub	r30, r14
     338:	ff 09       	sbc	r31, r15
     33a:	8e 17       	cp	r24, r30
     33c:	9f 07       	cpc	r25, r31
		snprintf(debug_buf, sizeof(debug_buf), "TWI: Sending byte %d: %c", i, message[i]);
		print(debug_buf);
		TWI_write(message[i]);
	}

	print("TWI: All bytes sent");
     33e:	98 f2       	brcs	.-90     	; 0x2e6 <send_TWI_data+0x46>
     340:	86 eb       	ldi	r24, 0xB6	; 182
     342:	92 e0       	ldi	r25, 0x02	; 2

	// Send stop condition
	TWI_stop();
     344:	10 d4       	rcall	.+2080   	; 0xb66 <print>
     346:	8c df       	rcall	.-232    	; 0x260 <TWI_stop>
	print("TWI: STOP condition sent");
     348:	8a ec       	ldi	r24, 0xCA	; 202
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	0c d4       	rcall	.+2072   	; 0xb66 <print>
     34e:	83 ee       	ldi	r24, 0xE3	; 227

	print("TWI: Transmission complete.");
     350:	92 e0       	ldi	r25, 0x02	; 2
     352:	09 d4       	rcall	.+2066   	; 0xb66 <print>
     354:	a0 96       	adiw	r28, 0x20	; 32
     356:	0f b6       	in	r0, 0x3f	; 63
}
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	bf 90       	pop	r11
     370:	af 90       	pop	r10
     372:	08 95       	ret

00000374 <elevator_reset_ui>:
     374:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <__data_end>
	current_state = IDLE;
}

void elevator_reset_ui(void) {
	current_state = IDLE;
	lcd_clrscr();
     378:	e0 d2       	rcall	.+1472   	; 0x93a <lcd_clrscr>
	lcd_puts("Choose floor:");
     37a:	8f ef       	ldi	r24, 0xFF	; 255
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	f2 d2       	rcall	.+1508   	; 0x964 <lcd_puts>
	lcd_gotoxy(0, 1);
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	d2 d2       	rcall	.+1444   	; 0x92a <lcd_gotoxy>
	print("Choose floor");
     386:	8d e0       	ldi	r24, 0x0D	; 13
     388:	93 e0       	ldi	r25, 0x03	; 3
     38a:	ed d3       	rcall	.+2010   	; 0xb66 <print>
     38c:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <emergency_handled>
	emergency_handled = 0; // Allow emergency button to trigger again
     390:	08 95       	ret

00000392 <close_door>:
     392:	83 e0       	ldi	r24, 0x03	; 3

	close_door();
}

void close_door(void) {
	current_state = DOOR_CLOSING;
     394:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__data_end>
	send_TWI_data("close_door");
     398:	8a e1       	ldi	r24, 0x1A	; 26
     39a:	93 e0       	ldi	r25, 0x03	; 3
     39c:	81 df       	rcall	.-254    	; 0x2a0 <send_TWI_data>

	lcd_clrscr();
     39e:	cd d2       	rcall	.+1434   	; 0x93a <lcd_clrscr>
     3a0:	85 e2       	ldi	r24, 0x25	; 37
	lcd_puts("Door closed");
     3a2:	93 e0       	ldi	r25, 0x03	; 3
     3a4:	df d2       	rcall	.+1470   	; 0x964 <lcd_puts>
     3a6:	85 e2       	ldi	r24, 0x25	; 37
	print("Door closed");
     3a8:	93 e0       	ldi	r25, 0x03	; 3
     3aa:	dd d3       	rcall	.+1978   	; 0xb66 <print>
     3ac:	2f ef       	ldi	r18, 0xFF	; 255
     3ae:	83 ed       	ldi	r24, 0xD3	; 211
     3b0:	90 e3       	ldi	r25, 0x30	; 48
     3b2:	21 50       	subi	r18, 0x01	; 1
     3b4:	80 40       	sbci	r24, 0x00	; 0
     3b6:	90 40       	sbci	r25, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <close_door+0x20>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <close_door+0x2a>
     3bc:	00 00       	nop
     3be:	da cf       	rjmp	.-76     	; 0x374 <elevator_reset_ui>

	_delay_ms(1000);
	elevator_reset_ui();
     3c0:	08 95       	ret

000003c2 <open_door>:
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__data_end>
	open_door();
}

void open_door(void) {
	current_state = DOOR_OPENING;
	send_TWI_data("open_door");
     3c8:	81 e3       	ldi	r24, 0x31	; 49
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	69 df       	rcall	.-302    	; 0x2a0 <send_TWI_data>

	lcd_clrscr();
     3ce:	b5 d2       	rcall	.+1386   	; 0x93a <lcd_clrscr>
     3d0:	8b e3       	ldi	r24, 0x3B	; 59
	lcd_puts("Door opened");
     3d2:	93 e0       	ldi	r25, 0x03	; 3
     3d4:	c7 d2       	rcall	.+1422   	; 0x964 <lcd_puts>
     3d6:	8b e3       	ldi	r24, 0x3B	; 59
	print("Door opened");
     3d8:	93 e0       	ldi	r25, 0x03	; 3
     3da:	c5 d3       	rcall	.+1930   	; 0xb66 <print>
     3dc:	2f ef       	ldi	r18, 0xFF	; 255
     3de:	83 e2       	ldi	r24, 0x23	; 35
     3e0:	94 ef       	ldi	r25, 0xF4	; 244
     3e2:	21 50       	subi	r18, 0x01	; 1
     3e4:	80 40       	sbci	r24, 0x00	; 0
     3e6:	90 40       	sbci	r25, 0x00	; 0
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <open_door+0x20>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <open_door+0x2a>
     3ec:	00 00       	nop
     3ee:	d1 cf       	rjmp	.-94     	; 0x392 <close_door>

	_delay_ms(5000);  // Door open duration

	close_door();
     3f0:	08 95       	ret

000003f2 <emergency_stop>:
     3f2:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <emergency_handled>
	elevator_reset_ui();
}

// This is called via ISR when button is pressed
void emergency_stop(void) {
	if (emergency_handled) {
     3f6:	81 11       	cpse	r24, r1
     3f8:	1a c0       	rjmp	.+52     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		return; // Already handled, ignore
	}

	emergency_handled = 1; // Lock emergency handler
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <emergency_handled>

	current_state = EMERGENCY;
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__data_end>
	send_TWI_data("emergency");
     406:	87 e4       	ldi	r24, 0x47	; 71
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	4a df       	rcall	.-364    	; 0x2a0 <send_TWI_data>

	lcd_clrscr();
     40c:	96 d2       	rcall	.+1324   	; 0x93a <lcd_clrscr>
     40e:	81 e5       	ldi	r24, 0x51	; 81
	lcd_puts("EMERGENCY");
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	a8 d2       	rcall	.+1360   	; 0x964 <lcd_puts>
     414:	81 e5       	ldi	r24, 0x51	; 81
	print("EMERGENCY");
     416:	93 e0       	ldi	r25, 0x03	; 3
     418:	a6 d3       	rcall	.+1868   	; 0xb66 <print>
     41a:	2f ef       	ldi	r18, 0xFF	; 255
     41c:	8f e4       	ldi	r24, 0x4F	; 79
     41e:	93 ec       	ldi	r25, 0xC3	; 195
     420:	21 50       	subi	r18, 0x01	; 1
     422:	80 40       	sbci	r24, 0x00	; 0
     424:	90 40       	sbci	r25, 0x00	; 0
     426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     42a:	00 00       	nop
     42c:	ca cf       	rjmp	.-108    	; 0x3c2 <open_door>
	_delay_ms(4000);
	open_door();  // open_door() will call close_door() automatically
     42e:	08 95       	ret

00000430 <handle_fault>:
     430:	85 e0       	ldi	r24, 0x05	; 5
     432:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__data_end>
	
}

void handle_fault(void) {
	current_state = FAULT;
	send_TWI_data("fault");
     436:	8b e5       	ldi	r24, 0x5B	; 91
     438:	93 e0       	ldi	r25, 0x03	; 3
     43a:	32 df       	rcall	.-412    	; 0x2a0 <send_TWI_data>

	lcd_clrscr();
     43c:	7e d2       	rcall	.+1276   	; 0x93a <lcd_clrscr>
     43e:	81 e6       	ldi	r24, 0x61	; 97
	lcd_puts("Fault: Same floor");
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	90 d2       	rcall	.+1312   	; 0x964 <lcd_puts>
     444:	81 e6       	ldi	r24, 0x61	; 97
	print("Fault: Same floor");
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	8e d3       	rcall	.+1820   	; 0xb66 <print>
     44a:	2f ef       	ldi	r18, 0xFF	; 255
     44c:	87 ea       	ldi	r24, 0xA7	; 167
     44e:	91 e6       	ldi	r25, 0x61	; 97
     450:	21 50       	subi	r18, 0x01	; 1
     452:	80 40       	sbci	r24, 0x00	; 0
     454:	90 40       	sbci	r25, 0x00	; 0
     456:	e1 f7       	brne	.-8      	; 0x450 <handle_fault+0x20>
     458:	00 c0       	rjmp	.+0      	; 0x45a <handle_fault+0x2a>
     45a:	00 00       	nop
     45c:	8b cf       	rjmp	.-234    	; 0x374 <elevator_reset_ui>

	_delay_ms(2000);
	elevator_reset_ui();
     45e:	08 95       	ret

00000460 <display_floor>:
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
}

void display_floor(uint8_t floor) {
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	ee 97       	sbiw	r28, 0x3e	; 62
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	f8 2e       	mov	r15, r24
	lcd_clrscr();
     47c:	5e d2       	rcall	.+1212   	; 0x93a <lcd_clrscr>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     47e:	4a e0       	ldi	r20, 0x0A	; 10
     480:	be 01       	movw	r22, r28
     482:	6f 5f       	subi	r22, 0xFF	; 255
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	8f 2d       	mov	r24, r15
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	a4 d3       	rcall	.+1864   	; 0xbd4 <__itoa_ncheck>

	char floor_str[4];
	itoa(floor, floor_str, 10);

	lcd_gotoxy(0, 0);
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	4c d2       	rcall	.+1176   	; 0x92a <lcd_gotoxy>
	lcd_puts("Floor: ");
     492:	8b e9       	ldi	r24, 0x9B	; 155
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	66 d2       	rcall	.+1228   	; 0x964 <lcd_puts>
	lcd_puts(floor_str);
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	63 d2       	rcall	.+1222   	; 0x964 <lcd_puts>

	lcd_gotoxy(0, 1);
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	43 d2       	rcall	.+1158   	; 0x92a <lcd_gotoxy>
     4a4:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <__data_end>
	const char* state_str = "";

	switch (current_state) {
     4a8:	84 30       	cpi	r24, 0x04	; 4
     4aa:	38 f4       	brcc	.+14     	; 0x4ba <display_floor+0x5a>
     4ac:	82 30       	cpi	r24, 0x02	; 2
     4ae:	a0 f5       	brcc	.+104    	; 0x518 <display_floor+0xb8>
     4b0:	88 23       	and	r24, r24
     4b2:	51 f0       	breq	.+20     	; 0x4c8 <display_floor+0x68>
     4b4:	81 30       	cpi	r24, 0x01	; 1
     4b6:	71 f0       	breq	.+28     	; 0x4d4 <display_floor+0x74>
     4b8:	45 c0       	rjmp	.+138    	; 0x544 <display_floor+0xe4>
     4ba:	84 30       	cpi	r24, 0x04	; 4
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <display_floor+0x60>
     4be:	36 c0       	rjmp	.+108    	; 0x52c <display_floor+0xcc>
     4c0:	85 30       	cpi	r24, 0x05	; 5
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <display_floor+0x66>
     4c4:	39 c0       	rjmp	.+114    	; 0x538 <display_floor+0xd8>
     4c6:	3e c0       	rjmp	.+124    	; 0x544 <display_floor+0xe4>
		case IDLE:
		state_str = "IDLE";
		lcd_puts("Choose floor:");
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	4b d2       	rcall	.+1174   	; 0x964 <lcd_puts>
	lcd_gotoxy(0, 1);
	const char* state_str = "";

	switch (current_state) {
		case IDLE:
		state_str = "IDLE";
     4ce:	09 e8       	ldi	r16, 0x89	; 137
     4d0:	13 e0       	ldi	r17, 0x03	; 3
		lcd_puts("Choose floor:");
		break;
     4d2:	3a c0       	rjmp	.+116    	; 0x548 <display_floor+0xe8>

		case MOVING: {
			state_str = "MOVING";

			// Line 1: Show current floor
			lcd_puts("Floor: ");
     4d4:	8b e9       	ldi	r24, 0x9B	; 155
     4d6:	93 e0       	ldi	r25, 0x03	; 3
     4d8:	45 d2       	rcall	.+1162   	; 0x964 <lcd_puts>
			char current_str[4];
			itoa(current_floor, current_str, 10);
     4da:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <current_floor>
     4de:	4a e0       	ldi	r20, 0x0A	; 10
     4e0:	be 01       	movw	r22, r28
     4e2:	65 5c       	subi	r22, 0xC5	; 197
     4e4:	7f 4f       	sbci	r23, 0xFF	; 255
     4e6:	90 e0       	ldi	r25, 0x00	; 0
			lcd_puts(current_str);
     4e8:	75 d3       	rcall	.+1770   	; 0xbd4 <__itoa_ncheck>
     4ea:	ce 01       	movw	r24, r28
     4ec:	cb 96       	adiw	r24, 0x3b	; 59
     4ee:	3a d2       	rcall	.+1140   	; 0x964 <lcd_puts>

			// Line 2: Show target floor
			lcd_gotoxy(0, 1);
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	1a d2       	rcall	.+1076   	; 0x92a <lcd_gotoxy>
			lcd_puts("Target: ");
     4f6:	83 ea       	ldi	r24, 0xA3	; 163
     4f8:	93 e0       	ldi	r25, 0x03	; 3
     4fa:	34 d2       	rcall	.+1128   	; 0x964 <lcd_puts>
			char target_str[4];
			itoa(target_floor, target_str, 10); // Use a simple target_floor variable
     4fc:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <target_floor>
     500:	4a e0       	ldi	r20, 0x0A	; 10
     502:	be 01       	movw	r22, r28
     504:	69 5c       	subi	r22, 0xC9	; 201
     506:	7f 4f       	sbci	r23, 0xFF	; 255
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	64 d3       	rcall	.+1736   	; 0xbd4 <__itoa_ncheck>
     50c:	ce 01       	movw	r24, r28
			lcd_puts(target_str);
     50e:	c7 96       	adiw	r24, 0x37	; 55
     510:	29 d2       	rcall	.+1106   	; 0x964 <lcd_puts>
     512:	0e e8       	ldi	r16, 0x8E	; 142
		state_str = "IDLE";
		lcd_puts("Choose floor:");
		break;

		case MOVING: {
			state_str = "MOVING";
     514:	13 e0       	ldi	r17, 0x03	; 3
     516:	18 c0       	rjmp	.+48     	; 0x548 <display_floor+0xe8>
			break;
		}

		case DOOR_OPENING:
		case DOOR_CLOSING:
		state_str = (current_state == DOOR_OPENING) ? "DOOR OPEN" : "DOOR CLOSED";
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	19 f4       	brne	.+6      	; 0x522 <display_floor+0xc2>
     51c:	03 e7       	ldi	r16, 0x73	; 115
     51e:	13 e0       	ldi	r17, 0x03	; 3
     520:	02 c0       	rjmp	.+4      	; 0x526 <display_floor+0xc6>
     522:	0d e7       	ldi	r16, 0x7D	; 125
		lcd_puts(state_str);
     524:	13 e0       	ldi	r17, 0x03	; 3
     526:	c8 01       	movw	r24, r16
     528:	1d d2       	rcall	.+1082   	; 0x964 <lcd_puts>
		break;
     52a:	0e c0       	rjmp	.+28     	; 0x548 <display_floor+0xe8>

		case EMERGENCY:
		state_str = "EMERGENCY";
		lcd_puts("EMERGENCY");
     52c:	81 e5       	ldi	r24, 0x51	; 81
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	19 d2       	rcall	.+1074   	; 0x964 <lcd_puts>
     532:	01 e5       	ldi	r16, 0x51	; 81
		state_str = (current_state == DOOR_OPENING) ? "DOOR OPEN" : "DOOR CLOSED";
		lcd_puts(state_str);
		break;

		case EMERGENCY:
		state_str = "EMERGENCY";
     534:	13 e0       	ldi	r17, 0x03	; 3
     536:	08 c0       	rjmp	.+16     	; 0x548 <display_floor+0xe8>
		lcd_puts("EMERGENCY");
		break;
     538:	8c ea       	ldi	r24, 0xAC	; 172

		case FAULT:
		state_str = "FAULT";
		lcd_puts("FAULT: Same floor");
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	13 d2       	rcall	.+1062   	; 0x964 <lcd_puts>
     53e:	05 e9       	ldi	r16, 0x95	; 149
     540:	13 e0       	ldi	r17, 0x03	; 3
		state_str = "EMERGENCY";
		lcd_puts("EMERGENCY");
		break;

		case FAULT:
		state_str = "FAULT";
     542:	02 c0       	rjmp	.+4      	; 0x548 <display_floor+0xe8>
     544:	08 ef       	ldi	r16, 0xF8	; 248
		lcd_puts("FAULT: Same floor");
		break;
     546:	13 e0       	ldi	r17, 0x03	; 3
	lcd_gotoxy(0, 0);
	lcd_puts("Floor: ");
	lcd_puts(floor_str);

	lcd_gotoxy(0, 1);
	const char* state_str = "";
     548:	1f 93       	push	r17
		break;
	}

	// Print debug info over UART
	char debug_msg[50];
	snprintf(debug_msg, sizeof(debug_msg), "Floor: %d | State: %s", floor, state_str);
     54a:	0f 93       	push	r16
     54c:	1f 92       	push	r1
     54e:	ff 92       	push	r15
     550:	8e eb       	ldi	r24, 0xBE	; 190
     552:	93 e0       	ldi	r25, 0x03	; 3
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	1f 92       	push	r1
     55a:	82 e3       	ldi	r24, 0x32	; 50
     55c:	8f 93       	push	r24
     55e:	8e 01       	movw	r16, r28
     560:	0b 5f       	subi	r16, 0xFB	; 251
     562:	1f 4f       	sbci	r17, 0xFF	; 255
     564:	1f 93       	push	r17
     566:	0f 93       	push	r16
     568:	73 d3       	rcall	.+1766   	; 0xc50 <snprintf>
     56a:	c8 01       	movw	r24, r16
	print(debug_msg);
     56c:	fc d2       	rcall	.+1528   	; 0xb66 <print>
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
}
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
     578:	ee 96       	adiw	r28, 0x3e	; 62
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	de bf       	out	0x3e, r29	; 62
     580:	0f be       	out	0x3f, r0	; 63
     582:	cd bf       	out	0x3d, r28	; 61
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	08 95       	ret

00000590 <move_elevator>:
     590:	cf 93       	push	r28
     592:	c8 2f       	mov	r28, r24
	print("Choose floor");
	emergency_handled = 0; // Allow emergency button to trigger again
}

void move_elevator(uint8_t floor) {
	printf("Current floor: %d\n", current_floor);
     594:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <current_floor>
     598:	1f 92       	push	r1
     59a:	8f 93       	push	r24
     59c:	84 ed       	ldi	r24, 0xD4	; 212
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	42 d3       	rcall	.+1668   	; 0xc2a <printf>
	printf("Target floor: %d\n", floor);
     5a6:	1f 92       	push	r1
     5a8:	cf 93       	push	r28
     5aa:	87 ee       	ldi	r24, 0xE7	; 231
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	3b d3       	rcall	.+1654   	; 0xc2a <printf>
	
	send_TWI_data("moving");
     5b4:	89 ef       	ldi	r24, 0xF9	; 249
     5b6:	93 e0       	ldi	r25, 0x03	; 3
     5b8:	73 de       	rcall	.-794    	; 0x2a0 <send_TWI_data>

	if (floor == current_floor) {
     5ba:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <current_floor>
     5be:	2d b7       	in	r18, 0x3d	; 61
     5c0:	3e b7       	in	r19, 0x3e	; 62
     5c2:	28 5f       	subi	r18, 0xF8	; 248
     5c4:	3f 4f       	sbci	r19, 0xFF	; 255
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	3e bf       	out	0x3e, r19	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	2d bf       	out	0x3d, r18	; 61
     5d0:	c8 13       	cpse	r28, r24
		handle_fault();
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <move_elevator+0x48>
     5d4:	2d df       	rcall	.-422    	; 0x430 <handle_fault>
		return;
     5d6:	1e c0       	rjmp	.+60     	; 0x614 <move_elevator+0x84>
	}

	target_floor = floor;
     5d8:	c0 93 61 04 	sts	0x0461, r28	; 0x800461 <target_floor>
	current_state = MOVING;
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <__data_end>
	display_floor(current_floor);
     5e2:	3e df       	rcall	.-388    	; 0x460 <display_floor>

	while (current_floor != floor) {
     5e4:	12 c0       	rjmp	.+36     	; 0x60a <move_elevator+0x7a>
		current_floor += (floor > current_floor) ? 1 : -1;
     5e6:	8c 17       	cp	r24, r28
     5e8:	10 f4       	brcc	.+4      	; 0x5ee <move_elevator+0x5e>
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <move_elevator+0x60>
     5ee:	9f ef       	ldi	r25, 0xFF	; 255
     5f0:	89 0f       	add	r24, r25
     5f2:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <current_floor>
		display_floor(current_floor);
     5f6:	34 df       	rcall	.-408    	; 0x460 <display_floor>
     5f8:	3f ef       	ldi	r19, 0xFF	; 255
     5fa:	87 e8       	ldi	r24, 0x87	; 135
     5fc:	93 e1       	ldi	r25, 0x13	; 19
     5fe:	31 50       	subi	r19, 0x01	; 1
     600:	80 40       	sbci	r24, 0x00	; 0
     602:	90 40       	sbci	r25, 0x00	; 0
     604:	e1 f7       	brne	.-8      	; 0x5fe <move_elevator+0x6e>
     606:	00 c0       	rjmp	.+0      	; 0x608 <move_elevator+0x78>

	target_floor = floor;
	current_state = MOVING;
	display_floor(current_floor);

	while (current_floor != floor) {
     608:	00 00       	nop
     60a:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <current_floor>
     60e:	c8 13       	cpse	r28, r24
		current_floor += (floor > current_floor) ? 1 : -1;
		display_floor(current_floor);
		_delay_ms(TIME_PER_FLOOR);
	}

	open_door();
     610:	ea cf       	rjmp	.-44     	; 0x5e6 <move_elevator+0x56>
     612:	d7 de       	rcall	.-594    	; 0x3c2 <open_door>
}
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <isr_init>:
 * allowing the code to temporarily pause its current execution and jump to a specific task when an interrupt occurs.
 * This eliminates delays and ensures faster system response.
 */

void isr_init(void) {
	sei(); // Enable global interrupts
     618:	78 94       	sei
     61a:	08 95       	ret

0000061c <enable_external_interrupt>:
}

void enable_external_interrupt(uint8_t pin) {
	if (pin == EMERGENCY_BUTTON_PIN) {
     61c:	84 30       	cpi	r24, 0x04	; 4
     61e:	41 f4       	brne	.+16     	; 0x630 <enable_external_interrupt+0x14>
		EICRB |= (1 << ISC41);  // Falling edge trigger for INT4
     620:	ea e6       	ldi	r30, 0x6A	; 106
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	82 60       	ori	r24, 0x02	; 2
     628:	80 83       	st	Z, r24
		EIMSK |= (1 << INT4);   // Enable INT4
     62a:	8d b3       	in	r24, 0x1d	; 29
     62c:	80 61       	ori	r24, 0x10	; 16
     62e:	8d bb       	out	0x1d, r24	; 29
     630:	08 95       	ret

00000632 <__vector_5>:
	}
}

// ISR for Emergency Stop Button
ISR(INT4_vect) {
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	0b b6       	in	r0, 0x3b	; 59
     63e:	0f 92       	push	r0
     640:	2f 93       	push	r18
     642:	3f 93       	push	r19
     644:	4f 93       	push	r20
     646:	5f 93       	push	r21
     648:	6f 93       	push	r22
     64a:	7f 93       	push	r23
     64c:	8f 93       	push	r24
     64e:	9f 93       	push	r25
     650:	af 93       	push	r26
     652:	bf 93       	push	r27
     654:	ef 93       	push	r30
     656:	ff 93       	push	r31
	emergency_stop();
     658:	cc de       	rcall	.-616    	; 0x3f2 <emergency_stop>
}
     65a:	ff 91       	pop	r31
     65c:	ef 91       	pop	r30
     65e:	bf 91       	pop	r27
     660:	af 91       	pop	r26
     662:	9f 91       	pop	r25
     664:	8f 91       	pop	r24
     666:	7f 91       	pop	r23
     668:	6f 91       	pop	r22
     66a:	5f 91       	pop	r21
     66c:	4f 91       	pop	r20
     66e:	3f 91       	pop	r19
     670:	2f 91       	pop	r18
     672:	0f 90       	pop	r0
     674:	0b be       	out	0x3b, r0	; 59
     676:	0f 90       	pop	r0
     678:	0f be       	out	0x3f, r0	; 63
     67a:	0f 90       	pop	r0
     67c:	1f 90       	pop	r1
     67e:	18 95       	reti

00000680 <keypad_ScanKey>:
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     680:	20 e0       	ldi	r18, 0x00	; 0
        4.Return the ScanCode(Combination of ROW & COL) for decoding the key.
 ***************************************************************************************************/
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;
     682:	9f ee       	ldi	r25, 0xEF	; 239

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     684:	10 c0       	rjmp	.+32     	; 0x6a6 <keypad_ScanKey+0x26>
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
     686:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
     68a:	e9 ef       	ldi	r30, 0xF9	; 249
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <keypad_ScanKey+0xe>
     692:	00 c0       	rjmp	.+0      	; 0x694 <keypad_ScanKey+0x14>
     694:	00 00       	nop
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
     696:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     69a:	8f 70       	andi	r24, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
     69c:	8f 30       	cpi	r24, 0x0F	; 15
     69e:	29 f4       	brne	.+10     	; 0x6aa <keypad_ScanKey+0x2a>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
     6a0:	99 0f       	add	r25, r25
     6a2:	9f 5f       	subi	r25, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     6a4:	2f 5f       	subi	r18, 0xFF	; 255
     6a6:	24 30       	cpi	r18, 0x04	; 4
     6a8:	70 f3       	brcs	.-36     	; 0x686 <keypad_ScanKey+0x6>
		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
	}
	var_keyPress_u8 = var_keyPress_u8 + (var_keyScanCode_u8 & 0xf0); // Return the row and COL status to decode the key
     6aa:	90 7f       	andi	r25, 0xF0	; 240
	return(var_keyPress_u8);
}
     6ac:	89 0f       	add	r24, r25
     6ae:	08 95       	ret

000006b0 <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
     6b0:	80 ef       	ldi	r24, 0xF0	; 240
     6b2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
     6b6:	08 95       	ret

000006b8 <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
     6b8:	8f e0       	ldi	r24, 0x0F	; 15
     6ba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
     6be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     6c2:	8f 70       	andi	r24, 0x0F	; 15
		}while(key!=0x0F);
     6c4:	8f 30       	cpi	r24, 0x0F	; 15
     6c6:	c1 f7       	brne	.-16     	; 0x6b8 <KEYPAD_WaitForKeyRelease>
     6c8:	89 ef       	ldi	r24, 0xF9	; 249
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <KEYPAD_WaitForKeyRelease+0x14>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <KEYPAD_WaitForKeyRelease+0x1a>
     6d2:	00 00       	nop

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
     6d4:	8f e0       	ldi	r24, 0x0F	; 15
     6d6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
     6da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     6de:	8f 70       	andi	r24, 0x0F	; 15
	}while(key!=0x0F);   // Wait till the Key is released,
     6e0:	8f 30       	cpi	r24, 0x0F	; 15
     6e2:	51 f7       	brne	.-44     	; 0x6b8 <KEYPAD_WaitForKeyRelease>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
     6e4:	08 95       	ret

000006e6 <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
     6e6:	8f e0       	ldi	r24, 0x0F	; 15
     6e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
     6ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     6f0:	8f 70       	andi	r24, 0x0F	; 15
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
     6f2:	8f 30       	cpi	r24, 0x0F	; 15
     6f4:	c1 f3       	breq	.-16     	; 0x6e6 <KEYPAD_WaitForKeyPress>
     6f6:	89 ef       	ldi	r24, 0xF9	; 249
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <KEYPAD_WaitForKeyPress+0x14>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <KEYPAD_WaitForKeyPress+0x1a>
     700:	00 00       	nop
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
     702:	8f e0       	ldi	r24, 0x0F	; 15
     704:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
     708:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     70c:	8f 70       	andi	r24, 0x0F	; 15

	}while(var_keyPress_u8==0x0F);
     70e:	8f 30       	cpi	r24, 0x0F	; 15
     710:	51 f3       	breq	.-44     	; 0x6e6 <KEYPAD_WaitForKeyPress>
}
     712:	08 95       	ret

00000714 <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
     714:	d1 df       	rcall	.-94     	; 0x6b8 <KEYPAD_WaitForKeyRelease>
     716:	89 ef       	ldi	r24, 0xF9	; 249
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <KEYPAD_GetKey+0x6>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <KEYPAD_GetKey+0xc>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
     720:	00 00       	nop
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
     722:	e1 df       	rcall	.-62     	; 0x6e6 <KEYPAD_WaitForKeyPress>
     724:	ad df       	rcall	.-166    	; 0x680 <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	fc 01       	movw	r30, r24
     72a:	e7 57       	subi	r30, 0x77	; 119
     72c:	f1 09       	sbc	r31, r1
     72e:	e8 37       	cpi	r30, 0x78	; 120
     730:	f1 05       	cpc	r31, r1
     732:	18 f5       	brcc	.+70     	; 0x77a <KEYPAD_GetKey+0x66>
     734:	88 27       	eor	r24, r24
     736:	ee 58       	subi	r30, 0x8E	; 142
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	8f 4f       	sbci	r24, 0xFF	; 255
     73c:	26 c2       	rjmp	.+1100   	; 0xb8a <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
     73e:	8a e2       	ldi	r24, 0x2A	; 42
     740:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
     742:	84 e3       	ldi	r24, 0x34	; 52
     744:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
     746:	81 e3       	ldi	r24, 0x31	; 49
     748:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
     74a:	80 e3       	ldi	r24, 0x30	; 48
     74c:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
     74e:	88 e3       	ldi	r24, 0x38	; 56
     750:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
     752:	85 e3       	ldi	r24, 0x35	; 53
     754:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
     756:	82 e3       	ldi	r24, 0x32	; 50
     758:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
     75a:	83 e2       	ldi	r24, 0x23	; 35
     75c:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
     75e:	89 e3       	ldi	r24, 0x39	; 57
     760:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
     762:	86 e3       	ldi	r24, 0x36	; 54
     764:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
     766:	83 e3       	ldi	r24, 0x33	; 51
     768:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
     76a:	84 e4       	ldi	r24, 0x44	; 68
     76c:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
     76e:	83 e4       	ldi	r24, 0x43	; 67
     770:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
     772:	82 e4       	ldi	r24, 0x42	; 66
     774:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
     776:	81 e4       	ldi	r24, 0x41	; 65
     778:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
     77a:	8a e7       	ldi	r24, 0x7A	; 122
     77c:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
     77e:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
     780:	08 95       	ret

00000782 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     782:	85 b1       	in	r24, 0x05	; 5
     784:	80 62       	ori	r24, 0x20	; 32
     786:	85 b9       	out	0x05, r24	; 5
     788:	00 00       	nop
     78a:	85 b1       	in	r24, 0x05	; 5
     78c:	8f 7d       	andi	r24, 0xDF	; 223
     78e:	85 b9       	out	0x05, r24	; 5
     790:	08 95       	ret

00000792 <lcd_write>:
     792:	cf 93       	push	r28
     794:	c8 2f       	mov	r28, r24
     796:	66 23       	and	r22, r22
     798:	31 f0       	breq	.+12     	; 0x7a6 <lcd_write+0x14>
     79a:	e2 e0       	ldi	r30, 0x02	; 2
     79c:	f1 e0       	ldi	r31, 0x01	; 1
     79e:	80 81       	ld	r24, Z
     7a0:	80 64       	ori	r24, 0x40	; 64
     7a2:	80 83       	st	Z, r24
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <lcd_write+0x1e>
     7a6:	e2 e0       	ldi	r30, 0x02	; 2
     7a8:	f1 e0       	ldi	r31, 0x01	; 1
     7aa:	80 81       	ld	r24, Z
     7ac:	8f 7b       	andi	r24, 0xBF	; 191
     7ae:	80 83       	st	Z, r24
     7b0:	85 b1       	in	r24, 0x05	; 5
     7b2:	8f 7e       	andi	r24, 0xEF	; 239
     7b4:	85 b9       	out	0x05, r24	; 5
     7b6:	8d b1       	in	r24, 0x0d	; 13
     7b8:	80 62       	ori	r24, 0x20	; 32
     7ba:	8d b9       	out	0x0d, r24	; 13
     7bc:	83 b3       	in	r24, 0x13	; 19
     7be:	80 62       	ori	r24, 0x20	; 32
     7c0:	83 bb       	out	0x13, r24	; 19
     7c2:	8d b1       	in	r24, 0x0d	; 13
     7c4:	88 60       	ori	r24, 0x08	; 8
     7c6:	8d b9       	out	0x0d, r24	; 13
     7c8:	e1 e0       	ldi	r30, 0x01	; 1
     7ca:	f1 e0       	ldi	r31, 0x01	; 1
     7cc:	80 81       	ld	r24, Z
     7ce:	88 60       	ori	r24, 0x08	; 8
     7d0:	80 83       	st	Z, r24
     7d2:	e2 e0       	ldi	r30, 0x02	; 2
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	80 81       	ld	r24, Z
     7d8:	87 7f       	andi	r24, 0xF7	; 247
     7da:	80 83       	st	Z, r24
     7dc:	8e b1       	in	r24, 0x0e	; 14
     7de:	87 7f       	andi	r24, 0xF7	; 247
     7e0:	8e b9       	out	0x0e, r24	; 14
     7e2:	84 b3       	in	r24, 0x14	; 20
     7e4:	8f 7d       	andi	r24, 0xDF	; 223
     7e6:	84 bb       	out	0x14, r24	; 20
     7e8:	8e b1       	in	r24, 0x0e	; 14
     7ea:	8f 7d       	andi	r24, 0xDF	; 223
     7ec:	8e b9       	out	0x0e, r24	; 14
     7ee:	cc 23       	and	r28, r28
     7f0:	1c f4       	brge	.+6      	; 0x7f8 <lcd_write+0x66>
     7f2:	80 81       	ld	r24, Z
     7f4:	88 60       	ori	r24, 0x08	; 8
     7f6:	80 83       	st	Z, r24
     7f8:	c6 ff       	sbrs	r28, 6
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <lcd_write+0x70>
     7fc:	8e b1       	in	r24, 0x0e	; 14
     7fe:	88 60       	ori	r24, 0x08	; 8
     800:	8e b9       	out	0x0e, r24	; 14
     802:	c5 ff       	sbrs	r28, 5
     804:	03 c0       	rjmp	.+6      	; 0x80c <lcd_write+0x7a>
     806:	84 b3       	in	r24, 0x14	; 20
     808:	80 62       	ori	r24, 0x20	; 32
     80a:	84 bb       	out	0x14, r24	; 20
     80c:	c4 ff       	sbrs	r28, 4
     80e:	03 c0       	rjmp	.+6      	; 0x816 <lcd_write+0x84>
     810:	8e b1       	in	r24, 0x0e	; 14
     812:	80 62       	ori	r24, 0x20	; 32
     814:	8e b9       	out	0x0e, r24	; 14
     816:	b5 df       	rcall	.-150    	; 0x782 <toggle_e>
     818:	e2 e0       	ldi	r30, 0x02	; 2
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	80 81       	ld	r24, Z
     81e:	87 7f       	andi	r24, 0xF7	; 247
     820:	80 83       	st	Z, r24
     822:	8e b1       	in	r24, 0x0e	; 14
     824:	87 7f       	andi	r24, 0xF7	; 247
     826:	8e b9       	out	0x0e, r24	; 14
     828:	84 b3       	in	r24, 0x14	; 20
     82a:	8f 7d       	andi	r24, 0xDF	; 223
     82c:	84 bb       	out	0x14, r24	; 20
     82e:	8e b1       	in	r24, 0x0e	; 14
     830:	8f 7d       	andi	r24, 0xDF	; 223
     832:	8e b9       	out	0x0e, r24	; 14
     834:	c3 ff       	sbrs	r28, 3
     836:	03 c0       	rjmp	.+6      	; 0x83e <lcd_write+0xac>
     838:	80 81       	ld	r24, Z
     83a:	88 60       	ori	r24, 0x08	; 8
     83c:	80 83       	st	Z, r24
     83e:	c2 ff       	sbrs	r28, 2
     840:	03 c0       	rjmp	.+6      	; 0x848 <lcd_write+0xb6>
     842:	8e b1       	in	r24, 0x0e	; 14
     844:	88 60       	ori	r24, 0x08	; 8
     846:	8e b9       	out	0x0e, r24	; 14
     848:	c1 ff       	sbrs	r28, 1
     84a:	03 c0       	rjmp	.+6      	; 0x852 <lcd_write+0xc0>
     84c:	84 b3       	in	r24, 0x14	; 20
     84e:	80 62       	ori	r24, 0x20	; 32
     850:	84 bb       	out	0x14, r24	; 20
     852:	c0 ff       	sbrs	r28, 0
     854:	03 c0       	rjmp	.+6      	; 0x85c <lcd_write+0xca>
     856:	8e b1       	in	r24, 0x0e	; 14
     858:	80 62       	ori	r24, 0x20	; 32
     85a:	8e b9       	out	0x0e, r24	; 14
     85c:	92 df       	rcall	.-220    	; 0x782 <toggle_e>
     85e:	8e b1       	in	r24, 0x0e	; 14
     860:	80 62       	ori	r24, 0x20	; 32
     862:	8e b9       	out	0x0e, r24	; 14
     864:	84 b3       	in	r24, 0x14	; 20
     866:	80 62       	ori	r24, 0x20	; 32
     868:	84 bb       	out	0x14, r24	; 20
     86a:	8e b1       	in	r24, 0x0e	; 14
     86c:	88 60       	ori	r24, 0x08	; 8
     86e:	8e b9       	out	0x0e, r24	; 14
     870:	e2 e0       	ldi	r30, 0x02	; 2
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	80 81       	ld	r24, Z
     876:	88 60       	ori	r24, 0x08	; 8
     878:	80 83       	st	Z, r24
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <lcd_read>:
     87e:	88 23       	and	r24, r24
     880:	31 f0       	breq	.+12     	; 0x88e <lcd_read+0x10>
     882:	e2 e0       	ldi	r30, 0x02	; 2
     884:	f1 e0       	ldi	r31, 0x01	; 1
     886:	80 81       	ld	r24, Z
     888:	80 64       	ori	r24, 0x40	; 64
     88a:	80 83       	st	Z, r24
     88c:	05 c0       	rjmp	.+10     	; 0x898 <lcd_read+0x1a>
     88e:	e2 e0       	ldi	r30, 0x02	; 2
     890:	f1 e0       	ldi	r31, 0x01	; 1
     892:	80 81       	ld	r24, Z
     894:	8f 7b       	andi	r24, 0xBF	; 191
     896:	80 83       	st	Z, r24
     898:	85 b1       	in	r24, 0x05	; 5
     89a:	80 61       	ori	r24, 0x10	; 16
     89c:	85 b9       	out	0x05, r24	; 5
     89e:	8d b1       	in	r24, 0x0d	; 13
     8a0:	8f 7d       	andi	r24, 0xDF	; 223
     8a2:	8d b9       	out	0x0d, r24	; 13
     8a4:	83 b3       	in	r24, 0x13	; 19
     8a6:	8f 7d       	andi	r24, 0xDF	; 223
     8a8:	83 bb       	out	0x13, r24	; 19
     8aa:	8d b1       	in	r24, 0x0d	; 13
     8ac:	87 7f       	andi	r24, 0xF7	; 247
     8ae:	8d b9       	out	0x0d, r24	; 13
     8b0:	e1 e0       	ldi	r30, 0x01	; 1
     8b2:	f1 e0       	ldi	r31, 0x01	; 1
     8b4:	80 81       	ld	r24, Z
     8b6:	87 7f       	andi	r24, 0xF7	; 247
     8b8:	80 83       	st	Z, r24
     8ba:	85 b1       	in	r24, 0x05	; 5
     8bc:	80 62       	ori	r24, 0x20	; 32
     8be:	85 b9       	out	0x05, r24	; 5
     8c0:	00 00       	nop
     8c2:	65 99       	sbic	0x0c, 5	; 12
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <lcd_read+0x4c>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <lcd_read+0x4e>
     8ca:	80 e1       	ldi	r24, 0x10	; 16
     8cc:	95 99       	sbic	0x12, 5	; 18
     8ce:	80 62       	ori	r24, 0x20	; 32
     8d0:	63 99       	sbic	0x0c, 3	; 12
     8d2:	80 64       	ori	r24, 0x40	; 64
     8d4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     8d8:	93 fd       	sbrc	r25, 3
     8da:	80 68       	ori	r24, 0x80	; 128
     8dc:	95 b1       	in	r25, 0x05	; 5
     8de:	9f 7d       	andi	r25, 0xDF	; 223
     8e0:	95 b9       	out	0x05, r25	; 5
     8e2:	00 00       	nop
     8e4:	95 b1       	in	r25, 0x05	; 5
     8e6:	90 62       	ori	r25, 0x20	; 32
     8e8:	95 b9       	out	0x05, r25	; 5
     8ea:	00 00       	nop
     8ec:	65 99       	sbic	0x0c, 5	; 12
     8ee:	81 60       	ori	r24, 0x01	; 1
     8f0:	95 99       	sbic	0x12, 5	; 18
     8f2:	82 60       	ori	r24, 0x02	; 2
     8f4:	63 99       	sbic	0x0c, 3	; 12
     8f6:	84 60       	ori	r24, 0x04	; 4
     8f8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     8fc:	93 fd       	sbrc	r25, 3
     8fe:	88 60       	ori	r24, 0x08	; 8
     900:	95 b1       	in	r25, 0x05	; 5
     902:	9f 7d       	andi	r25, 0xDF	; 223
     904:	95 b9       	out	0x05, r25	; 5
     906:	08 95       	ret

00000908 <lcd_waitbusy>:
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	b9 df       	rcall	.-142    	; 0x87e <lcd_read>
     90c:	88 23       	and	r24, r24
     90e:	e4 f3       	brlt	.-8      	; 0x908 <lcd_waitbusy>
     910:	00 c0       	rjmp	.+0      	; 0x912 <lcd_waitbusy+0xa>
     912:	00 c0       	rjmp	.+0      	; 0x914 <lcd_waitbusy+0xc>
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	b3 cf       	rjmp	.-154    	; 0x87e <lcd_read>
     918:	08 95       	ret

0000091a <lcd_command>:
     91a:	cf 93       	push	r28
     91c:	c8 2f       	mov	r28, r24
     91e:	f4 df       	rcall	.-24     	; 0x908 <lcd_waitbusy>
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	8c 2f       	mov	r24, r28
     924:	36 df       	rcall	.-404    	; 0x792 <lcd_write>
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <lcd_gotoxy>:
     92a:	61 11       	cpse	r22, r1
     92c:	03 c0       	rjmp	.+6      	; 0x934 <lcd_gotoxy+0xa>
     92e:	80 58       	subi	r24, 0x80	; 128
     930:	f4 cf       	rjmp	.-24     	; 0x91a <lcd_command>
     932:	08 95       	ret
     934:	80 54       	subi	r24, 0x40	; 64
     936:	f1 cf       	rjmp	.-30     	; 0x91a <lcd_command>
     938:	08 95       	ret

0000093a <lcd_clrscr>:
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	ee cf       	rjmp	.-36     	; 0x91a <lcd_command>
     93e:	08 95       	ret

00000940 <lcd_putc>:
     940:	cf 93       	push	r28
     942:	c8 2f       	mov	r28, r24
     944:	e1 df       	rcall	.-62     	; 0x908 <lcd_waitbusy>
     946:	ca 30       	cpi	r28, 0x0A	; 10
     948:	41 f4       	brne	.+16     	; 0x95a <lcd_putc+0x1a>
     94a:	80 34       	cpi	r24, 0x40	; 64
     94c:	10 f4       	brcc	.+4      	; 0x952 <lcd_putc+0x12>
     94e:	80 e4       	ldi	r24, 0x40	; 64
     950:	01 c0       	rjmp	.+2      	; 0x954 <lcd_putc+0x14>
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	80 58       	subi	r24, 0x80	; 128
     956:	e1 df       	rcall	.-62     	; 0x91a <lcd_command>
     958:	03 c0       	rjmp	.+6      	; 0x960 <lcd_putc+0x20>
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	8c 2f       	mov	r24, r28
     95e:	19 df       	rcall	.-462    	; 0x792 <lcd_write>
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <lcd_puts>:
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	fc 01       	movw	r30, r24
     96a:	02 c0       	rjmp	.+4      	; 0x970 <lcd_puts+0xc>
     96c:	e9 df       	rcall	.-46     	; 0x940 <lcd_putc>
     96e:	fe 01       	movw	r30, r28
     970:	ef 01       	movw	r28, r30
     972:	21 96       	adiw	r28, 0x01	; 1
     974:	80 81       	ld	r24, Z
     976:	81 11       	cpse	r24, r1
     978:	f9 cf       	rjmp	.-14     	; 0x96c <lcd_puts+0x8>
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     980:	cf 93       	push	r28
     982:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     984:	e1 e0       	ldi	r30, 0x01	; 1
     986:	f1 e0       	ldi	r31, 0x01	; 1
     988:	80 81       	ld	r24, Z
     98a:	80 64       	ori	r24, 0x40	; 64
     98c:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     98e:	84 b1       	in	r24, 0x04	; 4
     990:	80 61       	ori	r24, 0x10	; 16
     992:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     994:	84 b1       	in	r24, 0x04	; 4
     996:	80 62       	ori	r24, 0x20	; 32
     998:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     99a:	8d b1       	in	r24, 0x0d	; 13
     99c:	80 62       	ori	r24, 0x20	; 32
     99e:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     9a0:	83 b3       	in	r24, 0x13	; 19
     9a2:	80 62       	ori	r24, 0x20	; 32
     9a4:	83 bb       	out	0x13, r24	; 19
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     9a6:	8d b1       	in	r24, 0x0d	; 13
     9a8:	88 60       	ori	r24, 0x08	; 8
     9aa:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     9ac:	80 81       	ld	r24, Z
     9ae:	88 60       	ori	r24, 0x08	; 8
     9b0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b2:	8f e9       	ldi	r24, 0x9F	; 159
     9b4:	9f e0       	ldi	r25, 0x0F	; 15
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <lcd_init+0x36>
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <lcd_init+0x3c>
     9bc:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     9be:	84 b3       	in	r24, 0x14	; 20
     9c0:	80 62       	ori	r24, 0x20	; 32
     9c2:	84 bb       	out	0x14, r24	; 20
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     9c4:	8e b1       	in	r24, 0x0e	; 14
     9c6:	80 62       	ori	r24, 0x20	; 32
     9c8:	8e b9       	out	0x0e, r24	; 14
    lcd_e_toggle();
     9ca:	db de       	rcall	.-586    	; 0x782 <toggle_e>
     9cc:	81 ee       	ldi	r24, 0xE1	; 225
     9ce:	94 e0       	ldi	r25, 0x04	; 4
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <lcd_init+0x50>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <lcd_init+0x56>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     9d6:	00 00       	nop
     9d8:	d4 de       	rcall	.-600    	; 0x782 <toggle_e>
     9da:	95 e1       	ldi	r25, 0x15	; 21
     9dc:	9a 95       	dec	r25
     9de:	f1 f7       	brne	.-4      	; 0x9dc <lcd_init+0x5c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     9e0:	00 00       	nop
     9e2:	cf de       	rcall	.-610    	; 0x782 <toggle_e>
     9e4:	85 e1       	ldi	r24, 0x15	; 21
     9e6:	8a 95       	dec	r24
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <lcd_init+0x66>
     9ea:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     9ec:	8e b1       	in	r24, 0x0e	; 14
     9ee:	8f 7d       	andi	r24, 0xDF	; 223
    lcd_e_toggle();
     9f0:	8e b9       	out	0x0e, r24	; 14
     9f2:	c7 de       	rcall	.-626    	; 0x782 <toggle_e>
     9f4:	95 e1       	ldi	r25, 0x15	; 21
     9f6:	9a 95       	dec	r25
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <lcd_init+0x76>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     9fa:	00 00       	nop
     9fc:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     9fe:	8d df       	rcall	.-230    	; 0x91a <lcd_command>
     a00:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
     a02:	8b df       	rcall	.-234    	; 0x91a <lcd_command>
     a04:	9a df       	rcall	.-204    	; 0x93a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     a06:	86 e0       	ldi	r24, 0x06	; 6
     a08:	88 df       	rcall	.-240    	; 0x91a <lcd_command>
     a0a:	8c 2f       	mov	r24, r28
    lcd_command(dispAttr);                  /* display/cursor control       */
     a0c:	86 df       	rcall	.-244    	; 0x91a <lcd_command>
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <main>:
	return pressed;
}
*/

// Main function handles inputs and interrups. Elevator logic is in the controller file
int main(void) {
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	00 d0       	rcall	.+0      	; 0xa18 <main+0x6>
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
	uart_init(103); // UART for debug
     a1c:	87 e6       	ldi	r24, 0x67	; 103
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	89 d0       	rcall	.+274    	; 0xb34 <uart_init>
	lcd_init(LCD_DISP_ON);
     a22:	8c e0       	ldi	r24, 0x0C	; 12
	lcd_clrscr();
     a24:	ad df       	rcall	.-166    	; 0x980 <lcd_init>
	KEYPAD_Init();
     a26:	89 df       	rcall	.-238    	; 0x93a <lcd_clrscr>
     a28:	43 de       	rcall	.-890    	; 0x6b0 <KEYPAD_Init>
	TWI_init();
     a2a:	f5 db       	rcall	.-2070   	; 0x216 <TWI_init>
     a2c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a2e:	81 ee       	ldi	r24, 0xE1	; 225
     a30:	94 e0       	ldi	r25, 0x04	; 4
     a32:	21 50       	subi	r18, 0x01	; 1
     a34:	80 40       	sbci	r24, 0x00	; 0
     a36:	90 40       	sbci	r25, 0x00	; 0
     a38:	e1 f7       	brne	.-8      	; 0xa32 <main+0x20>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <main+0x2a>
	_delay_ms(100); // Add a small delay to ensure the screen clears
	lcd_puts("Hello world");
     a3c:	00 00       	nop
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	94 e0       	ldi	r25, 0x04	; 4
     a42:	90 df       	rcall	.-224    	; 0x964 <lcd_puts>
	
	elevator_reset_ui();  // Initial UI prompt
     a44:	97 dc       	rcall	.-1746   	; 0x374 <elevator_reset_ui>

	char input_buffer[3] = {0};  // Store up to 2 digits + null terminator
     a46:	19 82       	std	Y+1, r1	; 0x01
     a48:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t buffer_index = 0;
	
	
	// Set pin as input and enable internal pull-up to make ISR emergency system work
	DDRE &= ~(1 << EMERGENCY_BUTTON_PIN);    // Set PE4 as input
     a4a:	1b 82       	std	Y+3, r1	; 0x03
     a4c:	8d b1       	in	r24, 0x0d	; 13

	isr_init();
     a4e:	8f 7e       	andi	r24, 0xEF	; 239
     a50:	8d b9       	out	0x0d, r24	; 13
	enable_external_interrupt(EMERGENCY_BUTTON_PIN);
     a52:	e2 dd       	rcall	.-1084   	; 0x618 <isr_init>
     a54:	84 e0       	ldi	r24, 0x04	; 4
     a56:	e2 dd       	rcall	.-1084   	; 0x61c <enable_external_interrupt>
	lcd_puts("Hello world");
	
	elevator_reset_ui();  // Initial UI prompt

	char input_buffer[3] = {0};  // Store up to 2 digits + null terminator
	uint8_t buffer_index = 0;
     a58:	10 e0       	ldi	r17, 0x00	; 0

	isr_init();
	enable_external_interrupt(EMERGENCY_BUTTON_PIN);

	while (1) {
		uint8_t key = KEYPAD_GetKey();
     a5a:	5c de       	rcall	.-840    	; 0x714 <KEYPAD_GetKey>
     a5c:	90 ed       	ldi	r25, 0xD0	; 208

		if (key >= '0' && key <= '9' && buffer_index < 2) {
     a5e:	98 0f       	add	r25, r24
     a60:	9a 30       	cpi	r25, 0x0A	; 10
     a62:	e8 f4       	brcc	.+58     	; 0xa9e <main+0x8c>
     a64:	12 30       	cpi	r17, 0x02	; 2
     a66:	d8 f4       	brcc	.+54     	; 0xa9e <main+0x8c>
     a68:	01 e0       	ldi	r16, 0x01	; 1
			input_buffer[buffer_index++] = key;
     a6a:	01 0f       	add	r16, r17
     a6c:	e1 e0       	ldi	r30, 0x01	; 1
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	ec 0f       	add	r30, r28
     a72:	fd 1f       	adc	r31, r29
     a74:	e1 0f       	add	r30, r17
     a76:	f1 1d       	adc	r31, r1
     a78:	80 83       	st	Z, r24
			input_buffer[buffer_index] = '\0';
     a7a:	e1 e0       	ldi	r30, 0x01	; 1
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	ec 0f       	add	r30, r28
     a80:	fd 1f       	adc	r31, r29
     a82:	e0 0f       	add	r30, r16
			lcd_gotoxy(0, 1);
     a84:	f1 1d       	adc	r31, r1
     a86:	10 82       	st	Z, r1
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	80 e0       	ldi	r24, 0x00	; 0
			lcd_puts(input_buffer);
     a8c:	4e df       	rcall	.-356    	; 0x92a <lcd_gotoxy>
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
			print(input_buffer);
     a92:	68 df       	rcall	.-304    	; 0x964 <lcd_puts>
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	66 d0       	rcall	.+204    	; 0xb66 <print>

		} else if (key == '#') {
     a9a:	10 2f       	mov	r17, r16
			if (buffer_index > 0) {
     a9c:	de cf       	rjmp	.-68     	; 0xa5a <main+0x48>
     a9e:	83 32       	cpi	r24, 0x23	; 35
				uint8_t target_floor = atoi(input_buffer);
     aa0:	e9 f4       	brne	.+58     	; 0xadc <main+0xca>
     aa2:	11 23       	and	r17, r17
     aa4:	c1 f0       	breq	.+48     	; 0xad6 <main+0xc4>

				if (target_floor <= MAX_FLOOR) {
     aa6:	ce 01       	movw	r24, r28
     aa8:	01 96       	adiw	r24, 0x01	; 1
					move_elevator(target_floor);
     aaa:	77 d0       	rcall	.+238    	; 0xb9a <atoi>
     aac:	84 36       	cpi	r24, 0x64	; 100
     aae:	10 f4       	brcc	.+4      	; 0xab4 <main+0xa2>
					} else {
					lcd_clrscr();
     ab0:	6f dd       	rcall	.-1314   	; 0x590 <move_elevator>
					lcd_puts("Invalid floor");
     ab2:	11 c0       	rjmp	.+34     	; 0xad6 <main+0xc4>
     ab4:	42 df       	rcall	.-380    	; 0x93a <lcd_clrscr>
     ab6:	8c e0       	ldi	r24, 0x0C	; 12
     ab8:	94 e0       	ldi	r25, 0x04	; 4
					print("Invalid floor");
     aba:	54 df       	rcall	.-344    	; 0x964 <lcd_puts>
     abc:	8c e0       	ldi	r24, 0x0C	; 12
     abe:	94 e0       	ldi	r25, 0x04	; 4
     ac0:	52 d0       	rcall	.+164    	; 0xb66 <print>
     ac2:	2f ef       	ldi	r18, 0xFF	; 255
     ac4:	83 ed       	ldi	r24, 0xD3	; 211
     ac6:	90 e3       	ldi	r25, 0x30	; 48
     ac8:	21 50       	subi	r18, 0x01	; 1
     aca:	80 40       	sbci	r24, 0x00	; 0
     acc:	90 40       	sbci	r25, 0x00	; 0
					_delay_ms(1000);
					elevator_reset_ui();
     ace:	e1 f7       	brne	.-8      	; 0xac8 <main+0xb6>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <main+0xc0>
				}
			}

			// Reset input
			buffer_index = 0;
     ad2:	00 00       	nop
     ad4:	4f dc       	rcall	.-1890   	; 0x374 <elevator_reset_ui>
			input_buffer[0] = '\0';

		} else if (key == '*') { 			// Clear input
     ad6:	19 82       	std	Y+1, r1	; 0x01
     ad8:	10 e0       	ldi	r17, 0x00	; 0
			buffer_index = 0;
			input_buffer[0] = '\0';
     ada:	bf cf       	rjmp	.-130    	; 0xa5a <main+0x48>
			lcd_gotoxy(0, 1);
     adc:	8a 32       	cpi	r24, 0x2A	; 42
     ade:	61 f4       	brne	.+24     	; 0xaf8 <main+0xe6>
     ae0:	19 82       	std	Y+1, r1	; 0x01
     ae2:	61 e0       	ldi	r22, 0x01	; 1
			lcd_puts("              ");  // Clear line
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	21 df       	rcall	.-446    	; 0x92a <lcd_gotoxy>
     ae8:	8a e1       	ldi	r24, 0x1A	; 26
     aea:	94 e0       	ldi	r25, 0x04	; 4
			lcd_gotoxy(0, 1);
     aec:	3b df       	rcall	.-394    	; 0x964 <lcd_puts>
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	1b df       	rcall	.-458    	; 0x92a <lcd_gotoxy>
			// Reset input
			buffer_index = 0;
			input_buffer[0] = '\0';

		} else if (key == '*') { 			// Clear input
			buffer_index = 0;
     af4:	10 e0       	ldi	r17, 0x00	; 0
     af6:	b1 cf       	rjmp	.-158    	; 0xa5a <main+0x48>
			input_buffer[0] = '\0';
			lcd_gotoxy(0, 1);
			lcd_puts("              ");  // Clear line
			lcd_gotoxy(0, 1);
		} else { // Reset input
			print("No such floor exists. Floor selection has been reset.");
     af8:	89 e2       	ldi	r24, 0x29	; 41
     afa:	94 e0       	ldi	r25, 0x04	; 4
     afc:	34 d0       	rcall	.+104    	; 0xb66 <print>
     afe:	19 82       	std	Y+1, r1	; 0x01
			buffer_index = 0;
			input_buffer[0] = '\0';
     b00:	10 e0       	ldi	r17, 0x00	; 0
			lcd_gotoxy(0, 1);
			lcd_puts("              ");  // Clear line
			lcd_gotoxy(0, 1);
		} else { // Reset input
			print("No such floor exists. Floor selection has been reset.");
			buffer_index = 0;
     b02:	ab cf       	rjmp	.-170    	; 0xa5a <main+0x48>

00000b04 <uart_putchar>:
	// Redirect std I/O streams to UART
	stdout = &uart_output;
	stdin = &uart_input;
}

int uart_putchar(char c, FILE *stream) {
     b04:	cf 93       	push	r28
     b06:	c8 2f       	mov	r28, r24
	// Convert newline to carriage return + newline
	if (c == '\n') {
     b08:	8a 30       	cpi	r24, 0x0A	; 10
     b0a:	11 f4       	brne	.+4      	; 0xb10 <uart_putchar+0xc>
		uart_putchar('\r', stream);
     b0c:	8d e0       	ldi	r24, 0x0D	; 13
     b0e:	fa df       	rcall	.-12     	; 0xb04 <uart_putchar>
	}

	// Wait until buffer is empty
	while (!(UCSR0A & (1 << UDRE0)));
     b10:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     b14:	85 ff       	sbrs	r24, 5
     b16:	fc cf       	rjmp	.-8      	; 0xb10 <uart_putchar+0xc>
	UDR0 = c;
     b18:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	return 0;
}
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <uart_getchar>:

int uart_getchar(FILE *stream) {
	// Wait for incoming data
	while (!(UCSR0A & (1 << RXC0)));
     b24:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     b28:	88 23       	and	r24, r24
     b2a:	e4 f7       	brge	.-8      	; 0xb24 <uart_getchar>
	return UDR0;
     b2c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	08 95       	ret

00000b34 <uart_init>:
FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE uart_input  = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

void uart_init(uint16_t ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     b34:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
     b38:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

	// Enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     b3c:	e1 ec       	ldi	r30, 0xC1	; 193
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	88 61       	ori	r24, 0x18	; 24
     b44:	80 83       	st	Z, r24

	// Set frame format: 8 data bits, 2 stop bits
	UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
     b46:	e2 ec       	ldi	r30, 0xC2	; 194
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	8e 60       	ori	r24, 0x0E	; 14
     b4e:	80 83       	st	Z, r24

	// Redirect std I/O streams to UART
	stdout = &uart_output;
     b50:	e4 e6       	ldi	r30, 0x64	; 100
     b52:	f4 e0       	ldi	r31, 0x04	; 4
     b54:	8e e0       	ldi	r24, 0x0E	; 14
     b56:	92 e0       	ldi	r25, 0x02	; 2
     b58:	93 83       	std	Z+3, r25	; 0x03
     b5a:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	91 83       	std	Z+1, r25	; 0x01
     b62:	80 83       	st	Z, r24
     b64:	08 95       	ret

00000b66 <print>:
	// Wait for incoming data
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

void print(const char* msg) {
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	ec 01       	movw	r28, r24
	// Print a string over UART, character by character
	while (*msg) {
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <print+0x10>
		uart_putchar(*msg++, &uart_output);
     b6e:	21 96       	adiw	r28, 0x01	; 1
     b70:	6e e0       	ldi	r22, 0x0E	; 14
     b72:	72 e0       	ldi	r23, 0x02	; 2
     b74:	c7 df       	rcall	.-114    	; 0xb04 <uart_putchar>
	return UDR0;
}

void print(const char* msg) {
	// Print a string over UART, character by character
	while (*msg) {
     b76:	88 81       	ld	r24, Y
     b78:	81 11       	cpse	r24, r1
     b7a:	f9 cf       	rjmp	.-14     	; 0xb6e <print+0x8>
		uart_putchar(*msg++, &uart_output);
	}
	uart_putchar('\n', &uart_output);  // Append newline at the end
     b7c:	6e e0       	ldi	r22, 0x0E	; 14
     b7e:	72 e0       	ldi	r23, 0x02	; 2
     b80:	8a e0       	ldi	r24, 0x0A	; 10
     b82:	c0 df       	rcall	.-128    	; 0xb04 <uart_putchar>
}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <__tablejump2__>:
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	88 1f       	adc	r24, r24
     b90:	8b bf       	out	0x3b, r24	; 59
     b92:	07 90       	elpm	r0, Z+
     b94:	f6 91       	elpm	r31, Z
     b96:	e0 2d       	mov	r30, r0
     b98:	19 94       	eijmp

00000b9a <atoi>:
     b9a:	fc 01       	movw	r30, r24
     b9c:	88 27       	eor	r24, r24
     b9e:	99 27       	eor	r25, r25
     ba0:	e8 94       	clt
     ba2:	21 91       	ld	r18, Z+
     ba4:	20 32       	cpi	r18, 0x20	; 32
     ba6:	e9 f3       	breq	.-6      	; 0xba2 <atoi+0x8>
     ba8:	29 30       	cpi	r18, 0x09	; 9
     baa:	10 f0       	brcs	.+4      	; 0xbb0 <atoi+0x16>
     bac:	2e 30       	cpi	r18, 0x0E	; 14
     bae:	c8 f3       	brcs	.-14     	; 0xba2 <atoi+0x8>
     bb0:	2b 32       	cpi	r18, 0x2B	; 43
     bb2:	39 f0       	breq	.+14     	; 0xbc2 <atoi+0x28>
     bb4:	2d 32       	cpi	r18, 0x2D	; 45
     bb6:	31 f4       	brne	.+12     	; 0xbc4 <atoi+0x2a>
     bb8:	68 94       	set
     bba:	03 c0       	rjmp	.+6      	; 0xbc2 <atoi+0x28>
     bbc:	15 d0       	rcall	.+42     	; 0xbe8 <__mulhi_const_10>
     bbe:	82 0f       	add	r24, r18
     bc0:	91 1d       	adc	r25, r1
     bc2:	21 91       	ld	r18, Z+
     bc4:	20 53       	subi	r18, 0x30	; 48
     bc6:	2a 30       	cpi	r18, 0x0A	; 10
     bc8:	c8 f3       	brcs	.-14     	; 0xbbc <atoi+0x22>
     bca:	1e f4       	brtc	.+6      	; 0xbd2 <atoi+0x38>
     bcc:	90 95       	com	r25
     bce:	81 95       	neg	r24
     bd0:	9f 4f       	sbci	r25, 0xFF	; 255
     bd2:	08 95       	ret

00000bd4 <__itoa_ncheck>:
     bd4:	bb 27       	eor	r27, r27
     bd6:	4a 30       	cpi	r20, 0x0A	; 10
     bd8:	31 f4       	brne	.+12     	; 0xbe6 <__itoa_ncheck+0x12>
     bda:	99 23       	and	r25, r25
     bdc:	22 f4       	brpl	.+8      	; 0xbe6 <__itoa_ncheck+0x12>
     bde:	bd e2       	ldi	r27, 0x2D	; 45
     be0:	90 95       	com	r25
     be2:	81 95       	neg	r24
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	09 c0       	rjmp	.+18     	; 0xbfa <__utoa_common>

00000be8 <__mulhi_const_10>:
     be8:	7a e0       	ldi	r23, 0x0A	; 10
     bea:	97 9f       	mul	r25, r23
     bec:	90 2d       	mov	r25, r0
     bee:	87 9f       	mul	r24, r23
     bf0:	80 2d       	mov	r24, r0
     bf2:	91 0d       	add	r25, r1
     bf4:	11 24       	eor	r1, r1
     bf6:	08 95       	ret

00000bf8 <__utoa_ncheck>:
     bf8:	bb 27       	eor	r27, r27

00000bfa <__utoa_common>:
     bfa:	fb 01       	movw	r30, r22
     bfc:	55 27       	eor	r21, r21
     bfe:	aa 27       	eor	r26, r26
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	aa 1f       	adc	r26, r26
     c06:	a4 17       	cp	r26, r20
     c08:	10 f0       	brcs	.+4      	; 0xc0e <__utoa_common+0x14>
     c0a:	a4 1b       	sub	r26, r20
     c0c:	83 95       	inc	r24
     c0e:	50 51       	subi	r21, 0x10	; 16
     c10:	b9 f7       	brne	.-18     	; 0xc00 <__utoa_common+0x6>
     c12:	a0 5d       	subi	r26, 0xD0	; 208
     c14:	aa 33       	cpi	r26, 0x3A	; 58
     c16:	08 f0       	brcs	.+2      	; 0xc1a <__utoa_common+0x20>
     c18:	a9 5d       	subi	r26, 0xD9	; 217
     c1a:	a1 93       	st	Z+, r26
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	79 f7       	brne	.-34     	; 0xbfe <__utoa_common+0x4>
     c20:	b1 11       	cpse	r27, r1
     c22:	b1 93       	st	Z+, r27
     c24:	11 92       	st	Z+, r1
     c26:	cb 01       	movw	r24, r22
     c28:	62 c2       	rjmp	.+1220   	; 0x10ee <strrev>

00000c2a <printf>:
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	ae 01       	movw	r20, r28
     c34:	4a 5f       	subi	r20, 0xFA	; 250
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	fa 01       	movw	r30, r20
     c3a:	61 91       	ld	r22, Z+
     c3c:	71 91       	ld	r23, Z+
     c3e:	af 01       	movw	r20, r30
     c40:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <__iob+0x2>
     c44:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <__iob+0x3>
     c48:	3f d0       	rcall	.+126    	; 0xcc8 <vfprintf>
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <snprintf>:
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	2e 97       	sbiw	r28, 0x0e	; 14
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	0e 89       	ldd	r16, Y+22	; 0x16
     c6a:	1f 89       	ldd	r17, Y+23	; 0x17
     c6c:	88 8d       	ldd	r24, Y+24	; 0x18
     c6e:	99 8d       	ldd	r25, Y+25	; 0x19
     c70:	26 e0       	ldi	r18, 0x06	; 6
     c72:	2c 83       	std	Y+4, r18	; 0x04
     c74:	1a 83       	std	Y+2, r17	; 0x02
     c76:	09 83       	std	Y+1, r16	; 0x01
     c78:	97 ff       	sbrs	r25, 7
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <snprintf+0x30>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e8       	ldi	r25, 0x80	; 128
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9e 83       	std	Y+6, r25	; 0x06
     c84:	8d 83       	std	Y+5, r24	; 0x05
     c86:	ae 01       	movw	r20, r28
     c88:	44 5e       	subi	r20, 0xE4	; 228
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	6a 8d       	ldd	r22, Y+26	; 0x1a
     c8e:	7b 8d       	ldd	r23, Y+27	; 0x1b
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	19 d0       	rcall	.+50     	; 0xcc8 <vfprintf>
     c96:	4d 81       	ldd	r20, Y+5	; 0x05
     c98:	5e 81       	ldd	r21, Y+6	; 0x06
     c9a:	57 fd       	sbrc	r21, 7
     c9c:	0a c0       	rjmp	.+20     	; 0xcb2 <snprintf+0x62>
     c9e:	2f 81       	ldd	r18, Y+7	; 0x07
     ca0:	38 85       	ldd	r19, Y+8	; 0x08
     ca2:	42 17       	cp	r20, r18
     ca4:	53 07       	cpc	r21, r19
     ca6:	0c f4       	brge	.+2      	; 0xcaa <snprintf+0x5a>
     ca8:	9a 01       	movw	r18, r20
     caa:	f8 01       	movw	r30, r16
     cac:	e2 0f       	add	r30, r18
     cae:	f3 1f       	adc	r31, r19
     cb0:	10 82       	st	Z, r1
     cb2:	2e 96       	adiw	r28, 0x0e	; 14
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	08 95       	ret

00000cc8 <vfprintf>:
     cc8:	2f 92       	push	r2
     cca:	3f 92       	push	r3
     ccc:	4f 92       	push	r4
     cce:	5f 92       	push	r5
     cd0:	6f 92       	push	r6
     cd2:	7f 92       	push	r7
     cd4:	8f 92       	push	r8
     cd6:	9f 92       	push	r9
     cd8:	af 92       	push	r10
     cda:	bf 92       	push	r11
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	2b 97       	sbiw	r28, 0x0b	; 11
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	6c 01       	movw	r12, r24
     cfe:	7b 01       	movw	r14, r22
     d00:	8a 01       	movw	r16, r20
     d02:	fc 01       	movw	r30, r24
     d04:	17 82       	std	Z+7, r1	; 0x07
     d06:	16 82       	std	Z+6, r1	; 0x06
     d08:	83 81       	ldd	r24, Z+3	; 0x03
     d0a:	81 ff       	sbrs	r24, 1
     d0c:	bf c1       	rjmp	.+894    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	3c 01       	movw	r6, r24
     d14:	f6 01       	movw	r30, r12
     d16:	93 81       	ldd	r25, Z+3	; 0x03
     d18:	f7 01       	movw	r30, r14
     d1a:	93 fd       	sbrc	r25, 3
     d1c:	85 91       	lpm	r24, Z+
     d1e:	93 ff       	sbrs	r25, 3
     d20:	81 91       	ld	r24, Z+
     d22:	7f 01       	movw	r14, r30
     d24:	88 23       	and	r24, r24
     d26:	09 f4       	brne	.+2      	; 0xd2a <vfprintf+0x62>
     d28:	ad c1       	rjmp	.+858    	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
     d2a:	85 32       	cpi	r24, 0x25	; 37
     d2c:	39 f4       	brne	.+14     	; 0xd3c <vfprintf+0x74>
     d2e:	93 fd       	sbrc	r25, 3
     d30:	85 91       	lpm	r24, Z+
     d32:	93 ff       	sbrs	r25, 3
     d34:	81 91       	ld	r24, Z+
     d36:	7f 01       	movw	r14, r30
     d38:	85 32       	cpi	r24, 0x25	; 37
     d3a:	21 f4       	brne	.+8      	; 0xd44 <vfprintf+0x7c>
     d3c:	b6 01       	movw	r22, r12
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	e6 d1       	rcall	.+972    	; 0x110e <fputc>
     d42:	e8 cf       	rjmp	.-48     	; 0xd14 <vfprintf+0x4c>
     d44:	91 2c       	mov	r9, r1
     d46:	21 2c       	mov	r2, r1
     d48:	31 2c       	mov	r3, r1
     d4a:	ff e1       	ldi	r31, 0x1F	; 31
     d4c:	f3 15       	cp	r31, r3
     d4e:	d8 f0       	brcs	.+54     	; 0xd86 <vfprintf+0xbe>
     d50:	8b 32       	cpi	r24, 0x2B	; 43
     d52:	79 f0       	breq	.+30     	; 0xd72 <vfprintf+0xaa>
     d54:	38 f4       	brcc	.+14     	; 0xd64 <vfprintf+0x9c>
     d56:	80 32       	cpi	r24, 0x20	; 32
     d58:	79 f0       	breq	.+30     	; 0xd78 <vfprintf+0xb0>
     d5a:	83 32       	cpi	r24, 0x23	; 35
     d5c:	a1 f4       	brne	.+40     	; 0xd86 <vfprintf+0xbe>
     d5e:	23 2d       	mov	r18, r3
     d60:	20 61       	ori	r18, 0x10	; 16
     d62:	1d c0       	rjmp	.+58     	; 0xd9e <vfprintf+0xd6>
     d64:	8d 32       	cpi	r24, 0x2D	; 45
     d66:	61 f0       	breq	.+24     	; 0xd80 <vfprintf+0xb8>
     d68:	80 33       	cpi	r24, 0x30	; 48
     d6a:	69 f4       	brne	.+26     	; 0xd86 <vfprintf+0xbe>
     d6c:	23 2d       	mov	r18, r3
     d6e:	21 60       	ori	r18, 0x01	; 1
     d70:	16 c0       	rjmp	.+44     	; 0xd9e <vfprintf+0xd6>
     d72:	83 2d       	mov	r24, r3
     d74:	82 60       	ori	r24, 0x02	; 2
     d76:	38 2e       	mov	r3, r24
     d78:	e3 2d       	mov	r30, r3
     d7a:	e4 60       	ori	r30, 0x04	; 4
     d7c:	3e 2e       	mov	r3, r30
     d7e:	2a c0       	rjmp	.+84     	; 0xdd4 <vfprintf+0x10c>
     d80:	f3 2d       	mov	r31, r3
     d82:	f8 60       	ori	r31, 0x08	; 8
     d84:	1d c0       	rjmp	.+58     	; 0xdc0 <vfprintf+0xf8>
     d86:	37 fc       	sbrc	r3, 7
     d88:	2d c0       	rjmp	.+90     	; 0xde4 <vfprintf+0x11c>
     d8a:	20 ed       	ldi	r18, 0xD0	; 208
     d8c:	28 0f       	add	r18, r24
     d8e:	2a 30       	cpi	r18, 0x0A	; 10
     d90:	40 f0       	brcs	.+16     	; 0xda2 <vfprintf+0xda>
     d92:	8e 32       	cpi	r24, 0x2E	; 46
     d94:	b9 f4       	brne	.+46     	; 0xdc4 <vfprintf+0xfc>
     d96:	36 fc       	sbrc	r3, 6
     d98:	75 c1       	rjmp	.+746    	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
     d9a:	23 2d       	mov	r18, r3
     d9c:	20 64       	ori	r18, 0x40	; 64
     d9e:	32 2e       	mov	r3, r18
     da0:	19 c0       	rjmp	.+50     	; 0xdd4 <vfprintf+0x10c>
     da2:	36 fe       	sbrs	r3, 6
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <vfprintf+0xea>
     da6:	8a e0       	ldi	r24, 0x0A	; 10
     da8:	98 9e       	mul	r9, r24
     daa:	20 0d       	add	r18, r0
     dac:	11 24       	eor	r1, r1
     dae:	92 2e       	mov	r9, r18
     db0:	11 c0       	rjmp	.+34     	; 0xdd4 <vfprintf+0x10c>
     db2:	ea e0       	ldi	r30, 0x0A	; 10
     db4:	2e 9e       	mul	r2, r30
     db6:	20 0d       	add	r18, r0
     db8:	11 24       	eor	r1, r1
     dba:	22 2e       	mov	r2, r18
     dbc:	f3 2d       	mov	r31, r3
     dbe:	f0 62       	ori	r31, 0x20	; 32
     dc0:	3f 2e       	mov	r3, r31
     dc2:	08 c0       	rjmp	.+16     	; 0xdd4 <vfprintf+0x10c>
     dc4:	8c 36       	cpi	r24, 0x6C	; 108
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <vfprintf+0x108>
     dc8:	83 2d       	mov	r24, r3
     dca:	80 68       	ori	r24, 0x80	; 128
     dcc:	38 2e       	mov	r3, r24
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <vfprintf+0x10c>
     dd0:	88 36       	cpi	r24, 0x68	; 104
     dd2:	41 f4       	brne	.+16     	; 0xde4 <vfprintf+0x11c>
     dd4:	f7 01       	movw	r30, r14
     dd6:	93 fd       	sbrc	r25, 3
     dd8:	85 91       	lpm	r24, Z+
     dda:	93 ff       	sbrs	r25, 3
     ddc:	81 91       	ld	r24, Z+
     dde:	7f 01       	movw	r14, r30
     de0:	81 11       	cpse	r24, r1
     de2:	b3 cf       	rjmp	.-154    	; 0xd4a <vfprintf+0x82>
     de4:	98 2f       	mov	r25, r24
     de6:	9f 7d       	andi	r25, 0xDF	; 223
     de8:	95 54       	subi	r25, 0x45	; 69
     dea:	93 30       	cpi	r25, 0x03	; 3
     dec:	28 f4       	brcc	.+10     	; 0xdf8 <vfprintf+0x130>
     dee:	0c 5f       	subi	r16, 0xFC	; 252
     df0:	1f 4f       	sbci	r17, 0xFF	; 255
     df2:	9f e3       	ldi	r25, 0x3F	; 63
     df4:	99 83       	std	Y+1, r25	; 0x01
     df6:	0d c0       	rjmp	.+26     	; 0xe12 <vfprintf+0x14a>
     df8:	83 36       	cpi	r24, 0x63	; 99
     dfa:	31 f0       	breq	.+12     	; 0xe08 <vfprintf+0x140>
     dfc:	83 37       	cpi	r24, 0x73	; 115
     dfe:	71 f0       	breq	.+28     	; 0xe1c <vfprintf+0x154>
     e00:	83 35       	cpi	r24, 0x53	; 83
     e02:	09 f0       	breq	.+2      	; 0xe06 <vfprintf+0x13e>
     e04:	55 c0       	rjmp	.+170    	; 0xeb0 <vfprintf+0x1e8>
     e06:	20 c0       	rjmp	.+64     	; 0xe48 <vfprintf+0x180>
     e08:	f8 01       	movw	r30, r16
     e0a:	80 81       	ld	r24, Z
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	0e 5f       	subi	r16, 0xFE	; 254
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	88 24       	eor	r8, r8
     e14:	83 94       	inc	r8
     e16:	91 2c       	mov	r9, r1
     e18:	53 01       	movw	r10, r6
     e1a:	12 c0       	rjmp	.+36     	; 0xe40 <vfprintf+0x178>
     e1c:	28 01       	movw	r4, r16
     e1e:	f2 e0       	ldi	r31, 0x02	; 2
     e20:	4f 0e       	add	r4, r31
     e22:	51 1c       	adc	r5, r1
     e24:	f8 01       	movw	r30, r16
     e26:	a0 80       	ld	r10, Z
     e28:	b1 80       	ldd	r11, Z+1	; 0x01
     e2a:	36 fe       	sbrs	r3, 6
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <vfprintf+0x16c>
     e2e:	69 2d       	mov	r22, r9
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <vfprintf+0x170>
     e34:	6f ef       	ldi	r22, 0xFF	; 255
     e36:	7f ef       	ldi	r23, 0xFF	; 255
     e38:	c5 01       	movw	r24, r10
     e3a:	4e d1       	rcall	.+668    	; 0x10d8 <strnlen>
     e3c:	4c 01       	movw	r8, r24
     e3e:	82 01       	movw	r16, r4
     e40:	f3 2d       	mov	r31, r3
     e42:	ff 77       	andi	r31, 0x7F	; 127
     e44:	3f 2e       	mov	r3, r31
     e46:	15 c0       	rjmp	.+42     	; 0xe72 <vfprintf+0x1aa>
     e48:	28 01       	movw	r4, r16
     e4a:	22 e0       	ldi	r18, 0x02	; 2
     e4c:	42 0e       	add	r4, r18
     e4e:	51 1c       	adc	r5, r1
     e50:	f8 01       	movw	r30, r16
     e52:	a0 80       	ld	r10, Z
     e54:	b1 80       	ldd	r11, Z+1	; 0x01
     e56:	36 fe       	sbrs	r3, 6
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <vfprintf+0x198>
     e5a:	69 2d       	mov	r22, r9
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <vfprintf+0x19c>
     e60:	6f ef       	ldi	r22, 0xFF	; 255
     e62:	7f ef       	ldi	r23, 0xFF	; 255
     e64:	c5 01       	movw	r24, r10
     e66:	2d d1       	rcall	.+602    	; 0x10c2 <strnlen_P>
     e68:	4c 01       	movw	r8, r24
     e6a:	f3 2d       	mov	r31, r3
     e6c:	f0 68       	ori	r31, 0x80	; 128
     e6e:	3f 2e       	mov	r3, r31
     e70:	82 01       	movw	r16, r4
     e72:	33 fc       	sbrc	r3, 3
     e74:	19 c0       	rjmp	.+50     	; 0xea8 <vfprintf+0x1e0>
     e76:	82 2d       	mov	r24, r2
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	88 16       	cp	r8, r24
     e7c:	99 06       	cpc	r9, r25
     e7e:	a0 f4       	brcc	.+40     	; 0xea8 <vfprintf+0x1e0>
     e80:	b6 01       	movw	r22, r12
     e82:	80 e2       	ldi	r24, 0x20	; 32
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	43 d1       	rcall	.+646    	; 0x110e <fputc>
     e88:	2a 94       	dec	r2
     e8a:	f5 cf       	rjmp	.-22     	; 0xe76 <vfprintf+0x1ae>
     e8c:	f5 01       	movw	r30, r10
     e8e:	37 fc       	sbrc	r3, 7
     e90:	85 91       	lpm	r24, Z+
     e92:	37 fe       	sbrs	r3, 7
     e94:	81 91       	ld	r24, Z+
     e96:	5f 01       	movw	r10, r30
     e98:	b6 01       	movw	r22, r12
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	38 d1       	rcall	.+624    	; 0x110e <fputc>
     e9e:	21 10       	cpse	r2, r1
     ea0:	2a 94       	dec	r2
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	82 1a       	sub	r8, r18
     ea6:	91 08       	sbc	r9, r1
     ea8:	81 14       	cp	r8, r1
     eaa:	91 04       	cpc	r9, r1
     eac:	79 f7       	brne	.-34     	; 0xe8c <vfprintf+0x1c4>
     eae:	e1 c0       	rjmp	.+450    	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
     eb0:	84 36       	cpi	r24, 0x64	; 100
     eb2:	11 f0       	breq	.+4      	; 0xeb8 <vfprintf+0x1f0>
     eb4:	89 36       	cpi	r24, 0x69	; 105
     eb6:	39 f5       	brne	.+78     	; 0xf06 <vfprintf+0x23e>
     eb8:	f8 01       	movw	r30, r16
     eba:	37 fe       	sbrs	r3, 7
     ebc:	07 c0       	rjmp	.+14     	; 0xecc <vfprintf+0x204>
     ebe:	60 81       	ld	r22, Z
     ec0:	71 81       	ldd	r23, Z+1	; 0x01
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	93 81       	ldd	r25, Z+3	; 0x03
     ec6:	0c 5f       	subi	r16, 0xFC	; 252
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	08 c0       	rjmp	.+16     	; 0xedc <vfprintf+0x214>
     ecc:	60 81       	ld	r22, Z
     ece:	71 81       	ldd	r23, Z+1	; 0x01
     ed0:	07 2e       	mov	r0, r23
     ed2:	00 0c       	add	r0, r0
     ed4:	88 0b       	sbc	r24, r24
     ed6:	99 0b       	sbc	r25, r25
     ed8:	0e 5f       	subi	r16, 0xFE	; 254
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	f3 2d       	mov	r31, r3
     ede:	ff 76       	andi	r31, 0x6F	; 111
     ee0:	3f 2e       	mov	r3, r31
     ee2:	97 ff       	sbrs	r25, 7
     ee4:	09 c0       	rjmp	.+18     	; 0xef8 <vfprintf+0x230>
     ee6:	90 95       	com	r25
     ee8:	80 95       	com	r24
     eea:	70 95       	com	r23
     eec:	61 95       	neg	r22
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	8f 4f       	sbci	r24, 0xFF	; 255
     ef2:	9f 4f       	sbci	r25, 0xFF	; 255
     ef4:	f0 68       	ori	r31, 0x80	; 128
     ef6:	3f 2e       	mov	r3, r31
     ef8:	2a e0       	ldi	r18, 0x0A	; 10
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	a3 01       	movw	r20, r6
     efe:	43 d1       	rcall	.+646    	; 0x1186 <__ultoa_invert>
     f00:	88 2e       	mov	r8, r24
     f02:	86 18       	sub	r8, r6
     f04:	44 c0       	rjmp	.+136    	; 0xf8e <vfprintf+0x2c6>
     f06:	85 37       	cpi	r24, 0x75	; 117
     f08:	31 f4       	brne	.+12     	; 0xf16 <vfprintf+0x24e>
     f0a:	23 2d       	mov	r18, r3
     f0c:	2f 7e       	andi	r18, 0xEF	; 239
     f0e:	b2 2e       	mov	r11, r18
     f10:	2a e0       	ldi	r18, 0x0A	; 10
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	25 c0       	rjmp	.+74     	; 0xf60 <vfprintf+0x298>
     f16:	93 2d       	mov	r25, r3
     f18:	99 7f       	andi	r25, 0xF9	; 249
     f1a:	b9 2e       	mov	r11, r25
     f1c:	8f 36       	cpi	r24, 0x6F	; 111
     f1e:	c1 f0       	breq	.+48     	; 0xf50 <vfprintf+0x288>
     f20:	18 f4       	brcc	.+6      	; 0xf28 <vfprintf+0x260>
     f22:	88 35       	cpi	r24, 0x58	; 88
     f24:	79 f0       	breq	.+30     	; 0xf44 <vfprintf+0x27c>
     f26:	ae c0       	rjmp	.+348    	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
     f28:	80 37       	cpi	r24, 0x70	; 112
     f2a:	19 f0       	breq	.+6      	; 0xf32 <vfprintf+0x26a>
     f2c:	88 37       	cpi	r24, 0x78	; 120
     f2e:	21 f0       	breq	.+8      	; 0xf38 <vfprintf+0x270>
     f30:	a9 c0       	rjmp	.+338    	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
     f32:	e9 2f       	mov	r30, r25
     f34:	e0 61       	ori	r30, 0x10	; 16
     f36:	be 2e       	mov	r11, r30
     f38:	b4 fe       	sbrs	r11, 4
     f3a:	0d c0       	rjmp	.+26     	; 0xf56 <vfprintf+0x28e>
     f3c:	fb 2d       	mov	r31, r11
     f3e:	f4 60       	ori	r31, 0x04	; 4
     f40:	bf 2e       	mov	r11, r31
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <vfprintf+0x28e>
     f44:	34 fe       	sbrs	r3, 4
     f46:	0a c0       	rjmp	.+20     	; 0xf5c <vfprintf+0x294>
     f48:	29 2f       	mov	r18, r25
     f4a:	26 60       	ori	r18, 0x06	; 6
     f4c:	b2 2e       	mov	r11, r18
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <vfprintf+0x294>
     f50:	28 e0       	ldi	r18, 0x08	; 8
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	05 c0       	rjmp	.+10     	; 0xf60 <vfprintf+0x298>
     f56:	20 e1       	ldi	r18, 0x10	; 16
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0x298>
     f5c:	20 e1       	ldi	r18, 0x10	; 16
     f5e:	32 e0       	ldi	r19, 0x02	; 2
     f60:	f8 01       	movw	r30, r16
     f62:	b7 fe       	sbrs	r11, 7
     f64:	07 c0       	rjmp	.+14     	; 0xf74 <vfprintf+0x2ac>
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	0c 5f       	subi	r16, 0xFC	; 252
     f70:	1f 4f       	sbci	r17, 0xFF	; 255
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <vfprintf+0x2b8>
     f74:	60 81       	ld	r22, Z
     f76:	71 81       	ldd	r23, Z+1	; 0x01
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 5f       	subi	r16, 0xFE	; 254
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	a3 01       	movw	r20, r6
     f82:	01 d1       	rcall	.+514    	; 0x1186 <__ultoa_invert>
     f84:	88 2e       	mov	r8, r24
     f86:	86 18       	sub	r8, r6
     f88:	fb 2d       	mov	r31, r11
     f8a:	ff 77       	andi	r31, 0x7F	; 127
     f8c:	3f 2e       	mov	r3, r31
     f8e:	36 fe       	sbrs	r3, 6
     f90:	0d c0       	rjmp	.+26     	; 0xfac <vfprintf+0x2e4>
     f92:	23 2d       	mov	r18, r3
     f94:	2e 7f       	andi	r18, 0xFE	; 254
     f96:	a2 2e       	mov	r10, r18
     f98:	89 14       	cp	r8, r9
     f9a:	58 f4       	brcc	.+22     	; 0xfb2 <vfprintf+0x2ea>
     f9c:	34 fe       	sbrs	r3, 4
     f9e:	0b c0       	rjmp	.+22     	; 0xfb6 <vfprintf+0x2ee>
     fa0:	32 fc       	sbrc	r3, 2
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <vfprintf+0x2ee>
     fa4:	83 2d       	mov	r24, r3
     fa6:	8e 7e       	andi	r24, 0xEE	; 238
     fa8:	a8 2e       	mov	r10, r24
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <vfprintf+0x2ee>
     fac:	b8 2c       	mov	r11, r8
     fae:	a3 2c       	mov	r10, r3
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <vfprintf+0x2f0>
     fb2:	b8 2c       	mov	r11, r8
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <vfprintf+0x2f0>
     fb6:	b9 2c       	mov	r11, r9
     fb8:	a4 fe       	sbrs	r10, 4
     fba:	0f c0       	rjmp	.+30     	; 0xfda <vfprintf+0x312>
     fbc:	fe 01       	movw	r30, r28
     fbe:	e8 0d       	add	r30, r8
     fc0:	f1 1d       	adc	r31, r1
     fc2:	80 81       	ld	r24, Z
     fc4:	80 33       	cpi	r24, 0x30	; 48
     fc6:	21 f4       	brne	.+8      	; 0xfd0 <vfprintf+0x308>
     fc8:	9a 2d       	mov	r25, r10
     fca:	99 7e       	andi	r25, 0xE9	; 233
     fcc:	a9 2e       	mov	r10, r25
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <vfprintf+0x31a>
     fd0:	a2 fe       	sbrs	r10, 2
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <vfprintf+0x318>
     fd4:	b3 94       	inc	r11
     fd6:	b3 94       	inc	r11
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <vfprintf+0x31a>
     fda:	8a 2d       	mov	r24, r10
     fdc:	86 78       	andi	r24, 0x86	; 134
     fde:	09 f0       	breq	.+2      	; 0xfe2 <vfprintf+0x31a>
     fe0:	b3 94       	inc	r11
     fe2:	a3 fc       	sbrc	r10, 3
     fe4:	10 c0       	rjmp	.+32     	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
     fe6:	a0 fe       	sbrs	r10, 0
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <vfprintf+0x32e>
     fea:	b2 14       	cp	r11, r2
     fec:	80 f4       	brcc	.+32     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     fee:	28 0c       	add	r2, r8
     ff0:	92 2c       	mov	r9, r2
     ff2:	9b 18       	sub	r9, r11
     ff4:	0d c0       	rjmp	.+26     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     ff6:	b2 14       	cp	r11, r2
     ff8:	58 f4       	brcc	.+22     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     ffa:	b6 01       	movw	r22, r12
     ffc:	80 e2       	ldi	r24, 0x20	; 32
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	86 d0       	rcall	.+268    	; 0x110e <fputc>
    1002:	b3 94       	inc	r11
    1004:	f8 cf       	rjmp	.-16     	; 0xff6 <vfprintf+0x32e>
    1006:	b2 14       	cp	r11, r2
    1008:	18 f4       	brcc	.+6      	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    100a:	2b 18       	sub	r2, r11
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    100e:	98 2c       	mov	r9, r8
    1010:	21 2c       	mov	r2, r1
    1012:	a4 fe       	sbrs	r10, 4
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <__EEPROM_REGION_LENGTH__+0x34>
    1016:	b6 01       	movw	r22, r12
    1018:	80 e3       	ldi	r24, 0x30	; 48
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	78 d0       	rcall	.+240    	; 0x110e <fputc>
    101e:	a2 fe       	sbrs	r10, 2
    1020:	16 c0       	rjmp	.+44     	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
    1022:	a1 fc       	sbrc	r10, 1
    1024:	03 c0       	rjmp	.+6      	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    1026:	88 e7       	ldi	r24, 0x78	; 120
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
    102c:	88 e5       	ldi	r24, 0x58	; 88
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	b6 01       	movw	r22, r12
    1032:	0c c0       	rjmp	.+24     	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
    1034:	8a 2d       	mov	r24, r10
    1036:	86 78       	andi	r24, 0x86	; 134
    1038:	51 f0       	breq	.+20     	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
    103a:	a1 fe       	sbrs	r10, 1
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
    103e:	8b e2       	ldi	r24, 0x2B	; 43
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1042:	80 e2       	ldi	r24, 0x20	; 32
    1044:	a7 fc       	sbrc	r10, 7
    1046:	8d e2       	ldi	r24, 0x2D	; 45
    1048:	b6 01       	movw	r22, r12
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	60 d0       	rcall	.+192    	; 0x110e <fputc>
    104e:	89 14       	cp	r8, r9
    1050:	30 f4       	brcc	.+12     	; 0x105e <__EEPROM_REGION_LENGTH__+0x5e>
    1052:	b6 01       	movw	r22, r12
    1054:	80 e3       	ldi	r24, 0x30	; 48
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	5a d0       	rcall	.+180    	; 0x110e <fputc>
    105a:	9a 94       	dec	r9
    105c:	f8 cf       	rjmp	.-16     	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
    105e:	8a 94       	dec	r8
    1060:	f3 01       	movw	r30, r6
    1062:	e8 0d       	add	r30, r8
    1064:	f1 1d       	adc	r31, r1
    1066:	80 81       	ld	r24, Z
    1068:	b6 01       	movw	r22, r12
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	50 d0       	rcall	.+160    	; 0x110e <fputc>
    106e:	81 10       	cpse	r8, r1
    1070:	f6 cf       	rjmp	.-20     	; 0x105e <__EEPROM_REGION_LENGTH__+0x5e>
    1072:	22 20       	and	r2, r2
    1074:	09 f4       	brne	.+2      	; 0x1078 <__EEPROM_REGION_LENGTH__+0x78>
    1076:	4e ce       	rjmp	.-868    	; 0xd14 <vfprintf+0x4c>
    1078:	b6 01       	movw	r22, r12
    107a:	80 e2       	ldi	r24, 0x20	; 32
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	47 d0       	rcall	.+142    	; 0x110e <fputc>
    1080:	2a 94       	dec	r2
    1082:	f7 cf       	rjmp	.-18     	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
    1084:	f6 01       	movw	r30, r12
    1086:	86 81       	ldd	r24, Z+6	; 0x06
    1088:	97 81       	ldd	r25, Z+7	; 0x07
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <__EEPROM_REGION_LENGTH__+0x90>
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	9f ef       	ldi	r25, 0xFF	; 255
    1090:	2b 96       	adiw	r28, 0x0b	; 11
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	9f 90       	pop	r9
    10b2:	8f 90       	pop	r8
    10b4:	7f 90       	pop	r7
    10b6:	6f 90       	pop	r6
    10b8:	5f 90       	pop	r5
    10ba:	4f 90       	pop	r4
    10bc:	3f 90       	pop	r3
    10be:	2f 90       	pop	r2
    10c0:	08 95       	ret

000010c2 <strnlen_P>:
    10c2:	fc 01       	movw	r30, r24
    10c4:	05 90       	lpm	r0, Z+
    10c6:	61 50       	subi	r22, 0x01	; 1
    10c8:	70 40       	sbci	r23, 0x00	; 0
    10ca:	01 10       	cpse	r0, r1
    10cc:	d8 f7       	brcc	.-10     	; 0x10c4 <strnlen_P+0x2>
    10ce:	80 95       	com	r24
    10d0:	90 95       	com	r25
    10d2:	8e 0f       	add	r24, r30
    10d4:	9f 1f       	adc	r25, r31
    10d6:	08 95       	ret

000010d8 <strnlen>:
    10d8:	fc 01       	movw	r30, r24
    10da:	61 50       	subi	r22, 0x01	; 1
    10dc:	70 40       	sbci	r23, 0x00	; 0
    10de:	01 90       	ld	r0, Z+
    10e0:	01 10       	cpse	r0, r1
    10e2:	d8 f7       	brcc	.-10     	; 0x10da <strnlen+0x2>
    10e4:	80 95       	com	r24
    10e6:	90 95       	com	r25
    10e8:	8e 0f       	add	r24, r30
    10ea:	9f 1f       	adc	r25, r31
    10ec:	08 95       	ret

000010ee <strrev>:
    10ee:	dc 01       	movw	r26, r24
    10f0:	fc 01       	movw	r30, r24
    10f2:	67 2f       	mov	r22, r23
    10f4:	71 91       	ld	r23, Z+
    10f6:	77 23       	and	r23, r23
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <strrev+0x4>
    10fa:	32 97       	sbiw	r30, 0x02	; 2
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <strrev+0x18>
    10fe:	7c 91       	ld	r23, X
    1100:	6d 93       	st	X+, r22
    1102:	70 83       	st	Z, r23
    1104:	62 91       	ld	r22, -Z
    1106:	ae 17       	cp	r26, r30
    1108:	bf 07       	cpc	r27, r31
    110a:	c8 f3       	brcs	.-14     	; 0x10fe <strrev+0x10>
    110c:	08 95       	ret

0000110e <fputc>:
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	fb 01       	movw	r30, r22
    1118:	23 81       	ldd	r18, Z+3	; 0x03
    111a:	21 fd       	sbrc	r18, 1
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <fputc+0x16>
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	9f ef       	ldi	r25, 0xFF	; 255
    1122:	2c c0       	rjmp	.+88     	; 0x117c <fputc+0x6e>
    1124:	22 ff       	sbrs	r18, 2
    1126:	16 c0       	rjmp	.+44     	; 0x1154 <fputc+0x46>
    1128:	46 81       	ldd	r20, Z+6	; 0x06
    112a:	57 81       	ldd	r21, Z+7	; 0x07
    112c:	24 81       	ldd	r18, Z+4	; 0x04
    112e:	35 81       	ldd	r19, Z+5	; 0x05
    1130:	42 17       	cp	r20, r18
    1132:	53 07       	cpc	r21, r19
    1134:	44 f4       	brge	.+16     	; 0x1146 <fputc+0x38>
    1136:	a0 81       	ld	r26, Z
    1138:	b1 81       	ldd	r27, Z+1	; 0x01
    113a:	9d 01       	movw	r18, r26
    113c:	2f 5f       	subi	r18, 0xFF	; 255
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	31 83       	std	Z+1, r19	; 0x01
    1142:	20 83       	st	Z, r18
    1144:	8c 93       	st	X, r24
    1146:	26 81       	ldd	r18, Z+6	; 0x06
    1148:	37 81       	ldd	r19, Z+7	; 0x07
    114a:	2f 5f       	subi	r18, 0xFF	; 255
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	37 83       	std	Z+7, r19	; 0x07
    1150:	26 83       	std	Z+6, r18	; 0x06
    1152:	14 c0       	rjmp	.+40     	; 0x117c <fputc+0x6e>
    1154:	8b 01       	movw	r16, r22
    1156:	ec 01       	movw	r28, r24
    1158:	fb 01       	movw	r30, r22
    115a:	00 84       	ldd	r0, Z+8	; 0x08
    115c:	f1 85       	ldd	r31, Z+9	; 0x09
    115e:	e0 2d       	mov	r30, r0
    1160:	19 95       	eicall
    1162:	89 2b       	or	r24, r25
    1164:	e1 f6       	brne	.-72     	; 0x111e <fputc+0x10>
    1166:	d8 01       	movw	r26, r16
    1168:	16 96       	adiw	r26, 0x06	; 6
    116a:	8d 91       	ld	r24, X+
    116c:	9c 91       	ld	r25, X
    116e:	17 97       	sbiw	r26, 0x07	; 7
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	17 96       	adiw	r26, 0x07	; 7
    1174:	9c 93       	st	X, r25
    1176:	8e 93       	st	-X, r24
    1178:	16 97       	sbiw	r26, 0x06	; 6
    117a:	ce 01       	movw	r24, r28
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	08 95       	ret

00001186 <__ultoa_invert>:
    1186:	fa 01       	movw	r30, r20
    1188:	aa 27       	eor	r26, r26
    118a:	28 30       	cpi	r18, 0x08	; 8
    118c:	51 f1       	breq	.+84     	; 0x11e2 <__ultoa_invert+0x5c>
    118e:	20 31       	cpi	r18, 0x10	; 16
    1190:	81 f1       	breq	.+96     	; 0x11f2 <__ultoa_invert+0x6c>
    1192:	e8 94       	clt
    1194:	6f 93       	push	r22
    1196:	6e 7f       	andi	r22, 0xFE	; 254
    1198:	6e 5f       	subi	r22, 0xFE	; 254
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	8f 4f       	sbci	r24, 0xFF	; 255
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	af 4f       	sbci	r26, 0xFF	; 255
    11a2:	b1 e0       	ldi	r27, 0x01	; 1
    11a4:	3e d0       	rcall	.+124    	; 0x1222 <__ultoa_invert+0x9c>
    11a6:	b4 e0       	ldi	r27, 0x04	; 4
    11a8:	3c d0       	rcall	.+120    	; 0x1222 <__ultoa_invert+0x9c>
    11aa:	67 0f       	add	r22, r23
    11ac:	78 1f       	adc	r23, r24
    11ae:	89 1f       	adc	r24, r25
    11b0:	9a 1f       	adc	r25, r26
    11b2:	a1 1d       	adc	r26, r1
    11b4:	68 0f       	add	r22, r24
    11b6:	79 1f       	adc	r23, r25
    11b8:	8a 1f       	adc	r24, r26
    11ba:	91 1d       	adc	r25, r1
    11bc:	a1 1d       	adc	r26, r1
    11be:	6a 0f       	add	r22, r26
    11c0:	71 1d       	adc	r23, r1
    11c2:	81 1d       	adc	r24, r1
    11c4:	91 1d       	adc	r25, r1
    11c6:	a1 1d       	adc	r26, r1
    11c8:	20 d0       	rcall	.+64     	; 0x120a <__ultoa_invert+0x84>
    11ca:	09 f4       	brne	.+2      	; 0x11ce <__ultoa_invert+0x48>
    11cc:	68 94       	set
    11ce:	3f 91       	pop	r19
    11d0:	2a e0       	ldi	r18, 0x0A	; 10
    11d2:	26 9f       	mul	r18, r22
    11d4:	11 24       	eor	r1, r1
    11d6:	30 19       	sub	r19, r0
    11d8:	30 5d       	subi	r19, 0xD0	; 208
    11da:	31 93       	st	Z+, r19
    11dc:	de f6       	brtc	.-74     	; 0x1194 <__ultoa_invert+0xe>
    11de:	cf 01       	movw	r24, r30
    11e0:	08 95       	ret
    11e2:	46 2f       	mov	r20, r22
    11e4:	47 70       	andi	r20, 0x07	; 7
    11e6:	40 5d       	subi	r20, 0xD0	; 208
    11e8:	41 93       	st	Z+, r20
    11ea:	b3 e0       	ldi	r27, 0x03	; 3
    11ec:	0f d0       	rcall	.+30     	; 0x120c <__ultoa_invert+0x86>
    11ee:	c9 f7       	brne	.-14     	; 0x11e2 <__ultoa_invert+0x5c>
    11f0:	f6 cf       	rjmp	.-20     	; 0x11de <__ultoa_invert+0x58>
    11f2:	46 2f       	mov	r20, r22
    11f4:	4f 70       	andi	r20, 0x0F	; 15
    11f6:	40 5d       	subi	r20, 0xD0	; 208
    11f8:	4a 33       	cpi	r20, 0x3A	; 58
    11fa:	18 f0       	brcs	.+6      	; 0x1202 <__ultoa_invert+0x7c>
    11fc:	49 5d       	subi	r20, 0xD9	; 217
    11fe:	31 fd       	sbrc	r19, 1
    1200:	40 52       	subi	r20, 0x20	; 32
    1202:	41 93       	st	Z+, r20
    1204:	02 d0       	rcall	.+4      	; 0x120a <__ultoa_invert+0x84>
    1206:	a9 f7       	brne	.-22     	; 0x11f2 <__ultoa_invert+0x6c>
    1208:	ea cf       	rjmp	.-44     	; 0x11de <__ultoa_invert+0x58>
    120a:	b4 e0       	ldi	r27, 0x04	; 4
    120c:	a6 95       	lsr	r26
    120e:	97 95       	ror	r25
    1210:	87 95       	ror	r24
    1212:	77 95       	ror	r23
    1214:	67 95       	ror	r22
    1216:	ba 95       	dec	r27
    1218:	c9 f7       	brne	.-14     	; 0x120c <__ultoa_invert+0x86>
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	61 05       	cpc	r22, r1
    121e:	71 05       	cpc	r23, r1
    1220:	08 95       	ret
    1222:	9b 01       	movw	r18, r22
    1224:	ac 01       	movw	r20, r24
    1226:	0a 2e       	mov	r0, r26
    1228:	06 94       	lsr	r0
    122a:	57 95       	ror	r21
    122c:	47 95       	ror	r20
    122e:	37 95       	ror	r19
    1230:	27 95       	ror	r18
    1232:	ba 95       	dec	r27
    1234:	c9 f7       	brne	.-14     	; 0x1228 <__ultoa_invert+0xa2>
    1236:	62 0f       	add	r22, r18
    1238:	73 1f       	adc	r23, r19
    123a:	84 1f       	adc	r24, r20
    123c:	95 1f       	adc	r25, r21
    123e:	a0 1d       	adc	r26, r0
    1240:	08 95       	ret

00001242 <_exit>:
    1242:	f8 94       	cli

00001244 <__stop_program>:
    1244:	ff cf       	rjmp	.-2      	; 0x1244 <__stop_program>
